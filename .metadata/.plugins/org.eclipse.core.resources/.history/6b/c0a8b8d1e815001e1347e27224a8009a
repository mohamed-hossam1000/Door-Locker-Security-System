 /******************************************************************************
 *
 * Project : Smart Lock
 *
 * File Name: MCU_1.c
 *
 * Description: Control ECU for Smart Lock
 *
 * Author: Mohamed Hossam
 *
 *******************************************************************************/

#include<avr/io.h>
#include<util/delay.h>
#include"uart.h"
#include"timer1.h"
#include"external_eeprom.h"
#include"buzzer.h"
#include"dc_motor.h"
#include"twi.h"
#include"lcd.h"

#define PASSWORD_LOCATION 0x45
#define OPEN_DOOR 11
#define SET_PASSWORD 20
#define COMPARE_PASSWORD 21
#define BUZZER_ON 16
#define BUZZER_OFF 17
#define UNMATCHED_PASSWORDS 31
#define MATCHED_PASSWORDS 30
#define DUMMY_BYTE 19

volatile uint8 g_time;
/* a variable to store Timer1 configuration */
Timer1_ConfigType timerConfig;

void timerTick();
uint8 setPassword();
uint8 checkPassword();
void openDoor();



int main()
{
	/* a variable to store received commands from MCU1 */
	uint8 command;
	/* a variable to store UART configuration */
	UART_ConfigType uartConfig;
	/* a variable to store TWI configuration */
	TWI_ConfigType config;
	config.address=1;
	config.bit_rate=2;
	TWI_init(&config);
	LCD_init();

	/* UART configuration and initialization */
	uartConfig.baudRate = 4800;
	uartConfig.character_size = EIGHT_BITS;
	uartConfig.parity = DISABLED;
	uartConfig.stop_bits = ONE_BIT;
	UART_init(&uartConfig);

	/* Timer1 configuration without initialization
	 * configured to give interrupt every 3seconds */
	timerConfig.initial_value = 0;
	timerConfig.mode = COMPARE;
	timerConfig.compare_value = 23437;
	timerConfig.prescaler = CLK_1024;
	Timer1_setCallBack(timerTick);

	/* initialize Buzzer */
	Buzzer_init();
	/* initialize DcMotor */
	DcMotor_init();

	for(;;)
	{
		command = UART_receiveByte();
		switch(command)
		{
		case SET_PASSWORD:
			/* receive and compare the two passwords sent by MCU1 and return whether they match or not to MCU1 */
			/* save password in EEPROM if they match */
			if(setPassword() == MATCHED_PASSWORDS)
			{
				UART_sendByte(MATCHED_PASSWORDS);
			}
			else
			{
				UART_sendByte(UNMATCHED_PASSWORDS);
			}
			break;
		case COMPARE_PASSWORD:
			if(checkPassword() == MATCHED_PASSWORDS)
			{
				UART_sendByte(MATCHED_PASSWORDS);
				command = UART_receiveByte();
				if(command == OPEN_DOOR)
				{
					openDoor();
				}
				else if(command == SET_PASSWORD)
				{
					/* receive and compare the two passwords sent by MCU1 and return whether they match or not to MCU1 */
					/* save password in EEPROM if they match */
					if(setPassword() == MATCHED_PASSWORDS)
					{
						UART_sendByte(MATCHED_PASSWORDS);
					}
					else
					{
						UART_sendByte(UNMATCHED_PASSWORDS);
					}
				}
			}
			else
			{
				UART_sendByte(UNMATCHED_PASSWORDS);
			}
			break;
		case BUZZER_ON:
			Buzzer_on();
			break;
		case BUZZER_OFF:
			Buzzer_off();
			break;
		}
	}
}

/*
 * Description :
 * a function that acts as the ISR of timer1
 * increase the time every interrupt
 */
void timerTick()
{
	g_time--;
}

/*
 * Description :
 * 	receive and compare the two passwords sent by MCU1 and return whether they match or not
 *	save password in EEPROM if they match
 */
uint8 setPassword()
{
	/* loop variable */
	uint8 i;
	/* a variable to store the password */
	uint8 pass[6];
	/* a variable to store the re_entered password */
	uint8 passConfirm[6];
	/* receive both passwords from MCU1 */
	for(i=0; i<5; i++)
	{
		pass[i] = UART_receiveByte();
		UART_sendByte(DUMMY_BYTE);
	}
	for(i=0; i<5; i++)
	{
		passConfirm[i] = UART_receiveByte();
		UART_sendByte(DUMMY_BYTE);
	}
//	UART_receiveString(pass);
//	UART_receiveString(passConfirm);
	/* compare both passwords */
	for(i=0; i<5; i++)
	{
		if(pass[i] != passConfirm[i])
		{
			return UNMATCHED_PASSWORDS;
		}
	}
	/* save the password in EEPROM if they match */
	for(i=0; i<5; i++)
	{
		EEPROM_writeByte(PASSWORD_LOCATION + i, pass[i]);
		_delay_ms(50);
		//_delay_ms(10);
	}
	uint8 wtv;
	for(i=0; i<5; i++)
	{
		EEPROM_readByte(PASSWORD_LOCATION + i, &wtv);
		_delay_ms(50);
		//_delay_ms(10);
		LCD_integerToString(wtv);
	}
	return MATCHED_PASSWORDS;
}

/*
 * Description :
 * 	compare the password received from MCU1 with the one stored in EEPROM
 * 	and return whether they match or not
 */
uint8 checkPassword()
{
	/* loop variable */
	uint8 i;
	/* a variable to receive the password from MCU1 */
	uint8 pass[5];
	/* a variable to store the password digit received from EEPROM */
	uint8 passDigit;
	/* receive the password from MCU1 */
	for(i=0; i<5; i++)
	{
		pass[i] = UART_receiveByte();
		UART_sendByte(DUMMY_BYTE);
	}
	/* compare received password with the password stored in EEPROM */
	for(i=0; i<5; i++)
	{
		EEPROM_readByte(PASSWORD_LOCATION + i, &passDigit);
		if(passDigit != pass[i])
		{
			return UNMATCHED_PASSWORDS;
		}
	}
	return MATCHED_PASSWORDS;
}

/*
 * Description :
 * open the door by rotating the motor 15 seconds clock wise
 * and close it after 3 seconds by rotating the motor 15 seconds anti clock wise
 * inform MCU1 whenever a change happen
 */
void openDoor()
{
	/* set time to 33 seconds 11 * 3 */
	g_time = 11;
	/* initialize timer1 to give interrupt every 3 seconds */
	Timer1_init(&timerConfig);
	/* rotate motor clock wise for 15 seconds
	 * and send a byte to MCU1 to indicate that the door is unlocking */
	DcMotor_Rotate(CW, 100);
	UART_sendByte(DUMMY_BYTE);
	while(g_time > 6);
	/* hold the motor for 3 seconds */
	DcMotor_Rotate(STOP, 100);
	while(g_time > 5);
	/* rotate motor anti clock wise for 15 seconds
	 * and send a byte to MCU1 to indicate that the door is locking */
	DcMotor_Rotate(A_CW, 100);
	UART_sendByte(DUMMY_BYTE);
	while(g_time > 0);
	/* stop the motor
	 * and send a byte to MCU1 to indicate that the door is locked */
	DcMotor_Rotate(STOP, 100);
	UART_sendByte(DUMMY_BYTE);
	Timer1_deInit();
}
