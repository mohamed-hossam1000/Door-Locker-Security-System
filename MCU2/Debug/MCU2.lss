
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003402  00003496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800068  00800068  0000349e  2**0
                  ALLOC
  3 .stab         00003210  00000000  00000000  000034a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000145d  00000000  00000000  000066b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c25b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a1 37       	cpi	r26, 0x71	; 113
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e0       	ldi	r30, 0x02	; 2
      78:	f4 e3       	ldi	r31, 0x34	; 52
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 97 19 	jmp	0x332e	; 0x332e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 97 19 	jmp	0x332e	; 0x332e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
volatile uint8 g_time;
/* a variable to store Timer1 configuration */
Timer1_ConfigType timerConfig;

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2d 97       	sbiw	r28, 0x0d	; 13
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 command;
	/* a variable to store UART configuration */
	UART_ConfigType uartConfig;
	/* a variable to store TWI configuration */
	TWI_ConfigType twiConfig;
	twiConfig.address = 0x01;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	89 87       	std	Y+9, r24	; 0x09
	/* bit rate in kilobit per second */
	twiConfig.bit_rate = 400;
     b5e:	80 e9       	ldi	r24, 0x90	; 144
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	9b 87       	std	Y+11, r25	; 0x0b
     b64:	8a 87       	std	Y+10, r24	; 0x0a
	TWI_init(&twiConfig);
     b66:	ce 01       	movw	r24, r28
     b68:	09 96       	adiw	r24, 0x09	; 9
     b6a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <TWI_init>

	/* UART configuration and initialization */
	uartConfig.baudRate = 9600;
     b6e:	80 e8       	ldi	r24, 0x80	; 128
     b70:	95 e2       	ldi	r25, 0x25	; 37
     b72:	a0 e0       	ldi	r26, 0x00	; 0
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	8a 83       	std	Y+2, r24	; 0x02
     b78:	9b 83       	std	Y+3, r25	; 0x03
     b7a:	ac 83       	std	Y+4, r26	; 0x04
     b7c:	bd 83       	std	Y+5, r27	; 0x05
	uartConfig.character_size = EIGHT_BITS;
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	8e 83       	std	Y+6, r24	; 0x06
	uartConfig.parity = DISABLED;
     b82:	1f 82       	std	Y+7, r1	; 0x07
	uartConfig.stop_bits = ONE_BIT;
     b84:	18 86       	std	Y+8, r1	; 0x08
	UART_init(&uartConfig);
     b86:	ce 01       	movw	r24, r28
     b88:	02 96       	adiw	r24, 0x02	; 2
     b8a:	0e 94 96 18 	call	0x312c	; 0x312c <UART_init>

	/* Timer1 configuration without initialization
	 * configured to give interrupt every 3seconds */
	timerConfig.initial_value = 0;
     b8e:	10 92 6b 00 	sts	0x006B, r1
     b92:	10 92 6a 00 	sts	0x006A, r1
	timerConfig.mode = COMPARE;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 93 6f 00 	sts	0x006F, r24
	timerConfig.compare_value = 23437;
     b9c:	8d e8       	ldi	r24, 0x8D	; 141
     b9e:	9b e5       	ldi	r25, 0x5B	; 91
     ba0:	90 93 6d 00 	sts	0x006D, r25
     ba4:	80 93 6c 00 	sts	0x006C, r24
	timerConfig.prescaler = CLK_1024;
     ba8:	85 e0       	ldi	r24, 0x05	; 5
     baa:	80 93 6e 00 	sts	0x006E, r24
	Timer1_setCallBack(timerTick);
     bae:	8f e3       	ldi	r24, 0x3F	; 63
     bb0:	96 e0       	ldi	r25, 0x06	; 6
     bb2:	0e 94 e7 17 	call	0x2fce	; 0x2fce <Timer1_setCallBack>

	/* initialize Buzzer */
	Buzzer_init();
     bb6:	0e 94 4e 08 	call	0x109c	; 0x109c <Buzzer_init>
	/* initialize DcMotor */
	DcMotor_init();
     bba:	0e 94 77 08 	call	0x10ee	; 0x10ee <DcMotor_init>

	/* enable global interrupt */
	SREG|=(1<<7);
     bbe:	af e5       	ldi	r26, 0x5F	; 95
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ef e5       	ldi	r30, 0x5F	; 95
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	8c 93       	st	X, r24
	for(;;)
	{
		command = UART_receiveByte();
     bcc:	0e 94 14 19 	call	0x3228	; 0x3228 <UART_receiveByte>
     bd0:	89 83       	std	Y+1, r24	; 0x01
		switch(command)
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	3d 87       	std	Y+13, r19	; 0x0d
     bda:	2c 87       	std	Y+12, r18	; 0x0c
     bdc:	8c 85       	ldd	r24, Y+12	; 0x0c
     bde:	9d 85       	ldd	r25, Y+13	; 0x0d
     be0:	8f 30       	cpi	r24, 0x0F	; 15
     be2:	91 05       	cpc	r25, r1
     be4:	11 f1       	breq	.+68     	; 0xc2a <main+0xe4>
     be6:	2c 85       	ldd	r18, Y+12	; 0x0c
     be8:	3d 85       	ldd	r19, Y+13	; 0x0d
     bea:	20 31       	cpi	r18, 0x10	; 16
     bec:	31 05       	cpc	r19, r1
     bee:	34 f4       	brge	.+12     	; 0xbfc <main+0xb6>
     bf0:	8c 85       	ldd	r24, Y+12	; 0x0c
     bf2:	9d 85       	ldd	r25, Y+13	; 0x0d
     bf4:	8a 30       	cpi	r24, 0x0A	; 10
     bf6:	91 05       	cpc	r25, r1
     bf8:	61 f0       	breq	.+24     	; 0xc12 <main+0xcc>
     bfa:	e8 cf       	rjmp	.-48     	; 0xbcc <main+0x86>
     bfc:	2c 85       	ldd	r18, Y+12	; 0x0c
     bfe:	3d 85       	ldd	r19, Y+13	; 0x0d
     c00:	29 31       	cpi	r18, 0x19	; 25
     c02:	31 05       	cpc	r19, r1
     c04:	b1 f1       	breq	.+108    	; 0xc72 <main+0x12c>
     c06:	8c 85       	ldd	r24, Y+12	; 0x0c
     c08:	9d 85       	ldd	r25, Y+13	; 0x0d
     c0a:	8e 31       	cpi	r24, 0x1E	; 30
     c0c:	91 05       	cpc	r25, r1
     c0e:	a1 f1       	breq	.+104    	; 0xc78 <main+0x132>
     c10:	dd cf       	rjmp	.-70     	; 0xbcc <main+0x86>
		{
		case SET_PASSWORD:
			/* receive and compare the two passwords sent by MCU1 and return whether they match or not to MCU1 */
			/* save password in EEPROM if they match */
			if(setPassword() == MATCHED_PASSWORDS)
     c12:	0e 94 4b 06 	call	0xc96	; 0xc96 <setPassword>
     c16:	88 32       	cpi	r24, 0x28	; 40
     c18:	21 f4       	brne	.+8      	; 0xc22 <main+0xdc>
			{
				UART_sendByte(MATCHED_PASSWORDS);
     c1a:	88 e2       	ldi	r24, 0x28	; 40
     c1c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
     c20:	d5 cf       	rjmp	.-86     	; 0xbcc <main+0x86>
			}
			else
			{
				UART_sendByte(UNMATCHED_PASSWORDS);
     c22:	83 e2       	ldi	r24, 0x23	; 35
     c24:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
     c28:	d1 cf       	rjmp	.-94     	; 0xbcc <main+0x86>
			}
			break;
		case COMPARE_PASSWORD:
			if(checkPassword() == MATCHED_PASSWORDS)
     c2a:	0e 94 c3 07 	call	0xf86	; 0xf86 <checkPassword>
     c2e:	88 32       	cpi	r24, 0x28	; 40
     c30:	e1 f4       	brne	.+56     	; 0xc6a <main+0x124>
			{
				UART_sendByte(MATCHED_PASSWORDS);
     c32:	88 e2       	ldi	r24, 0x28	; 40
     c34:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
				command = UART_receiveByte();
     c38:	0e 94 14 19 	call	0x3228	; 0x3228 <UART_receiveByte>
     c3c:	89 83       	std	Y+1, r24	; 0x01
				if(command == OPEN_DOOR)
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	19 f4       	brne	.+6      	; 0xc4a <main+0x104>
				{
					openDoor();
     c44:	0e 94 16 08 	call	0x102c	; 0x102c <openDoor>
     c48:	c1 cf       	rjmp	.-126    	; 0xbcc <main+0x86>
				}
				else if(command == SET_PASSWORD)
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	8a 30       	cpi	r24, 0x0A	; 10
     c4e:	09 f0       	breq	.+2      	; 0xc52 <main+0x10c>
     c50:	bd cf       	rjmp	.-134    	; 0xbcc <main+0x86>
				{
					/* receive and compare the two passwords sent by MCU1 and return whether they match or not to MCU1 */
					/* save password in EEPROM if they match */
					if(setPassword() == MATCHED_PASSWORDS)
     c52:	0e 94 4b 06 	call	0xc96	; 0xc96 <setPassword>
     c56:	88 32       	cpi	r24, 0x28	; 40
     c58:	21 f4       	brne	.+8      	; 0xc62 <main+0x11c>
					{
						UART_sendByte(MATCHED_PASSWORDS);
     c5a:	88 e2       	ldi	r24, 0x28	; 40
     c5c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
     c60:	b5 cf       	rjmp	.-150    	; 0xbcc <main+0x86>
					}
					else
					{
						UART_sendByte(UNMATCHED_PASSWORDS);
     c62:	83 e2       	ldi	r24, 0x23	; 35
     c64:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
     c68:	b1 cf       	rjmp	.-158    	; 0xbcc <main+0x86>
					}
				}
			}
			else
			{
				UART_sendByte(UNMATCHED_PASSWORDS);
     c6a:	83 e2       	ldi	r24, 0x23	; 35
     c6c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
     c70:	ad cf       	rjmp	.-166    	; 0xbcc <main+0x86>
			}
			break;
		case BUZZER_ON:
			Buzzer_on();
     c72:	0e 94 5f 08 	call	0x10be	; 0x10be <Buzzer_on>
     c76:	aa cf       	rjmp	.-172    	; 0xbcc <main+0x86>
			break;
		case BUZZER_OFF:
			Buzzer_off();
     c78:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <Buzzer_off>
     c7c:	a7 cf       	rjmp	.-178    	; 0xbcc <main+0x86>

00000c7e <timerTick>:
 * Description :
 * a function that acts as the ISR of timer1
 * increase the time every interrupt
 */
void timerTick()
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	g_time--;
     c86:	80 91 70 00 	lds	r24, 0x0070
     c8a:	81 50       	subi	r24, 0x01	; 1
     c8c:	80 93 70 00 	sts	0x0070, r24
}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <setPassword>:
 * Description :
 * 	receive and compare the two passwords sent by MCU1 and return whether they match or not
 *	save password in EEPROM if they match
 */
uint8 setPassword()
{
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	ab 97       	sbiw	r28, 0x2b	; 43
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
	/* a variable to store the password */
	uint8 pass[6];
	/* a variable to store the re_entered password */
	uint8 passConfirm[6];
	/* send ready confirmation to MCU1 */
	UART_sendByte(DUMMY_BYTE);
     cae:	8d e2       	ldi	r24, 0x2D	; 45
     cb0:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
	/* receive both passwords from MCU1 */
	for(i=0; i<5; i++)
     cb4:	1d 8e       	std	Y+29, r1	; 0x1d
     cb6:	0f c0       	rjmp	.+30     	; 0xcd6 <setPassword+0x40>
	{
		pass[i] = UART_receiveByte();
     cb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cba:	08 2f       	mov	r16, r24
     cbc:	10 e0       	ldi	r17, 0x00	; 0
     cbe:	0e 94 14 19 	call	0x3228	; 0x3228 <UART_receiveByte>
     cc2:	28 2f       	mov	r18, r24
     cc4:	ce 01       	movw	r24, r28
     cc6:	4e 96       	adiw	r24, 0x1e	; 30
     cc8:	fc 01       	movw	r30, r24
     cca:	e0 0f       	add	r30, r16
     ccc:	f1 1f       	adc	r31, r17
     cce:	20 83       	st	Z, r18
	/* a variable to store the re_entered password */
	uint8 passConfirm[6];
	/* send ready confirmation to MCU1 */
	UART_sendByte(DUMMY_BYTE);
	/* receive both passwords from MCU1 */
	for(i=0; i<5; i++)
     cd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cd2:	8f 5f       	subi	r24, 0xFF	; 255
     cd4:	8d 8f       	std	Y+29, r24	; 0x1d
     cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cd8:	85 30       	cpi	r24, 0x05	; 5
     cda:	70 f3       	brcs	.-36     	; 0xcb8 <setPassword+0x22>
	{
		pass[i] = UART_receiveByte();
	}
	for(i=0; i<5; i++)
     cdc:	1d 8e       	std	Y+29, r1	; 0x1d
     cde:	0f c0       	rjmp	.+30     	; 0xcfe <setPassword+0x68>
	{
		passConfirm[i] = UART_receiveByte();
     ce0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ce2:	08 2f       	mov	r16, r24
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	0e 94 14 19 	call	0x3228	; 0x3228 <UART_receiveByte>
     cea:	28 2f       	mov	r18, r24
     cec:	ce 01       	movw	r24, r28
     cee:	84 96       	adiw	r24, 0x24	; 36
     cf0:	fc 01       	movw	r30, r24
     cf2:	e0 0f       	add	r30, r16
     cf4:	f1 1f       	adc	r31, r17
     cf6:	20 83       	st	Z, r18
	/* receive both passwords from MCU1 */
	for(i=0; i<5; i++)
	{
		pass[i] = UART_receiveByte();
	}
	for(i=0; i<5; i++)
     cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cfa:	8f 5f       	subi	r24, 0xFF	; 255
     cfc:	8d 8f       	std	Y+29, r24	; 0x1d
     cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d00:	85 30       	cpi	r24, 0x05	; 5
     d02:	70 f3       	brcs	.-36     	; 0xce0 <setPassword+0x4a>
		passConfirm[i] = UART_receiveByte();
	}
//	UART_receiveString(pass);
//	UART_receiveString(passConfirm);
	/* compare both passwords */
	for(i=0; i<5; i++)
     d04:	1d 8e       	std	Y+29, r1	; 0x1d
     d06:	1a c0       	rjmp	.+52     	; 0xd3c <setPassword+0xa6>
	{
		if(pass[i] != passConfirm[i])
     d08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	ce 01       	movw	r24, r28
     d10:	4e 96       	adiw	r24, 0x1e	; 30
     d12:	fc 01       	movw	r30, r24
     d14:	e2 0f       	add	r30, r18
     d16:	f3 1f       	adc	r31, r19
     d18:	40 81       	ld	r20, Z
     d1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	ce 01       	movw	r24, r28
     d22:	84 96       	adiw	r24, 0x24	; 36
     d24:	fc 01       	movw	r30, r24
     d26:	e2 0f       	add	r30, r18
     d28:	f3 1f       	adc	r31, r19
     d2a:	80 81       	ld	r24, Z
     d2c:	48 17       	cp	r20, r24
     d2e:	19 f0       	breq	.+6      	; 0xd36 <setPassword+0xa0>
		{
			return UNMATCHED_PASSWORDS;
     d30:	83 e2       	ldi	r24, 0x23	; 35
     d32:	8b a7       	std	Y+43, r24	; 0x2b
     d34:	1c c1       	rjmp	.+568    	; 0xf6e <setPassword+0x2d8>
		passConfirm[i] = UART_receiveByte();
	}
//	UART_receiveString(pass);
//	UART_receiveString(passConfirm);
	/* compare both passwords */
	for(i=0; i<5; i++)
     d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	8d 8f       	std	Y+29, r24	; 0x1d
     d3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d3e:	85 30       	cpi	r24, 0x05	; 5
     d40:	18 f3       	brcs	.-58     	; 0xd08 <setPassword+0x72>
		{
			return UNMATCHED_PASSWORDS;
		}
	}
	/* save the password in EEPROM if they match */
	for(i=0; i<5; i++)
     d42:	1d 8e       	std	Y+29, r1	; 0x1d
     d44:	88 c0       	rjmp	.+272    	; 0xe56 <setPassword+0x1c0>
	{
		EEPROM_writeByte(PASSWORD_LOCATION + i, pass[i]);
     d46:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d48:	88 2f       	mov	r24, r24
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	8b 5b       	subi	r24, 0xBB	; 187
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	ac 01       	movw	r20, r24
     d52:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	ce 01       	movw	r24, r28
     d5a:	4e 96       	adiw	r24, 0x1e	; 30
     d5c:	fc 01       	movw	r30, r24
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	20 81       	ld	r18, Z
     d64:	ca 01       	movw	r24, r20
     d66:	62 2f       	mov	r22, r18
     d68:	0e 94 d7 08 	call	0x11ae	; 0x11ae <EEPROM_writeByte>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	a0 e2       	ldi	r26, 0x20	; 32
     d72:	b1 e4       	ldi	r27, 0x41	; 65
     d74:	89 8f       	std	Y+25, r24	; 0x19
     d76:	9a 8f       	std	Y+26, r25	; 0x1a
     d78:	ab 8f       	std	Y+27, r26	; 0x1b
     d7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d7c:	69 8d       	ldd	r22, Y+25	; 0x19
     d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	4a ef       	ldi	r20, 0xFA	; 250
     d8a:	54 e4       	ldi	r21, 0x44	; 68
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	8d 8b       	std	Y+21, r24	; 0x15
     d96:	9e 8b       	std	Y+22, r25	; 0x16
     d98:	af 8b       	std	Y+23, r26	; 0x17
     d9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d9c:	6d 89       	ldd	r22, Y+21	; 0x15
     d9e:	7e 89       	ldd	r23, Y+22	; 0x16
     da0:	8f 89       	ldd	r24, Y+23	; 0x17
     da2:	98 8d       	ldd	r25, Y+24	; 0x18
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e8       	ldi	r20, 0x80	; 128
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     db0:	88 23       	and	r24, r24
     db2:	2c f4       	brge	.+10     	; 0xdbe <setPassword+0x128>
		__ticks = 1;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	9c 8b       	std	Y+20, r25	; 0x14
     dba:	8b 8b       	std	Y+19, r24	; 0x13
     dbc:	3f c0       	rjmp	.+126    	; 0xe3c <setPassword+0x1a6>
	else if (__tmp > 65535)
     dbe:	6d 89       	ldd	r22, Y+21	; 0x15
     dc0:	7e 89       	ldd	r23, Y+22	; 0x16
     dc2:	8f 89       	ldd	r24, Y+23	; 0x17
     dc4:	98 8d       	ldd	r25, Y+24	; 0x18
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	3f ef       	ldi	r19, 0xFF	; 255
     dca:	4f e7       	ldi	r20, 0x7F	; 127
     dcc:	57 e4       	ldi	r21, 0x47	; 71
     dce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd2:	18 16       	cp	r1, r24
     dd4:	4c f5       	brge	.+82     	; 0xe28 <setPassword+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd6:	69 8d       	ldd	r22, Y+25	; 0x19
     dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e2       	ldi	r20, 0x20	; 32
     de4:	51 e4       	ldi	r21, 0x41	; 65
     de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	9c 8b       	std	Y+20, r25	; 0x14
     dfc:	8b 8b       	std	Y+19, r24	; 0x13
     dfe:	0f c0       	rjmp	.+30     	; 0xe1e <setPassword+0x188>
     e00:	88 ec       	ldi	r24, 0xC8	; 200
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	9a 8b       	std	Y+18, r25	; 0x12
     e06:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e08:	89 89       	ldd	r24, Y+17	; 0x11
     e0a:	9a 89       	ldd	r25, Y+18	; 0x12
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <setPassword+0x176>
     e10:	9a 8b       	std	Y+18, r25	; 0x12
     e12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e14:	8b 89       	ldd	r24, Y+19	; 0x13
     e16:	9c 89       	ldd	r25, Y+20	; 0x14
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	9c 8b       	std	Y+20, r25	; 0x14
     e1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1e:	8b 89       	ldd	r24, Y+19	; 0x13
     e20:	9c 89       	ldd	r25, Y+20	; 0x14
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	69 f7       	brne	.-38     	; 0xe00 <setPassword+0x16a>
     e26:	14 c0       	rjmp	.+40     	; 0xe50 <setPassword+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e28:	6d 89       	ldd	r22, Y+21	; 0x15
     e2a:	7e 89       	ldd	r23, Y+22	; 0x16
     e2c:	8f 89       	ldd	r24, Y+23	; 0x17
     e2e:	98 8d       	ldd	r25, Y+24	; 0x18
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9c 8b       	std	Y+20, r25	; 0x14
     e3a:	8b 8b       	std	Y+19, r24	; 0x13
     e3c:	8b 89       	ldd	r24, Y+19	; 0x13
     e3e:	9c 89       	ldd	r25, Y+20	; 0x14
     e40:	98 8b       	std	Y+16, r25	; 0x10
     e42:	8f 87       	std	Y+15, r24	; 0x0f
     e44:	8f 85       	ldd	r24, Y+15	; 0x0f
     e46:	98 89       	ldd	r25, Y+16	; 0x10
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <setPassword+0x1b2>
     e4c:	98 8b       	std	Y+16, r25	; 0x10
     e4e:	8f 87       	std	Y+15, r24	; 0x0f
		{
			return UNMATCHED_PASSWORDS;
		}
	}
	/* save the password in EEPROM if they match */
	for(i=0; i<5; i++)
     e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	8d 8f       	std	Y+29, r24	; 0x1d
     e56:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e58:	85 30       	cpi	r24, 0x05	; 5
     e5a:	08 f4       	brcc	.+2      	; 0xe5e <setPassword+0x1c8>
     e5c:	74 cf       	rjmp	.-280    	; 0xd46 <setPassword+0xb0>
	{
		EEPROM_writeByte(PASSWORD_LOCATION + i, pass[i]);
		_delay_ms(10);
	}
	uint8 wtv;
	for(i=0; i<5; i++)
     e5e:	1d 8e       	std	Y+29, r1	; 0x1d
     e60:	80 c0       	rjmp	.+256    	; 0xf62 <setPassword+0x2cc>
	{
		EEPROM_readByte(PASSWORD_LOCATION + i, &wtv);
     e62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	8b 5b       	subi	r24, 0xBB	; 187
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	9e 01       	movw	r18, r28
     e6e:	26 5d       	subi	r18, 0xD6	; 214
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	b9 01       	movw	r22, r18
     e74:	0e 94 18 09 	call	0x1230	; 0x1230 <EEPROM_readByte>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a0 e2       	ldi	r26, 0x20	; 32
     e7e:	b1 e4       	ldi	r27, 0x41	; 65
     e80:	8b 87       	std	Y+11, r24	; 0x0b
     e82:	9c 87       	std	Y+12, r25	; 0x0c
     e84:	ad 87       	std	Y+13, r26	; 0x0d
     e86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e88:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	4a ef       	ldi	r20, 0xFA	; 250
     e96:	54 e4       	ldi	r21, 0x44	; 68
     e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	8f 83       	std	Y+7, r24	; 0x07
     ea2:	98 87       	std	Y+8, r25	; 0x08
     ea4:	a9 87       	std	Y+9, r26	; 0x09
     ea6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	2c f4       	brge	.+10     	; 0xeca <setPassword+0x234>
		__ticks = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	9e 83       	std	Y+6, r25	; 0x06
     ec6:	8d 83       	std	Y+5, r24	; 0x05
     ec8:	3f c0       	rjmp	.+126    	; 0xf48 <setPassword+0x2b2>
	else if (__tmp > 65535)
     eca:	6f 81       	ldd	r22, Y+7	; 0x07
     ecc:	78 85       	ldd	r23, Y+8	; 0x08
     ece:	89 85       	ldd	r24, Y+9	; 0x09
     ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	3f ef       	ldi	r19, 0xFF	; 255
     ed6:	4f e7       	ldi	r20, 0x7F	; 127
     ed8:	57 e4       	ldi	r21, 0x47	; 71
     eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ede:	18 16       	cp	r1, r24
     ee0:	4c f5       	brge	.+82     	; 0xf34 <setPassword+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e2       	ldi	r20, 0x20	; 32
     ef0:	51 e4       	ldi	r21, 0x41	; 65
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	9e 83       	std	Y+6, r25	; 0x06
     f08:	8d 83       	std	Y+5, r24	; 0x05
     f0a:	0f c0       	rjmp	.+30     	; 0xf2a <setPassword+0x294>
     f0c:	88 ec       	ldi	r24, 0xC8	; 200
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 83       	std	Y+4, r25	; 0x04
     f12:	8b 83       	std	Y+3, r24	; 0x03
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <setPassword+0x282>
     f1c:	9c 83       	std	Y+4, r25	; 0x04
     f1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	69 f7       	brne	.-38     	; 0xf0c <setPassword+0x276>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <setPassword+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f34:	6f 81       	ldd	r22, Y+7	; 0x07
     f36:	78 85       	ldd	r23, Y+8	; 0x08
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <setPassword+0x2be>
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
	{
		EEPROM_writeByte(PASSWORD_LOCATION + i, pass[i]);
		_delay_ms(10);
	}
	uint8 wtv;
	for(i=0; i<5; i++)
     f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	8d 8f       	std	Y+29, r24	; 0x1d
     f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f64:	85 30       	cpi	r24, 0x05	; 5
     f66:	08 f4       	brcc	.+2      	; 0xf6a <setPassword+0x2d4>
     f68:	7c cf       	rjmp	.-264    	; 0xe62 <setPassword+0x1cc>
	{
		EEPROM_readByte(PASSWORD_LOCATION + i, &wtv);
		_delay_ms(10);
	}
	return MATCHED_PASSWORDS;
     f6a:	88 e2       	ldi	r24, 0x28	; 40
     f6c:	8b a7       	std	Y+43, r24	; 0x2b
     f6e:	8b a5       	ldd	r24, Y+43	; 0x2b
}
     f70:	ab 96       	adiw	r28, 0x2b	; 43
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	08 95       	ret

00000f86 <checkPassword>:
 * Description :
 * 	compare the password received from MCU1 with the one stored in EEPROM
 * 	and return whether they match or not
 */
uint8 checkPassword()
{
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	28 97       	sbiw	r28, 0x08	; 8
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
	/* a variable to receive the password from MCU1 */
	uint8 pass[5];
	/* a variable to store the password digit received from EEPROM */
	uint8 passDigit;
	/* send ready confirmation to MCU1 */
	UART_sendByte(DUMMY_BYTE);
     f9e:	8d e2       	ldi	r24, 0x2D	; 45
     fa0:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
	/* receive the password from MCU1 */
	for(i=0; i<5; i++)
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	0f c0       	rjmp	.+30     	; 0xfc6 <checkPassword+0x40>
	{
		pass[i] = UART_receiveByte();
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	08 2f       	mov	r16, r24
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	0e 94 14 19 	call	0x3228	; 0x3228 <UART_receiveByte>
     fb2:	28 2f       	mov	r18, r24
     fb4:	ce 01       	movw	r24, r28
     fb6:	02 96       	adiw	r24, 0x02	; 2
     fb8:	fc 01       	movw	r30, r24
     fba:	e0 0f       	add	r30, r16
     fbc:	f1 1f       	adc	r31, r17
     fbe:	20 83       	st	Z, r18
	/* a variable to store the password digit received from EEPROM */
	uint8 passDigit;
	/* send ready confirmation to MCU1 */
	UART_sendByte(DUMMY_BYTE);
	/* receive the password from MCU1 */
	for(i=0; i<5; i++)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	70 f3       	brcs	.-36     	; 0xfa8 <checkPassword+0x22>
	{
		pass[i] = UART_receiveByte();
	}
	/* compare received password with the password stored in EEPROM */
	for(i=0; i<5; i++)
     fcc:	19 82       	std	Y+1, r1	; 0x01
     fce:	1d c0       	rjmp	.+58     	; 0x100a <checkPassword+0x84>
	{
		EEPROM_readByte(PASSWORD_LOCATION + i, &passDigit);
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	8b 5b       	subi	r24, 0xBB	; 187
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	9e 01       	movw	r18, r28
     fdc:	29 5f       	subi	r18, 0xF9	; 249
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	b9 01       	movw	r22, r18
     fe2:	0e 94 18 09 	call	0x1230	; 0x1230 <EEPROM_readByte>
		if(passDigit != pass[i])
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	ce 01       	movw	r24, r28
     fee:	02 96       	adiw	r24, 0x02	; 2
     ff0:	fc 01       	movw	r30, r24
     ff2:	e2 0f       	add	r30, r18
     ff4:	f3 1f       	adc	r31, r19
     ff6:	90 81       	ld	r25, Z
     ff8:	8f 81       	ldd	r24, Y+7	; 0x07
     ffa:	98 17       	cp	r25, r24
     ffc:	19 f0       	breq	.+6      	; 0x1004 <checkPassword+0x7e>
		{
			return UNMATCHED_PASSWORDS;
     ffe:	83 e2       	ldi	r24, 0x23	; 35
    1000:	88 87       	std	Y+8, r24	; 0x08
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <checkPassword+0x8e>
	for(i=0; i<5; i++)
	{
		pass[i] = UART_receiveByte();
	}
	/* compare received password with the password stored in EEPROM */
	for(i=0; i<5; i++)
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	85 30       	cpi	r24, 0x05	; 5
    100e:	00 f3       	brcs	.-64     	; 0xfd0 <checkPassword+0x4a>
		if(passDigit != pass[i])
		{
			return UNMATCHED_PASSWORDS;
		}
	}
	return MATCHED_PASSWORDS;
    1010:	88 e2       	ldi	r24, 0x28	; 40
    1012:	88 87       	std	Y+8, r24	; 0x08
    1014:	88 85       	ldd	r24, Y+8	; 0x08
}
    1016:	28 96       	adiw	r28, 0x08	; 8
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <openDoor>:
 * open the door by rotating the motor 15 seconds clock wise
 * and close it after 3 seconds by rotating the motor 15 seconds anti clock wise
 * inform MCU1 whenever a change happen
 */
void openDoor()
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
	/* set time to 33 seconds (11 * 3 = 33) */
	g_time = 11;
    1034:	8b e0       	ldi	r24, 0x0B	; 11
    1036:	80 93 70 00 	sts	0x0070, r24
	/* initialize timer1 to give interrupt every 3 seconds */
	Timer1_init(&timerConfig);
    103a:	8a e6       	ldi	r24, 0x6A	; 106
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <Timer1_init>
	/* rotate motor clock wise for 15 seconds
	 * and send a byte to MCU1 to indicate that the door is unlocking */
	DcMotor_Rotate(CW, 100);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	64 e6       	ldi	r22, 0x64	; 100
    1046:	0e 94 92 08 	call	0x1124	; 0x1124 <DcMotor_Rotate>
	UART_sendByte(DUMMY_BYTE);
    104a:	8d e2       	ldi	r24, 0x2D	; 45
    104c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
	while(g_time > 6);
    1050:	80 91 70 00 	lds	r24, 0x0070
    1054:	87 30       	cpi	r24, 0x07	; 7
    1056:	e0 f7       	brcc	.-8      	; 0x1050 <openDoor+0x24>
	/* hold the motor for 3 seconds */
	DcMotor_Rotate(STOP, 100);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	64 e6       	ldi	r22, 0x64	; 100
    105c:	0e 94 92 08 	call	0x1124	; 0x1124 <DcMotor_Rotate>
	UART_sendByte(DUMMY_BYTE);
    1060:	8d e2       	ldi	r24, 0x2D	; 45
    1062:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
	while(g_time > 5);
    1066:	80 91 70 00 	lds	r24, 0x0070
    106a:	86 30       	cpi	r24, 0x06	; 6
    106c:	e0 f7       	brcc	.-8      	; 0x1066 <openDoor+0x3a>
	/* rotate motor anti clock wise for 15 seconds
	 * and send a byte to MCU1 to indicate that the door is locking */
	DcMotor_Rotate(A_CW, 100);
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	64 e6       	ldi	r22, 0x64	; 100
    1072:	0e 94 92 08 	call	0x1124	; 0x1124 <DcMotor_Rotate>
	UART_sendByte(DUMMY_BYTE);
    1076:	8d e2       	ldi	r24, 0x2D	; 45
    1078:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
	while(g_time > 0);
    107c:	80 91 70 00 	lds	r24, 0x0070
    1080:	88 23       	and	r24, r24
    1082:	e1 f7       	brne	.-8      	; 0x107c <openDoor+0x50>
	/* stop the motor
	 * and send a byte to MCU1 to indicate that the door is locked */
	DcMotor_Rotate(STOP, 100);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	64 e6       	ldi	r22, 0x64	; 100
    1088:	0e 94 92 08 	call	0x1124	; 0x1124 <DcMotor_Rotate>
	UART_sendByte(DUMMY_BYTE);
    108c:	8d e2       	ldi	r24, 0x2D	; 45
    108e:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
	Timer1_deInit();
    1092:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Timer1_deInit>
}
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <Buzzer_init>:

#include"buzzer.h"
#include"gpio.h"

void Buzzer_init()
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    10a4:	83 e0       	ldi	r24, 0x03	; 3
    10a6:	63 e0       	ldi	r22, 0x03	; 3
    10a8:	41 e0       	ldi	r20, 0x01	; 1
    10aa:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    10ae:	83 e0       	ldi	r24, 0x03	; 3
    10b0:	63 e0       	ldi	r22, 0x03	; 3
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <Buzzer_on>:

void Buzzer_on()
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	63 e0       	ldi	r22, 0x03	; 3
    10ca:	41 e0       	ldi	r20, 0x01	; 1
    10cc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <Buzzer_off>:

void Buzzer_off()
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	63 e0       	ldi	r22, 0x03	; 3
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
}
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <DcMotor_init>:
/*
 * Description :
 * setup the direction for the two motor pins through the GPIO driver
 */
void DcMotor_init(void)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
	/* set motor pins as output */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, PIN_OUTPUT);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, PIN_OUTPUT);
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>
	/* stop the motor at the beginning */
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, LOGIC_LOW);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, LOGIC_LOW);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
}
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <DcMotor_Rotate>:
 * Description :
 * a function to choose motor state(ON/OFF, clock wise / anti clock wise)
 * and control speed
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <DcMotor_Rotate+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <DcMotor_Rotate+0x8>
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3c 83       	std	Y+4, r19	; 0x04
    113c:	2b 83       	std	Y+3, r18	; 0x03
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	a1 f0       	breq	.+40     	; 0x1170 <DcMotor_Rotate+0x4c>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	d1 f0       	breq	.+52     	; 0x1186 <DcMotor_Rotate+0x62>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	01 f5       	brne	.+64     	; 0x119a <DcMotor_Rotate+0x76>
	{
	case STOP :
		/* stop motor */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, LOGIC_LOW);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, LOGIC_LOW);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    116e:	15 c0       	rjmp	.+42     	; 0x119a <DcMotor_Rotate+0x76>
		break;
	case CW :
		/* rotate clock wise */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, LOGIC_HIGH);
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	41 e0       	ldi	r20, 0x01	; 1
    1176:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, LOGIC_LOW);
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    1184:	0a c0       	rjmp	.+20     	; 0x119a <DcMotor_Rotate+0x76>
		break;
	case A_CW :
		/* rotate anti clock wise */
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID, LOGIC_LOW);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_ID+1, LOGIC_HIGH);
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	41 e0       	ldi	r20, 0x01	; 1
    1196:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
		break;
	}
	PWM_Timer0_Start(speed);
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <PWM_Timer0_Start>
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <EEPROM_writeByte+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <EEPROM_writeByte+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11c0:	0e 94 33 18 	call	0x3066	; 0x3066 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11c4:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    11c8:	88 30       	cpi	r24, 0x08	; 8
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <EEPROM_writeByte+0x22>
        return ERROR;
    11cc:	1c 82       	std	Y+4, r1	; 0x04
    11ce:	28 c0       	rjmp	.+80     	; 0x1220 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	80 70       	andi	r24, 0x00	; 0
    11d6:	97 70       	andi	r25, 0x07	; 7
    11d8:	88 0f       	add	r24, r24
    11da:	89 2f       	mov	r24, r25
    11dc:	88 1f       	adc	r24, r24
    11de:	99 0b       	sbc	r25, r25
    11e0:	91 95       	neg	r25
    11e2:	80 6a       	ori	r24, 0xA0	; 160
    11e4:	0e 94 4e 18 	call	0x309c	; 0x309c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    11e8:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    11ec:	88 31       	cpi	r24, 0x18	; 24
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <EEPROM_writeByte+0x46>
        return ERROR; 
    11f0:	1c 82       	std	Y+4, r1	; 0x04
    11f2:	16 c0       	rjmp	.+44     	; 0x1220 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	0e 94 4e 18 	call	0x309c	; 0x309c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11fa:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    11fe:	88 32       	cpi	r24, 0x28	; 40
    1200:	11 f0       	breq	.+4      	; 0x1206 <EEPROM_writeByte+0x58>
        return ERROR;
    1202:	1c 82       	std	Y+4, r1	; 0x04
    1204:	0d c0       	rjmp	.+26     	; 0x1220 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	0e 94 4e 18 	call	0x309c	; 0x309c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    120c:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    1210:	88 32       	cpi	r24, 0x28	; 40
    1212:	11 f0       	breq	.+4      	; 0x1218 <EEPROM_writeByte+0x6a>
        return ERROR;
    1214:	1c 82       	std	Y+4, r1	; 0x04
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1218:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_stop>
	
    return SUCCESS;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	8c 83       	std	Y+4, r24	; 0x04
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <EEPROM_readByte+0x6>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <EEPROM_readByte+0x8>
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	7c 83       	std	Y+4, r23	; 0x04
    1244:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1246:	0e 94 33 18 	call	0x3066	; 0x3066 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    124a:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    124e:	88 30       	cpi	r24, 0x08	; 8
    1250:	11 f0       	breq	.+4      	; 0x1256 <EEPROM_readByte+0x26>
        return ERROR;
    1252:	1d 82       	std	Y+5, r1	; 0x05
    1254:	44 c0       	rjmp	.+136    	; 0x12de <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	80 70       	andi	r24, 0x00	; 0
    125c:	97 70       	andi	r25, 0x07	; 7
    125e:	88 0f       	add	r24, r24
    1260:	89 2f       	mov	r24, r25
    1262:	88 1f       	adc	r24, r24
    1264:	99 0b       	sbc	r25, r25
    1266:	91 95       	neg	r25
    1268:	80 6a       	ori	r24, 0xA0	; 160
    126a:	0e 94 4e 18 	call	0x309c	; 0x309c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    126e:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    1272:	88 31       	cpi	r24, 0x18	; 24
    1274:	11 f0       	breq	.+4      	; 0x127a <EEPROM_readByte+0x4a>
        return ERROR;
    1276:	1d 82       	std	Y+5, r1	; 0x05
    1278:	32 c0       	rjmp	.+100    	; 0x12de <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	0e 94 4e 18 	call	0x309c	; 0x309c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1280:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    1284:	88 32       	cpi	r24, 0x28	; 40
    1286:	11 f0       	breq	.+4      	; 0x128c <EEPROM_readByte+0x5c>
        return ERROR;
    1288:	1d 82       	std	Y+5, r1	; 0x05
    128a:	29 c0       	rjmp	.+82     	; 0x12de <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    128c:	0e 94 33 18 	call	0x3066	; 0x3066 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1290:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    1294:	80 31       	cpi	r24, 0x10	; 16
    1296:	11 f0       	breq	.+4      	; 0x129c <EEPROM_readByte+0x6c>
        return ERROR;
    1298:	1d 82       	std	Y+5, r1	; 0x05
    129a:	21 c0       	rjmp	.+66     	; 0x12de <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	80 70       	andi	r24, 0x00	; 0
    12a2:	97 70       	andi	r25, 0x07	; 7
    12a4:	88 0f       	add	r24, r24
    12a6:	89 2f       	mov	r24, r25
    12a8:	88 1f       	adc	r24, r24
    12aa:	99 0b       	sbc	r25, r25
    12ac:	91 95       	neg	r25
    12ae:	81 6a       	ori	r24, 0xA1	; 161
    12b0:	0e 94 4e 18 	call	0x309c	; 0x309c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12b4:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    12b8:	80 34       	cpi	r24, 0x40	; 64
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <EEPROM_readByte+0x90>
        return ERROR;
    12bc:	1d 82       	std	Y+5, r1	; 0x05
    12be:	0f c0       	rjmp	.+30     	; 0x12de <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12c0:	0e 94 78 18 	call	0x30f0	; 0x30f0 <TWI_readByteWithNACK>
    12c4:	eb 81       	ldd	r30, Y+3	; 0x03
    12c6:	fc 81       	ldd	r31, Y+4	; 0x04
    12c8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12ca:	0e 94 8b 18 	call	0x3116	; 0x3116 <TWI_getStatus>
    12ce:	88 35       	cpi	r24, 0x58	; 88
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <EEPROM_readByte+0xa6>
        return ERROR;
    12d2:	1d 82       	std	Y+5, r1	; 0x05
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    12d6:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_stop>

    return SUCCESS;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	8d 83       	std	Y+5, r24	; 0x05
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <GPIO_setupPinDirection+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <GPIO_setupPinDirection+0x8>
    12f8:	0f 92       	push	r0
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	6a 83       	std	Y+2, r22	; 0x02
    1302:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	88 30       	cpi	r24, 0x08	; 8
    1308:	08 f0       	brcs	.+2      	; 0x130c <GPIO_setupPinDirection+0x1c>
    130a:	d5 c0       	rjmp	.+426    	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	08 f0       	brcs	.+2      	; 0x1314 <GPIO_setupPinDirection+0x24>
    1312:	d1 c0       	rjmp	.+418    	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	3d 83       	std	Y+5, r19	; 0x05
    131c:	2c 83       	std	Y+4, r18	; 0x04
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <GPIO_setupPinDirection+0x3a>
    1328:	43 c0       	rjmp	.+134    	; 0x13b0 <GPIO_setupPinDirection+0xc0>
    132a:	2c 81       	ldd	r18, Y+4	; 0x04
    132c:	3d 81       	ldd	r19, Y+5	; 0x05
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <GPIO_setupPinDirection+0x4e>
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	71 f0       	breq	.+28     	; 0x1358 <GPIO_setupPinDirection+0x68>
    133c:	bc c0       	rjmp	.+376    	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
    133e:	2c 81       	ldd	r18, Y+4	; 0x04
    1340:	3d 81       	ldd	r19, Y+5	; 0x05
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <GPIO_setupPinDirection+0x5a>
    1348:	5f c0       	rjmp	.+190    	; 0x1408 <GPIO_setupPinDirection+0x118>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <GPIO_setupPinDirection+0x66>
    1354:	85 c0       	rjmp	.+266    	; 0x1460 <GPIO_setupPinDirection+0x170>
    1356:	af c0       	rjmp	.+350    	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	a1 f4       	brne	.+40     	; 0x1386 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    135e:	aa e3       	ldi	r26, 0x3A	; 58
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ea e3       	ldi	r30, 0x3A	; 58
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <GPIO_setupPinDirection+0x8c>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <GPIO_setupPinDirection+0x88>
    1380:	84 2b       	or	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	98 c0       	rjmp	.+304    	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1386:	aa e3       	ldi	r26, 0x3A	; 58
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ea e3       	ldi	r30, 0x3A	; 58
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <GPIO_setupPinDirection+0xb4>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <GPIO_setupPinDirection+0xb0>
    13a8:	80 95       	com	r24
    13aa:	84 23       	and	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	83 c0       	rjmp	.+262    	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	a1 f4       	brne	.+40     	; 0x13de <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13b6:	a7 e3       	ldi	r26, 0x37	; 55
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e7 e3       	ldi	r30, 0x37	; 55
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <GPIO_setupPinDirection+0xe4>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <GPIO_setupPinDirection+0xe0>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	6c c0       	rjmp	.+216    	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13de:	a7 e3       	ldi	r26, 0x37	; 55
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e7 e3       	ldi	r30, 0x37	; 55
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <GPIO_setupPinDirection+0x10c>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <GPIO_setupPinDirection+0x108>
    1400:	80 95       	com	r24
    1402:	84 23       	and	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	57 c0       	rjmp	.+174    	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	a1 f4       	brne	.+40     	; 0x1436 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    140e:	a4 e3       	ldi	r26, 0x34	; 52
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e4 e3       	ldi	r30, 0x34	; 52
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <GPIO_setupPinDirection+0x13c>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <GPIO_setupPinDirection+0x138>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	40 c0       	rjmp	.+128    	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1436:	a4 e3       	ldi	r26, 0x34	; 52
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e4 e3       	ldi	r30, 0x34	; 52
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <GPIO_setupPinDirection+0x164>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <GPIO_setupPinDirection+0x160>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	2b c0       	rjmp	.+86     	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	a1 f4       	brne	.+40     	; 0x148e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1466:	a1 e3       	ldi	r26, 0x31	; 49
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e1 e3       	ldi	r30, 0x31	; 49
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <GPIO_setupPinDirection+0x194>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <GPIO_setupPinDirection+0x190>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	14 c0       	rjmp	.+40     	; 0x14b6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    148e:	a1 e3       	ldi	r26, 0x31	; 49
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e1 e3       	ldi	r30, 0x31	; 49
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <GPIO_setupPinDirection+0x1bc>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <GPIO_setupPinDirection+0x1b8>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <GPIO_writePin+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <GPIO_writePin+0x8>
    14ce:	0f 92       	push	r0
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	6a 83       	std	Y+2, r22	; 0x02
    14d8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	88 30       	cpi	r24, 0x08	; 8
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <GPIO_writePin+0x1c>
    14e0:	d5 c0       	rjmp	.+426    	; 0x168c <GPIO_writePin+0x1c6>
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <GPIO_writePin+0x24>
    14e8:	d1 c0       	rjmp	.+418    	; 0x168c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3d 83       	std	Y+5, r19	; 0x05
    14f2:	2c 83       	std	Y+4, r18	; 0x04
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <GPIO_writePin+0x3a>
    14fe:	43 c0       	rjmp	.+134    	; 0x1586 <GPIO_writePin+0xc0>
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	3d 81       	ldd	r19, Y+5	; 0x05
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <GPIO_writePin+0x4e>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	71 f0       	breq	.+28     	; 0x152e <GPIO_writePin+0x68>
    1512:	bc c0       	rjmp	.+376    	; 0x168c <GPIO_writePin+0x1c6>
    1514:	2c 81       	ldd	r18, Y+4	; 0x04
    1516:	3d 81       	ldd	r19, Y+5	; 0x05
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <GPIO_writePin+0x5a>
    151e:	5f c0       	rjmp	.+190    	; 0x15de <GPIO_writePin+0x118>
    1520:	8c 81       	ldd	r24, Y+4	; 0x04
    1522:	9d 81       	ldd	r25, Y+5	; 0x05
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	09 f4       	brne	.+2      	; 0x152c <GPIO_writePin+0x66>
    152a:	85 c0       	rjmp	.+266    	; 0x1636 <GPIO_writePin+0x170>
    152c:	af c0       	rjmp	.+350    	; 0x168c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	a1 f4       	brne	.+40     	; 0x155c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1534:	ab e3       	ldi	r26, 0x3B	; 59
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	eb e3       	ldi	r30, 0x3B	; 59
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_writePin+0x8c>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_writePin+0x88>
    1556:	84 2b       	or	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	98 c0       	rjmp	.+304    	; 0x168c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    155c:	ab e3       	ldi	r26, 0x3B	; 59
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	eb e3       	ldi	r30, 0x3B	; 59
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_writePin+0xb4>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_writePin+0xb0>
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	83 c0       	rjmp	.+262    	; 0x168c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	a1 f4       	brne	.+40     	; 0x15b4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    158c:	a8 e3       	ldi	r26, 0x38	; 56
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e8 e3       	ldi	r30, 0x38	; 56
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <GPIO_writePin+0xe4>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <GPIO_writePin+0xe0>
    15ae:	84 2b       	or	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	6c c0       	rjmp	.+216    	; 0x168c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15b4:	a8 e3       	ldi	r26, 0x38	; 56
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e8 e3       	ldi	r30, 0x38	; 56
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <GPIO_writePin+0x10c>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <GPIO_writePin+0x108>
    15d6:	80 95       	com	r24
    15d8:	84 23       	and	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	57 c0       	rjmp	.+174    	; 0x168c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	a1 f4       	brne	.+40     	; 0x160c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    15e4:	a5 e3       	ldi	r26, 0x35	; 53
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e5 e3       	ldi	r30, 0x35	; 53
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <GPIO_writePin+0x13c>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <GPIO_writePin+0x138>
    1606:	84 2b       	or	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	40 c0       	rjmp	.+128    	; 0x168c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    160c:	a5 e3       	ldi	r26, 0x35	; 53
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e5 e3       	ldi	r30, 0x35	; 53
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <GPIO_writePin+0x164>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <GPIO_writePin+0x160>
    162e:	80 95       	com	r24
    1630:	84 23       	and	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	2b c0       	rjmp	.+86     	; 0x168c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	a1 f4       	brne	.+40     	; 0x1664 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    163c:	a2 e3       	ldi	r26, 0x32	; 50
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e2 e3       	ldi	r30, 0x32	; 50
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <GPIO_writePin+0x194>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <GPIO_writePin+0x190>
    165e:	84 2b       	or	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	14 c0       	rjmp	.+40     	; 0x168c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1664:	a2 e3       	ldi	r26, 0x32	; 50
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e2 e3       	ldi	r30, 0x32	; 50
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <GPIO_writePin+0x1bc>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <GPIO_writePin+0x1b8>
    1686:	80 95       	com	r24
    1688:	84 23       	and	r24, r20
    168a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <GPIO_readPin+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <GPIO_readPin+0x8>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	8a 83       	std	Y+2, r24	; 0x02
    16ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16ae:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	88 30       	cpi	r24, 0x08	; 8
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <GPIO_readPin+0x1c>
    16b6:	84 c0       	rjmp	.+264    	; 0x17c0 <GPIO_readPin+0x124>
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	84 30       	cpi	r24, 0x04	; 4
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <GPIO_readPin+0x24>
    16be:	80 c0       	rjmp	.+256    	; 0x17c0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	3d 83       	std	Y+5, r19	; 0x05
    16c8:	2c 83       	std	Y+4, r18	; 0x04
    16ca:	4c 81       	ldd	r20, Y+4	; 0x04
    16cc:	5d 81       	ldd	r21, Y+5	; 0x05
    16ce:	41 30       	cpi	r20, 0x01	; 1
    16d0:	51 05       	cpc	r21, r1
    16d2:	79 f1       	breq	.+94     	; 0x1732 <GPIO_readPin+0x96>
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	91 05       	cpc	r25, r1
    16dc:	34 f4       	brge	.+12     	; 0x16ea <GPIO_readPin+0x4e>
    16de:	2c 81       	ldd	r18, Y+4	; 0x04
    16e0:	3d 81       	ldd	r19, Y+5	; 0x05
    16e2:	21 15       	cp	r18, r1
    16e4:	31 05       	cpc	r19, r1
    16e6:	69 f0       	breq	.+26     	; 0x1702 <GPIO_readPin+0x66>
    16e8:	6b c0       	rjmp	.+214    	; 0x17c0 <GPIO_readPin+0x124>
    16ea:	4c 81       	ldd	r20, Y+4	; 0x04
    16ec:	5d 81       	ldd	r21, Y+5	; 0x05
    16ee:	42 30       	cpi	r20, 0x02	; 2
    16f0:	51 05       	cpc	r21, r1
    16f2:	b9 f1       	breq	.+110    	; 0x1762 <GPIO_readPin+0xc6>
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <GPIO_readPin+0x64>
    16fe:	49 c0       	rjmp	.+146    	; 0x1792 <GPIO_readPin+0xf6>
    1700:	5f c0       	rjmp	.+190    	; 0x17c0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1702:	e9 e3       	ldi	r30, 0x39	; 57
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a9 01       	movw	r20, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_readPin+0x7e>
    1716:	55 95       	asr	r21
    1718:	47 95       	ror	r20
    171a:	8a 95       	dec	r24
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_readPin+0x7a>
    171e:	ca 01       	movw	r24, r20
    1720:	81 70       	andi	r24, 0x01	; 1
    1722:	90 70       	andi	r25, 0x00	; 0
    1724:	88 23       	and	r24, r24
    1726:	19 f0       	breq	.+6      	; 0x172e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	49 c0       	rjmp	.+146    	; 0x17c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    172e:	19 82       	std	Y+1, r1	; 0x01
    1730:	47 c0       	rjmp	.+142    	; 0x17c0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1732:	e6 e3       	ldi	r30, 0x36	; 54
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a9 01       	movw	r20, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_readPin+0xae>
    1746:	55 95       	asr	r21
    1748:	47 95       	ror	r20
    174a:	8a 95       	dec	r24
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_readPin+0xaa>
    174e:	ca 01       	movw	r24, r20
    1750:	81 70       	andi	r24, 0x01	; 1
    1752:	90 70       	andi	r25, 0x00	; 0
    1754:	88 23       	and	r24, r24
    1756:	19 f0       	breq	.+6      	; 0x175e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	31 c0       	rjmp	.+98     	; 0x17c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    175e:	19 82       	std	Y+1, r1	; 0x01
    1760:	2f c0       	rjmp	.+94     	; 0x17c0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1762:	e3 e3       	ldi	r30, 0x33	; 51
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a9 01       	movw	r20, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_readPin+0xde>
    1776:	55 95       	asr	r21
    1778:	47 95       	ror	r20
    177a:	8a 95       	dec	r24
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_readPin+0xda>
    177e:	ca 01       	movw	r24, r20
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	90 70       	andi	r25, 0x00	; 0
    1784:	88 23       	and	r24, r24
    1786:	19 f0       	breq	.+6      	; 0x178e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	19 c0       	rjmp	.+50     	; 0x17c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    178e:	19 82       	std	Y+1, r1	; 0x01
    1790:	17 c0       	rjmp	.+46     	; 0x17c0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1792:	e0 e3       	ldi	r30, 0x30	; 48
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a9 01       	movw	r20, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <GPIO_readPin+0x10e>
    17a6:	55 95       	asr	r21
    17a8:	47 95       	ror	r20
    17aa:	8a 95       	dec	r24
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <GPIO_readPin+0x10a>
    17ae:	ca 01       	movw	r24, r20
    17b0:	81 70       	andi	r24, 0x01	; 1
    17b2:	90 70       	andi	r25, 0x00	; 0
    17b4:	88 23       	and	r24, r24
    17b6:	19 f0       	breq	.+6      	; 0x17be <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17be:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <GPIO_setupPortDirection+0x6>
    17d8:	00 d0       	rcall	.+0      	; 0x17da <GPIO_setupPortDirection+0x8>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	84 30       	cpi	r24, 0x04	; 4
    17e6:	90 f5       	brcc	.+100    	; 0x184c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	3c 83       	std	Y+4, r19	; 0x04
    17f0:	2b 83       	std	Y+3, r18	; 0x03
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	91 05       	cpc	r25, r1
    17fa:	d1 f0       	breq	.+52     	; 0x1830 <GPIO_setupPortDirection+0x5e>
    17fc:	2b 81       	ldd	r18, Y+3	; 0x03
    17fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1800:	22 30       	cpi	r18, 0x02	; 2
    1802:	31 05       	cpc	r19, r1
    1804:	2c f4       	brge	.+10     	; 0x1810 <GPIO_setupPortDirection+0x3e>
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	61 f0       	breq	.+24     	; 0x1826 <GPIO_setupPortDirection+0x54>
    180e:	1e c0       	rjmp	.+60     	; 0x184c <GPIO_setupPortDirection+0x7a>
    1810:	2b 81       	ldd	r18, Y+3	; 0x03
    1812:	3c 81       	ldd	r19, Y+4	; 0x04
    1814:	22 30       	cpi	r18, 0x02	; 2
    1816:	31 05       	cpc	r19, r1
    1818:	81 f0       	breq	.+32     	; 0x183a <GPIO_setupPortDirection+0x68>
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	91 05       	cpc	r25, r1
    1822:	81 f0       	breq	.+32     	; 0x1844 <GPIO_setupPortDirection+0x72>
    1824:	13 c0       	rjmp	.+38     	; 0x184c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1826:	ea e3       	ldi	r30, 0x3A	; 58
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	80 83       	st	Z, r24
    182e:	0e c0       	rjmp	.+28     	; 0x184c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1830:	e7 e3       	ldi	r30, 0x37	; 55
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	80 83       	st	Z, r24
    1838:	09 c0       	rjmp	.+18     	; 0x184c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    183a:	e4 e3       	ldi	r30, 0x34	; 52
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	80 83       	st	Z, r24
    1842:	04 c0       	rjmp	.+8      	; 0x184c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1844:	e1 e3       	ldi	r30, 0x31	; 49
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	80 83       	st	Z, r24
			break;
		}
	}
}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <GPIO_writePort+0x6>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <GPIO_writePort+0x8>
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	84 30       	cpi	r24, 0x04	; 4
    186e:	90 f5       	brcc	.+100    	; 0x18d4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	3c 83       	std	Y+4, r19	; 0x04
    1878:	2b 83       	std	Y+3, r18	; 0x03
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	91 05       	cpc	r25, r1
    1882:	d1 f0       	breq	.+52     	; 0x18b8 <GPIO_writePort+0x5e>
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	2c f4       	brge	.+10     	; 0x1898 <GPIO_writePort+0x3e>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	61 f0       	breq	.+24     	; 0x18ae <GPIO_writePort+0x54>
    1896:	1e c0       	rjmp	.+60     	; 0x18d4 <GPIO_writePort+0x7a>
    1898:	2b 81       	ldd	r18, Y+3	; 0x03
    189a:	3c 81       	ldd	r19, Y+4	; 0x04
    189c:	22 30       	cpi	r18, 0x02	; 2
    189e:	31 05       	cpc	r19, r1
    18a0:	81 f0       	breq	.+32     	; 0x18c2 <GPIO_writePort+0x68>
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	83 30       	cpi	r24, 0x03	; 3
    18a8:	91 05       	cpc	r25, r1
    18aa:	81 f0       	breq	.+32     	; 0x18cc <GPIO_writePort+0x72>
    18ac:	13 c0       	rjmp	.+38     	; 0x18d4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18ae:	eb e3       	ldi	r30, 0x3B	; 59
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	80 83       	st	Z, r24
    18b6:	0e c0       	rjmp	.+28     	; 0x18d4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18b8:	e8 e3       	ldi	r30, 0x38	; 56
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	80 83       	st	Z, r24
    18c0:	09 c0       	rjmp	.+18     	; 0x18d4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18c2:	e5 e3       	ldi	r30, 0x35	; 53
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	80 83       	st	Z, r24
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18cc:	e2 e3       	ldi	r30, 0x32	; 50
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <GPIO_readPort+0x6>
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <GPIO_readPort+0x8>
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    18f0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	84 30       	cpi	r24, 0x04	; 4
    18f6:	90 f5       	brcc	.+100    	; 0x195c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	3c 83       	std	Y+4, r19	; 0x04
    1900:	2b 83       	std	Y+3, r18	; 0x03
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	91 05       	cpc	r25, r1
    190a:	d1 f0       	breq	.+52     	; 0x1940 <GPIO_readPort+0x5e>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	2c f4       	brge	.+10     	; 0x1920 <GPIO_readPort+0x3e>
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	61 f0       	breq	.+24     	; 0x1936 <GPIO_readPort+0x54>
    191e:	1e c0       	rjmp	.+60     	; 0x195c <GPIO_readPort+0x7a>
    1920:	2b 81       	ldd	r18, Y+3	; 0x03
    1922:	3c 81       	ldd	r19, Y+4	; 0x04
    1924:	22 30       	cpi	r18, 0x02	; 2
    1926:	31 05       	cpc	r19, r1
    1928:	81 f0       	breq	.+32     	; 0x194a <GPIO_readPort+0x68>
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	83 30       	cpi	r24, 0x03	; 3
    1930:	91 05       	cpc	r25, r1
    1932:	81 f0       	breq	.+32     	; 0x1954 <GPIO_readPort+0x72>
    1934:	13 c0       	rjmp	.+38     	; 0x195c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1936:	e9 e3       	ldi	r30, 0x39	; 57
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	0e c0       	rjmp	.+28     	; 0x195c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1940:	e6 e3       	ldi	r30, 0x36	; 54
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	09 c0       	rjmp	.+18     	; 0x195c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    194a:	e3 e3       	ldi	r30, 0x33	; 51
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	04 c0       	rjmp	.+8      	; 0x195c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1954:	e0 e3       	ldi	r30, 0x30	; 48
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    195c:	89 81       	ldd	r24, Y+1	; 0x01
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <LCD_init>:
 * initialize the LCD ports
 * configure 2 lines 8 bit mode
 * clear the screen and disable cursor
 */
void LCD_init(void)
{
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	2e 97       	sbiw	r28, 0x0e	; 14
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
	/* configure RS pin output */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>
	/* configure enable pin output */
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	/* choose 2 lines 8 bits mode */
	LCD_sendCommand(LCD_2LINES_8BITS_MODE);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	/* configure data pins output for 8 bit operations */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, PIN_OUTPUT);
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	64 e0       	ldi	r22, 0x04	; 4
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, PIN_OUTPUT);
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	65 e0       	ldi	r22, 0x05	; 5
    19a2:	41 e0       	ldi	r20, 0x01	; 1
    19a4:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, PIN_OUTPUT);
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	66 e0       	ldi	r22, 0x06	; 6
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, PIN_OUTPUT);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	67 e0       	ldi	r22, 0x07	; 7
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>

	/* send 4 bits initialization */
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT1);
    19bc:	83 e3       	ldi	r24, 0x33	; 51
    19be:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT2);
    19c2:	82 e3       	ldi	r24, 0x32	; 50
    19c4:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
	/* choose 2 lines 4 bits mode */
	LCD_sendCommand(LCD_2LINES_4BITS_MODE);
    19c8:	88 e2       	ldi	r24, 0x28	; 40
    19ca:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 ea       	ldi	r26, 0xA0	; 160
    19d4:	b1 e4       	ldi	r27, 0x41	; 65
    19d6:	8b 87       	std	Y+11, r24	; 0x0b
    19d8:	9c 87       	std	Y+12, r25	; 0x0c
    19da:	ad 87       	std	Y+13, r26	; 0x0d
    19dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	4a ef       	ldi	r20, 0xFA	; 250
    19ec:	54 e4       	ldi	r21, 0x44	; 68
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8f 83       	std	Y+7, r24	; 0x07
    19f8:	98 87       	std	Y+8, r25	; 0x08
    19fa:	a9 87       	std	Y+9, r26	; 0x09
    19fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <LCD_init+0xb4>
		__ticks = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	3f c0       	rjmp	.+126    	; 0x1a9e <LCD_init+0x132>
	else if (__tmp > 65535)
    1a20:	6f 81       	ldd	r22, Y+7	; 0x07
    1a22:	78 85       	ldd	r23, Y+8	; 0x08
    1a24:	89 85       	ldd	r24, Y+9	; 0x09
    1a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	3f ef       	ldi	r19, 0xFF	; 255
    1a2c:	4f e7       	ldi	r20, 0x7F	; 127
    1a2e:	57 e4       	ldi	r21, 0x47	; 71
    1a30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a34:	18 16       	cp	r1, r24
    1a36:	4c f5       	brge	.+82     	; 0x1a8a <LCD_init+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e2       	ldi	r20, 0x20	; 32
    1a46:	51 e4       	ldi	r21, 0x41	; 65
    1a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	0f c0       	rjmp	.+30     	; 0x1a80 <LCD_init+0x114>
    1a62:	88 ec       	ldi	r24, 0xC8	; 200
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9c 83       	std	Y+4, r25	; 0x04
    1a68:	8b 83       	std	Y+3, r24	; 0x03
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_init+0x102>
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <LCD_init+0xf6>
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <LCD_init+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_init+0x13e>
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(20);
	LCD_sendCommand(LCD_DISABLE_CURSOR);
    1ab2:	8c e0       	ldi	r24, 0x0C	; 12
    1ab4:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
}
    1abe:	2e 96       	adiw	r28, 0x0e	; 14
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <LCD_sendCommand>:
/*
 * Description :
 * send a command to the LCD
 */
void LCD_sendCommand(uint8 command)
{
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	c3 56       	subi	r28, 0x63	; 99
    1ade:	d0 40       	sbci	r29, 0x00	; 0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	fe 01       	movw	r30, r28
    1aec:	ed 59       	subi	r30, 0x9D	; 157
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	80 83       	st	Z, r24
	/* set RS to low to send a command */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	60 e0       	ldi	r22, 0x00	; 0
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    1afc:	fe 01       	movw	r30, r28
    1afe:	e1 5a       	subi	r30, 0xA1	; 161
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a0 e8       	ldi	r26, 0x80	; 128
    1b08:	bf e3       	ldi	r27, 0x3F	; 63
    1b0a:	80 83       	st	Z, r24
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	a2 83       	std	Z+2, r26	; 0x02
    1b10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	8e 01       	movw	r16, r28
    1b14:	05 5a       	subi	r16, 0xA5	; 165
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e1 5a       	subi	r30, 0xA1	; 161
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a ef       	ldi	r20, 0xFA	; 250
    1b2c:	54 e4       	ldi	r21, 0x44	; 68
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	f8 01       	movw	r30, r16
    1b38:	80 83       	st	Z, r24
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	a2 83       	std	Z+2, r26	; 0x02
    1b3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b40:	fe 01       	movw	r30, r28
    1b42:	e5 5a       	subi	r30, 0xA5	; 165
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	60 81       	ld	r22, Z
    1b48:	71 81       	ldd	r23, Z+1	; 0x01
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	44 f4       	brge	.+16     	; 0x1b6e <LCD_sendCommand+0x9e>
		__ticks = 1;
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e7 5a       	subi	r30, 0xA7	; 167
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	64 c0       	rjmp	.+200    	; 0x1c36 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e5 5a       	subi	r30, 0xA5	; 165
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	0c f0       	brlt	.+2      	; 0x1b8e <LCD_sendCommand+0xbe>
    1b8c:	43 c0       	rjmp	.+134    	; 0x1c14 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e1 5a       	subi	r30, 0xA1	; 161
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8e 01       	movw	r16, r28
    1bae:	07 5a       	subi	r16, 0xA7	; 167
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
    1bc4:	1f c0       	rjmp	.+62     	; 0x1c04 <LCD_sendCommand+0x134>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e9 5a       	subi	r30, 0xA9	; 169
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	88 ec       	ldi	r24, 0xC8	; 200
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e9 5a       	subi	r30, 0xA9	; 169
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_sendCommand+0x10e>
    1be2:	fe 01       	movw	r30, r28
    1be4:	e9 5a       	subi	r30, 0xA9	; 169
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	de 01       	movw	r26, r28
    1bee:	a7 5a       	subi	r26, 0xA7	; 167
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e7 5a       	subi	r30, 0xA7	; 167
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	9c 93       	st	X, r25
    1c02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	fe 01       	movw	r30, r28
    1c06:	e7 5a       	subi	r30, 0xA7	; 167
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	d1 f6       	brne	.-76     	; 0x1bc6 <LCD_sendCommand+0xf6>
    1c12:	27 c0       	rjmp	.+78     	; 0x1c62 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	8e 01       	movw	r16, r28
    1c16:	07 5a       	subi	r16, 0xA7	; 167
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e5 5a       	subi	r30, 0xA5	; 165
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	f8 01       	movw	r30, r16
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
    1c36:	de 01       	movw	r26, r28
    1c38:	ab 5a       	subi	r26, 0xAB	; 171
    1c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e7 5a       	subi	r30, 0xA7	; 167
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	8d 93       	st	X+, r24
    1c48:	9c 93       	st	X, r25
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	eb 5a       	subi	r30, 0xAB	; 171
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_sendCommand+0x184>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	eb 5a       	subi	r30, 0xAB	; 171
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	80 83       	st	Z, r24
	_delay_ms(1);
	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	41 e0       	ldi	r20, 0x01	; 1
    1c68:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	ef 5a       	subi	r30, 0xAF	; 175
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e8       	ldi	r26, 0x80	; 128
    1c78:	bf e3       	ldi	r27, 0x3F	; 63
    1c7a:	80 83       	st	Z, r24
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	a2 83       	std	Z+2, r26	; 0x02
    1c80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c82:	8e 01       	movw	r16, r28
    1c84:	03 5b       	subi	r16, 0xB3	; 179
    1c86:	1f 4f       	sbci	r17, 0xFF	; 255
    1c88:	fe 01       	movw	r30, r28
    1c8a:	ef 5a       	subi	r30, 0xAF	; 175
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	80 83       	st	Z, r24
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	a2 83       	std	Z+2, r26	; 0x02
    1cae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e3 5b       	subi	r30, 0xB3	; 179
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e8       	ldi	r20, 0x80	; 128
    1cc4:	5f e3       	ldi	r21, 0x3F	; 63
    1cc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cca:	88 23       	and	r24, r24
    1ccc:	44 f4       	brge	.+16     	; 0x1cde <LCD_sendCommand+0x20e>
		__ticks = 1;
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e5 5b       	subi	r30, 0xB5	; 181
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	80 83       	st	Z, r24
    1cdc:	64 c0       	rjmp	.+200    	; 0x1da6 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e3 5b       	subi	r30, 0xB3	; 179
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	0c f0       	brlt	.+2      	; 0x1cfe <LCD_sendCommand+0x22e>
    1cfc:	43 c0       	rjmp	.+134    	; 0x1d84 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ef 5a       	subi	r30, 0xAF	; 175
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8e 01       	movw	r16, r28
    1d1e:	05 5b       	subi	r16, 0xB5	; 181
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	f8 01       	movw	r30, r16
    1d30:	91 83       	std	Z+1, r25	; 0x01
    1d32:	80 83       	st	Z, r24
    1d34:	1f c0       	rjmp	.+62     	; 0x1d74 <LCD_sendCommand+0x2a4>
    1d36:	fe 01       	movw	r30, r28
    1d38:	e7 5b       	subi	r30, 0xB7	; 183
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	88 ec       	ldi	r24, 0xC8	; 200
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
    1d44:	fe 01       	movw	r30, r28
    1d46:	e7 5b       	subi	r30, 0xB7	; 183
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_sendCommand+0x27e>
    1d52:	fe 01       	movw	r30, r28
    1d54:	e7 5b       	subi	r30, 0xB7	; 183
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	de 01       	movw	r26, r28
    1d5e:	a5 5b       	subi	r26, 0xB5	; 181
    1d60:	bf 4f       	sbci	r27, 0xFF	; 255
    1d62:	fe 01       	movw	r30, r28
    1d64:	e5 5b       	subi	r30, 0xB5	; 181
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	91 81       	ldd	r25, Z+1	; 0x01
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	9c 93       	st	X, r25
    1d72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	fe 01       	movw	r30, r28
    1d76:	e5 5b       	subi	r30, 0xB5	; 181
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	d1 f6       	brne	.-76     	; 0x1d36 <LCD_sendCommand+0x266>
    1d82:	27 c0       	rjmp	.+78     	; 0x1dd2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d84:	8e 01       	movw	r16, r28
    1d86:	05 5b       	subi	r16, 0xB5	; 181
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e3 5b       	subi	r30, 0xB3	; 179
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	f8 01       	movw	r30, r16
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	de 01       	movw	r26, r28
    1da8:	a9 5b       	subi	r26, 0xB9	; 185
    1daa:	bf 4f       	sbci	r27, 0xFF	; 255
    1dac:	fe 01       	movw	r30, r28
    1dae:	e5 5b       	subi	r30, 0xB5	; 181
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	91 81       	ldd	r25, Z+1	; 0x01
    1db6:	8d 93       	st	X+, r24
    1db8:	9c 93       	st	X, r25
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e9 5b       	subi	r30, 0xB9	; 185
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_sendCommand+0x2f4>
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e9 5b       	subi	r30, 0xB9	; 185
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	80 83       	st	Z, r24

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(command, 4));
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ed 59       	subi	r30, 0x9D	; 157
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 2f       	mov	r24, r24
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	80 71       	andi	r24, 0x10	; 16
    1de0:	90 70       	andi	r25, 0x00	; 0
    1de2:	95 95       	asr	r25
    1de4:	87 95       	ror	r24
    1de6:	95 95       	asr	r25
    1de8:	87 95       	ror	r24
    1dea:	95 95       	asr	r25
    1dec:	87 95       	ror	r24
    1dee:	95 95       	asr	r25
    1df0:	87 95       	ror	r24
    1df2:	98 2f       	mov	r25, r24
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	64 e0       	ldi	r22, 0x04	; 4
    1df8:	49 2f       	mov	r20, r25
    1dfa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(command, 5));
    1dfe:	fe 01       	movw	r30, r28
    1e00:	ed 59       	subi	r30, 0x9D	; 157
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 81       	ld	r24, Z
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	80 72       	andi	r24, 0x20	; 32
    1e0c:	90 70       	andi	r25, 0x00	; 0
    1e0e:	95 95       	asr	r25
    1e10:	87 95       	ror	r24
    1e12:	95 95       	asr	r25
    1e14:	87 95       	ror	r24
    1e16:	95 95       	asr	r25
    1e18:	87 95       	ror	r24
    1e1a:	95 95       	asr	r25
    1e1c:	87 95       	ror	r24
    1e1e:	95 95       	asr	r25
    1e20:	87 95       	ror	r24
    1e22:	98 2f       	mov	r25, r24
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	65 e0       	ldi	r22, 0x05	; 5
    1e28:	49 2f       	mov	r20, r25
    1e2a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(command, 6));
    1e2e:	fe 01       	movw	r30, r28
    1e30:	ed 59       	subi	r30, 0x9D	; 157
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	80 74       	andi	r24, 0x40	; 64
    1e3c:	90 70       	andi	r25, 0x00	; 0
    1e3e:	08 2e       	mov	r0, r24
    1e40:	89 2f       	mov	r24, r25
    1e42:	00 0c       	add	r0, r0
    1e44:	88 1f       	adc	r24, r24
    1e46:	99 0b       	sbc	r25, r25
    1e48:	00 0c       	add	r0, r0
    1e4a:	88 1f       	adc	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	98 2f       	mov	r25, r24
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	66 e0       	ldi	r22, 0x06	; 6
    1e54:	49 2f       	mov	r20, r25
    1e56:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(command, 7));
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ed 59       	subi	r30, 0x9D	; 157
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	98 2f       	mov	r25, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	99 27       	eor	r25, r25
    1e68:	99 1f       	adc	r25, r25
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	67 e0       	ldi	r22, 0x07	; 7
    1e6e:	49 2f       	mov	r20, r25
    1e70:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    1e74:	fe 01       	movw	r30, r28
    1e76:	ed 5b       	subi	r30, 0xBD	; 189
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e8       	ldi	r26, 0x80	; 128
    1e80:	bf e3       	ldi	r27, 0x3F	; 63
    1e82:	80 83       	st	Z, r24
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	a2 83       	std	Z+2, r26	; 0x02
    1e88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	8e 01       	movw	r16, r28
    1e8c:	01 5c       	subi	r16, 0xC1	; 193
    1e8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e90:	fe 01       	movw	r30, r28
    1e92:	ed 5b       	subi	r30, 0xBD	; 189
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4a ef       	ldi	r20, 0xFA	; 250
    1ea4:	54 e4       	ldi	r21, 0x44	; 68
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	f8 01       	movw	r30, r16
    1eb0:	80 83       	st	Z, r24
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	a2 83       	std	Z+2, r26	; 0x02
    1eb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ff 96       	adiw	r30, 0x3f	; 63
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e8       	ldi	r20, 0x80	; 128
    1eca:	5f e3       	ldi	r21, 0x3F	; 63
    1ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	2c f4       	brge	.+10     	; 0x1ede <LCD_sendCommand+0x40e>
		__ticks = 1;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9e af       	std	Y+62, r25	; 0x3e
    1eda:	8d af       	std	Y+61, r24	; 0x3d
    1edc:	46 c0       	rjmp	.+140    	; 0x1f6a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ff 96       	adiw	r30, 0x3f	; 63
    1ee2:	60 81       	ld	r22, Z
    1ee4:	71 81       	ldd	r23, Z+1	; 0x01
    1ee6:	82 81       	ldd	r24, Z+2	; 0x02
    1ee8:	93 81       	ldd	r25, Z+3	; 0x03
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	3f ef       	ldi	r19, 0xFF	; 255
    1eee:	4f e7       	ldi	r20, 0x7F	; 127
    1ef0:	57 e4       	ldi	r21, 0x47	; 71
    1ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef6:	18 16       	cp	r1, r24
    1ef8:	64 f5       	brge	.+88     	; 0x1f52 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efa:	fe 01       	movw	r30, r28
    1efc:	ed 5b       	subi	r30, 0xBD	; 189
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e2       	ldi	r20, 0x20	; 32
    1f0e:	51 e4       	ldi	r21, 0x41	; 65
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	bc 01       	movw	r22, r24
    1f1a:	cd 01       	movw	r24, r26
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9e af       	std	Y+62, r25	; 0x3e
    1f26:	8d af       	std	Y+61, r24	; 0x3d
    1f28:	0f c0       	rjmp	.+30     	; 0x1f48 <LCD_sendCommand+0x478>
    1f2a:	88 ec       	ldi	r24, 0xC8	; 200
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c af       	std	Y+60, r25	; 0x3c
    1f30:	8b af       	std	Y+59, r24	; 0x3b
    1f32:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f34:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <LCD_sendCommand+0x466>
    1f3a:	9c af       	std	Y+60, r25	; 0x3c
    1f3c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f40:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	9e af       	std	Y+62, r25	; 0x3e
    1f46:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f48:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	69 f7       	brne	.-38     	; 0x1f2a <LCD_sendCommand+0x45a>
    1f50:	16 c0       	rjmp	.+44     	; 0x1f7e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f52:	fe 01       	movw	r30, r28
    1f54:	ff 96       	adiw	r30, 0x3f	; 63
    1f56:	60 81       	ld	r22, Z
    1f58:	71 81       	ldd	r23, Z+1	; 0x01
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	93 81       	ldd	r25, Z+3	; 0x03
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9e af       	std	Y+62, r25	; 0x3e
    1f68:	8d af       	std	Y+61, r24	; 0x3d
    1f6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f6e:	9a af       	std	Y+58, r25	; 0x3a
    1f70:	89 af       	std	Y+57, r24	; 0x39
    1f72:	89 ad       	ldd	r24, Y+57	; 0x39
    1f74:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <LCD_sendCommand+0x4a6>
    1f7a:	9a af       	std	Y+58, r25	; 0x3a
    1f7c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* set enable bit to low*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	61 e0       	ldi	r22, 0x01	; 1
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a0 e8       	ldi	r26, 0x80	; 128
    1f8e:	bf e3       	ldi	r27, 0x3F	; 63
    1f90:	8d ab       	std	Y+53, r24	; 0x35
    1f92:	9e ab       	std	Y+54, r25	; 0x36
    1f94:	af ab       	std	Y+55, r26	; 0x37
    1f96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f98:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	4a ef       	ldi	r20, 0xFA	; 250
    1fa6:	54 e4       	ldi	r21, 0x44	; 68
    1fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	89 ab       	std	Y+49, r24	; 0x31
    1fb2:	9a ab       	std	Y+50, r25	; 0x32
    1fb4:	ab ab       	std	Y+51, r26	; 0x33
    1fb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1fba:	7a a9       	ldd	r23, Y+50	; 0x32
    1fbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1fbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e8       	ldi	r20, 0x80	; 128
    1fc6:	5f e3       	ldi	r21, 0x3F	; 63
    1fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fcc:	88 23       	and	r24, r24
    1fce:	2c f4       	brge	.+10     	; 0x1fda <LCD_sendCommand+0x50a>
		__ticks = 1;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	98 ab       	std	Y+48, r25	; 0x30
    1fd6:	8f a7       	std	Y+47, r24	; 0x2f
    1fd8:	3f c0       	rjmp	.+126    	; 0x2058 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1fda:	69 a9       	ldd	r22, Y+49	; 0x31
    1fdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fde:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	3f ef       	ldi	r19, 0xFF	; 255
    1fe6:	4f e7       	ldi	r20, 0x7F	; 127
    1fe8:	57 e4       	ldi	r21, 0x47	; 71
    1fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	4c f5       	brge	.+82     	; 0x2044 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff8:	98 ad       	ldd	r25, Y+56	; 0x38
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e2       	ldi	r20, 0x20	; 32
    2000:	51 e4       	ldi	r21, 0x41	; 65
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	98 ab       	std	Y+48, r25	; 0x30
    2018:	8f a7       	std	Y+47, r24	; 0x2f
    201a:	0f c0       	rjmp	.+30     	; 0x203a <LCD_sendCommand+0x56a>
    201c:	88 ec       	ldi	r24, 0xC8	; 200
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9e a7       	std	Y+46, r25	; 0x2e
    2022:	8d a7       	std	Y+45, r24	; 0x2d
    2024:	8d a5       	ldd	r24, Y+45	; 0x2d
    2026:	9e a5       	ldd	r25, Y+46	; 0x2e
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_sendCommand+0x558>
    202c:	9e a7       	std	Y+46, r25	; 0x2e
    202e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2030:	8f a5       	ldd	r24, Y+47	; 0x2f
    2032:	98 a9       	ldd	r25, Y+48	; 0x30
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	98 ab       	std	Y+48, r25	; 0x30
    2038:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203a:	8f a5       	ldd	r24, Y+47	; 0x2f
    203c:	98 a9       	ldd	r25, Y+48	; 0x30
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	69 f7       	brne	.-38     	; 0x201c <LCD_sendCommand+0x54c>
    2042:	14 c0       	rjmp	.+40     	; 0x206c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2044:	69 a9       	ldd	r22, Y+49	; 0x31
    2046:	7a a9       	ldd	r23, Y+50	; 0x32
    2048:	8b a9       	ldd	r24, Y+51	; 0x33
    204a:	9c a9       	ldd	r25, Y+52	; 0x34
    204c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	98 ab       	std	Y+48, r25	; 0x30
    2056:	8f a7       	std	Y+47, r24	; 0x2f
    2058:	8f a5       	ldd	r24, Y+47	; 0x2f
    205a:	98 a9       	ldd	r25, Y+48	; 0x30
    205c:	9c a7       	std	Y+44, r25	; 0x2c
    205e:	8b a7       	std	Y+43, r24	; 0x2b
    2060:	8b a5       	ldd	r24, Y+43	; 0x2b
    2062:	9c a5       	ldd	r25, Y+44	; 0x2c
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <LCD_sendCommand+0x594>
    2068:	9c a7       	std	Y+44, r25	; 0x2c
    206a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	41 e0       	ldi	r20, 0x01	; 1
    2072:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a0 e8       	ldi	r26, 0x80	; 128
    207c:	bf e3       	ldi	r27, 0x3F	; 63
    207e:	8f a3       	std	Y+39, r24	; 0x27
    2080:	98 a7       	std	Y+40, r25	; 0x28
    2082:	a9 a7       	std	Y+41, r26	; 0x29
    2084:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2086:	6f a1       	ldd	r22, Y+39	; 0x27
    2088:	78 a5       	ldd	r23, Y+40	; 0x28
    208a:	89 a5       	ldd	r24, Y+41	; 0x29
    208c:	9a a5       	ldd	r25, Y+42	; 0x2a
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	4a ef       	ldi	r20, 0xFA	; 250
    2094:	54 e4       	ldi	r21, 0x44	; 68
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	8b a3       	std	Y+35, r24	; 0x23
    20a0:	9c a3       	std	Y+36, r25	; 0x24
    20a2:	ad a3       	std	Y+37, r26	; 0x25
    20a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20a6:	6b a1       	ldd	r22, Y+35	; 0x23
    20a8:	7c a1       	ldd	r23, Y+36	; 0x24
    20aa:	8d a1       	ldd	r24, Y+37	; 0x25
    20ac:	9e a1       	ldd	r25, Y+38	; 0x26
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9a a3       	std	Y+34, r25	; 0x22
    20c4:	89 a3       	std	Y+33, r24	; 0x21
    20c6:	3f c0       	rjmp	.+126    	; 0x2146 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    20c8:	6b a1       	ldd	r22, Y+35	; 0x23
    20ca:	7c a1       	ldd	r23, Y+36	; 0x24
    20cc:	8d a1       	ldd	r24, Y+37	; 0x25
    20ce:	9e a1       	ldd	r25, Y+38	; 0x26
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	3f ef       	ldi	r19, 0xFF	; 255
    20d4:	4f e7       	ldi	r20, 0x7F	; 127
    20d6:	57 e4       	ldi	r21, 0x47	; 71
    20d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20dc:	18 16       	cp	r1, r24
    20de:	4c f5       	brge	.+82     	; 0x2132 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e0:	6f a1       	ldd	r22, Y+39	; 0x27
    20e2:	78 a5       	ldd	r23, Y+40	; 0x28
    20e4:	89 a5       	ldd	r24, Y+41	; 0x29
    20e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e2       	ldi	r20, 0x20	; 32
    20ee:	51 e4       	ldi	r21, 0x41	; 65
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	bc 01       	movw	r22, r24
    20fa:	cd 01       	movw	r24, r26
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9a a3       	std	Y+34, r25	; 0x22
    2106:	89 a3       	std	Y+33, r24	; 0x21
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <LCD_sendCommand+0x658>
    210a:	88 ec       	ldi	r24, 0xC8	; 200
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	98 a3       	std	Y+32, r25	; 0x20
    2110:	8f 8f       	std	Y+31, r24	; 0x1f
    2112:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2114:	98 a1       	ldd	r25, Y+32	; 0x20
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	f1 f7       	brne	.-4      	; 0x2116 <LCD_sendCommand+0x646>
    211a:	98 a3       	std	Y+32, r25	; 0x20
    211c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211e:	89 a1       	ldd	r24, Y+33	; 0x21
    2120:	9a a1       	ldd	r25, Y+34	; 0x22
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	9a a3       	std	Y+34, r25	; 0x22
    2126:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2128:	89 a1       	ldd	r24, Y+33	; 0x21
    212a:	9a a1       	ldd	r25, Y+34	; 0x22
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	69 f7       	brne	.-38     	; 0x210a <LCD_sendCommand+0x63a>
    2130:	14 c0       	rjmp	.+40     	; 0x215a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2132:	6b a1       	ldd	r22, Y+35	; 0x23
    2134:	7c a1       	ldd	r23, Y+36	; 0x24
    2136:	8d a1       	ldd	r24, Y+37	; 0x25
    2138:	9e a1       	ldd	r25, Y+38	; 0x26
    213a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9a a3       	std	Y+34, r25	; 0x22
    2144:	89 a3       	std	Y+33, r24	; 0x21
    2146:	89 a1       	ldd	r24, Y+33	; 0x21
    2148:	9a a1       	ldd	r25, Y+34	; 0x22
    214a:	9e 8f       	std	Y+30, r25	; 0x1e
    214c:	8d 8f       	std	Y+29, r24	; 0x1d
    214e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2150:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	f1 f7       	brne	.-4      	; 0x2152 <LCD_sendCommand+0x682>
    2156:	9e 8f       	std	Y+30, r25	; 0x1e
    2158:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(command, 0));
    215a:	fe 01       	movw	r30, r28
    215c:	ed 59       	subi	r30, 0x9D	; 157
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	98 2f       	mov	r25, r24
    2164:	91 70       	andi	r25, 0x01	; 1
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	64 e0       	ldi	r22, 0x04	; 4
    216a:	49 2f       	mov	r20, r25
    216c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(command, 1));
    2170:	fe 01       	movw	r30, r28
    2172:	ed 59       	subi	r30, 0x9D	; 157
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	80 81       	ld	r24, Z
    2178:	88 2f       	mov	r24, r24
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	82 70       	andi	r24, 0x02	; 2
    217e:	90 70       	andi	r25, 0x00	; 0
    2180:	95 95       	asr	r25
    2182:	87 95       	ror	r24
    2184:	98 2f       	mov	r25, r24
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	65 e0       	ldi	r22, 0x05	; 5
    218a:	49 2f       	mov	r20, r25
    218c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(command, 2));
    2190:	fe 01       	movw	r30, r28
    2192:	ed 59       	subi	r30, 0x9D	; 157
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	80 81       	ld	r24, Z
    2198:	88 2f       	mov	r24, r24
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	84 70       	andi	r24, 0x04	; 4
    219e:	90 70       	andi	r25, 0x00	; 0
    21a0:	95 95       	asr	r25
    21a2:	87 95       	ror	r24
    21a4:	95 95       	asr	r25
    21a6:	87 95       	ror	r24
    21a8:	98 2f       	mov	r25, r24
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	66 e0       	ldi	r22, 0x06	; 6
    21ae:	49 2f       	mov	r20, r25
    21b0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(command, 3));
    21b4:	fe 01       	movw	r30, r28
    21b6:	ed 59       	subi	r30, 0x9D	; 157
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	80 81       	ld	r24, Z
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	88 70       	andi	r24, 0x08	; 8
    21c2:	90 70       	andi	r25, 0x00	; 0
    21c4:	95 95       	asr	r25
    21c6:	87 95       	ror	r24
    21c8:	95 95       	asr	r25
    21ca:	87 95       	ror	r24
    21cc:	95 95       	asr	r25
    21ce:	87 95       	ror	r24
    21d0:	98 2f       	mov	r25, r24
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	67 e0       	ldi	r22, 0x07	; 7
    21d6:	49 2f       	mov	r20, r25
    21d8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a0 e8       	ldi	r26, 0x80	; 128
    21e2:	bf e3       	ldi	r27, 0x3F	; 63
    21e4:	89 8f       	std	Y+25, r24	; 0x19
    21e6:	9a 8f       	std	Y+26, r25	; 0x1a
    21e8:	ab 8f       	std	Y+27, r26	; 0x1b
    21ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	69 8d       	ldd	r22, Y+25	; 0x19
    21ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4a ef       	ldi	r20, 0xFA	; 250
    21fa:	54 e4       	ldi	r21, 0x44	; 68
    21fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8d 8b       	std	Y+21, r24	; 0x15
    2206:	9e 8b       	std	Y+22, r25	; 0x16
    2208:	af 8b       	std	Y+23, r26	; 0x17
    220a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    220c:	6d 89       	ldd	r22, Y+21	; 0x15
    220e:	7e 89       	ldd	r23, Y+22	; 0x16
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	98 8d       	ldd	r25, Y+24	; 0x18
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2220:	88 23       	and	r24, r24
    2222:	2c f4       	brge	.+10     	; 0x222e <LCD_sendCommand+0x75e>
		__ticks = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9c 8b       	std	Y+20, r25	; 0x14
    222a:	8b 8b       	std	Y+19, r24	; 0x13
    222c:	3f c0       	rjmp	.+126    	; 0x22ac <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	4c f5       	brge	.+82     	; 0x2298 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2246:	69 8d       	ldd	r22, Y+25	; 0x19
    2248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9c 8b       	std	Y+20, r25	; 0x14
    226c:	8b 8b       	std	Y+19, r24	; 0x13
    226e:	0f c0       	rjmp	.+30     	; 0x228e <LCD_sendCommand+0x7be>
    2270:	88 ec       	ldi	r24, 0xC8	; 200
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9a 8b       	std	Y+18, r25	; 0x12
    2276:	89 8b       	std	Y+17, r24	; 0x11
    2278:	89 89       	ldd	r24, Y+17	; 0x11
    227a:	9a 89       	ldd	r25, Y+18	; 0x12
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <LCD_sendCommand+0x7ac>
    2280:	9a 8b       	std	Y+18, r25	; 0x12
    2282:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2284:	8b 89       	ldd	r24, Y+19	; 0x13
    2286:	9c 89       	ldd	r25, Y+20	; 0x14
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	9c 8b       	std	Y+20, r25	; 0x14
    228c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	8b 89       	ldd	r24, Y+19	; 0x13
    2290:	9c 89       	ldd	r25, Y+20	; 0x14
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	69 f7       	brne	.-38     	; 0x2270 <LCD_sendCommand+0x7a0>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	6d 89       	ldd	r22, Y+21	; 0x15
    229a:	7e 89       	ldd	r23, Y+22	; 0x16
    229c:	8f 89       	ldd	r24, Y+23	; 0x17
    229e:	98 8d       	ldd	r25, Y+24	; 0x18
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	98 8b       	std	Y+16, r25	; 0x10
    22b2:	8f 87       	std	Y+15, r24	; 0x0f
    22b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b6:	98 89       	ldd	r25, Y+16	; 0x10
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_sendCommand+0x7e8>
    22bc:	98 8b       	std	Y+16, r25	; 0x10
    22be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	a0 e8       	ldi	r26, 0x80	; 128
    22d0:	bf e3       	ldi	r27, 0x3F	; 63
    22d2:	8b 87       	std	Y+11, r24	; 0x0b
    22d4:	9c 87       	std	Y+12, r25	; 0x0c
    22d6:	ad 87       	std	Y+13, r26	; 0x0d
    22d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22da:	6b 85       	ldd	r22, Y+11	; 0x0b
    22dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4a ef       	ldi	r20, 0xFA	; 250
    22e8:	54 e4       	ldi	r21, 0x44	; 68
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	8f 83       	std	Y+7, r24	; 0x07
    22f4:	98 87       	std	Y+8, r25	; 0x08
    22f6:	a9 87       	std	Y+9, r26	; 0x09
    22f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	2c f4       	brge	.+10     	; 0x231c <LCD_sendCommand+0x84c>
		__ticks = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	3f c0       	rjmp	.+126    	; 0x239a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	3f ef       	ldi	r19, 0xFF	; 255
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	57 e4       	ldi	r21, 0x47	; 71
    232c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	4c f5       	brge	.+82     	; 0x2386 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2334:	6b 85       	ldd	r22, Y+11	; 0x0b
    2336:	7c 85       	ldd	r23, Y+12	; 0x0c
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e2       	ldi	r20, 0x20	; 32
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	0f c0       	rjmp	.+30     	; 0x237c <LCD_sendCommand+0x8ac>
    235e:	88 ec       	ldi	r24, 0xC8	; 200
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9c 83       	std	Y+4, r25	; 0x04
    2364:	8b 83       	std	Y+3, r24	; 0x03
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <LCD_sendCommand+0x89a>
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	69 f7       	brne	.-38     	; 0x235e <LCD_sendCommand+0x88e>
    2384:	14 c0       	rjmp	.+40     	; 0x23ae <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2386:	6f 81       	ldd	r22, Y+7	; 0x07
    2388:	78 85       	ldd	r23, Y+8	; 0x08
    238a:	89 85       	ldd	r24, Y+9	; 0x09
    238c:	9a 85       	ldd	r25, Y+10	; 0x0a
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_sendCommand+0x8d6>
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    23ae:	cd 59       	subi	r28, 0x9D	; 157
    23b0:	df 4f       	sbci	r29, 0xFF	; 255
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	08 95       	ret

000023c6 <LCD_displayCharacter>:
/*
 * Description :
 * display a character on the LCD
 */
void LCD_displayCharacter(uint8 character)
{
    23c6:	0f 93       	push	r16
    23c8:	1f 93       	push	r17
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	c3 56       	subi	r28, 0x63	; 99
    23d4:	d0 40       	sbci	r29, 0x00	; 0
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	fe 01       	movw	r30, r28
    23e2:	ed 59       	subi	r30, 0x9D	; 157
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 83       	st	Z, r24
	/* set RS to high to send a character */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    23f2:	fe 01       	movw	r30, r28
    23f4:	e1 5a       	subi	r30, 0xA1	; 161
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a0 e8       	ldi	r26, 0x80	; 128
    23fe:	bf e3       	ldi	r27, 0x3F	; 63
    2400:	80 83       	st	Z, r24
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	a2 83       	std	Z+2, r26	; 0x02
    2406:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	8e 01       	movw	r16, r28
    240a:	05 5a       	subi	r16, 0xA5	; 165
    240c:	1f 4f       	sbci	r17, 0xFF	; 255
    240e:	fe 01       	movw	r30, r28
    2410:	e1 5a       	subi	r30, 0xA1	; 161
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	60 81       	ld	r22, Z
    2416:	71 81       	ldd	r23, Z+1	; 0x01
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a ef       	ldi	r20, 0xFA	; 250
    2422:	54 e4       	ldi	r21, 0x44	; 68
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	f8 01       	movw	r30, r16
    242e:	80 83       	st	Z, r24
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	a2 83       	std	Z+2, r26	; 0x02
    2434:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2436:	fe 01       	movw	r30, r28
    2438:	e5 5a       	subi	r30, 0xA5	; 165
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	60 81       	ld	r22, Z
    243e:	71 81       	ldd	r23, Z+1	; 0x01
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e8       	ldi	r20, 0x80	; 128
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2450:	88 23       	and	r24, r24
    2452:	44 f4       	brge	.+16     	; 0x2464 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2454:	fe 01       	movw	r30, r28
    2456:	e7 5a       	subi	r30, 0xA7	; 167
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	64 c0       	rjmp	.+200    	; 0x252c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2464:	fe 01       	movw	r30, r28
    2466:	e5 5a       	subi	r30, 0xA5	; 165
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	60 81       	ld	r22, Z
    246c:	71 81       	ldd	r23, Z+1	; 0x01
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	93 81       	ldd	r25, Z+3	; 0x03
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	0c f0       	brlt	.+2      	; 0x2484 <LCD_displayCharacter+0xbe>
    2482:	43 c0       	rjmp	.+134    	; 0x250a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	fe 01       	movw	r30, r28
    2486:	e1 5a       	subi	r30, 0xA1	; 161
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e2       	ldi	r20, 0x20	; 32
    2498:	51 e4       	ldi	r21, 0x41	; 65
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8e 01       	movw	r16, r28
    24a4:	07 5a       	subi	r16, 0xA7	; 167
    24a6:	1f 4f       	sbci	r17, 0xFF	; 255
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	f8 01       	movw	r30, r16
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	80 83       	st	Z, r24
    24ba:	1f c0       	rjmp	.+62     	; 0x24fa <LCD_displayCharacter+0x134>
    24bc:	fe 01       	movw	r30, r28
    24be:	e9 5a       	subi	r30, 0xA9	; 169
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	88 ec       	ldi	r24, 0xC8	; 200
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	80 83       	st	Z, r24
    24ca:	fe 01       	movw	r30, r28
    24cc:	e9 5a       	subi	r30, 0xA9	; 169
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <LCD_displayCharacter+0x10e>
    24d8:	fe 01       	movw	r30, r28
    24da:	e9 5a       	subi	r30, 0xA9	; 169
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e2:	de 01       	movw	r26, r28
    24e4:	a7 5a       	subi	r26, 0xA7	; 167
    24e6:	bf 4f       	sbci	r27, 0xFF	; 255
    24e8:	fe 01       	movw	r30, r28
    24ea:	e7 5a       	subi	r30, 0xA7	; 167
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	11 96       	adiw	r26, 0x01	; 1
    24f6:	9c 93       	st	X, r25
    24f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	fe 01       	movw	r30, r28
    24fc:	e7 5a       	subi	r30, 0xA7	; 167
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	d1 f6       	brne	.-76     	; 0x24bc <LCD_displayCharacter+0xf6>
    2508:	27 c0       	rjmp	.+78     	; 0x2558 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	8e 01       	movw	r16, r28
    250c:	07 5a       	subi	r16, 0xA7	; 167
    250e:	1f 4f       	sbci	r17, 0xFF	; 255
    2510:	fe 01       	movw	r30, r28
    2512:	e5 5a       	subi	r30, 0xA5	; 165
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	f8 01       	movw	r30, r16
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	80 83       	st	Z, r24
    252c:	de 01       	movw	r26, r28
    252e:	ab 5a       	subi	r26, 0xAB	; 171
    2530:	bf 4f       	sbci	r27, 0xFF	; 255
    2532:	fe 01       	movw	r30, r28
    2534:	e7 5a       	subi	r30, 0xA7	; 167
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	8d 93       	st	X+, r24
    253e:	9c 93       	st	X, r25
    2540:	fe 01       	movw	r30, r28
    2542:	eb 5a       	subi	r30, 0xAB	; 171
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <LCD_displayCharacter+0x184>
    254e:	fe 01       	movw	r30, r28
    2550:	eb 5a       	subi	r30, 0xAB	; 171
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
	_delay_ms(1);
	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	61 e0       	ldi	r22, 0x01	; 1
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    2562:	fe 01       	movw	r30, r28
    2564:	ef 5a       	subi	r30, 0xAF	; 175
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	a0 e8       	ldi	r26, 0x80	; 128
    256e:	bf e3       	ldi	r27, 0x3F	; 63
    2570:	80 83       	st	Z, r24
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	a2 83       	std	Z+2, r26	; 0x02
    2576:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2578:	8e 01       	movw	r16, r28
    257a:	03 5b       	subi	r16, 0xB3	; 179
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	fe 01       	movw	r30, r28
    2580:	ef 5a       	subi	r30, 0xAF	; 175
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	4a ef       	ldi	r20, 0xFA	; 250
    2592:	54 e4       	ldi	r21, 0x44	; 68
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	f8 01       	movw	r30, r16
    259e:	80 83       	st	Z, r24
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	a2 83       	std	Z+2, r26	; 0x02
    25a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a6:	fe 01       	movw	r30, r28
    25a8:	e3 5b       	subi	r30, 0xB3	; 179
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	60 81       	ld	r22, Z
    25ae:	71 81       	ldd	r23, Z+1	; 0x01
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e8       	ldi	r20, 0x80	; 128
    25ba:	5f e3       	ldi	r21, 0x3F	; 63
    25bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c0:	88 23       	and	r24, r24
    25c2:	44 f4       	brge	.+16     	; 0x25d4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    25c4:	fe 01       	movw	r30, r28
    25c6:	e5 5b       	subi	r30, 0xB5	; 181
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	80 83       	st	Z, r24
    25d2:	64 c0       	rjmp	.+200    	; 0x269c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    25d4:	fe 01       	movw	r30, r28
    25d6:	e3 5b       	subi	r30, 0xB3	; 179
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	3f ef       	ldi	r19, 0xFF	; 255
    25e6:	4f e7       	ldi	r20, 0x7F	; 127
    25e8:	57 e4       	ldi	r21, 0x47	; 71
    25ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	0c f0       	brlt	.+2      	; 0x25f4 <LCD_displayCharacter+0x22e>
    25f2:	43 c0       	rjmp	.+134    	; 0x267a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f4:	fe 01       	movw	r30, r28
    25f6:	ef 5a       	subi	r30, 0xAF	; 175
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e2       	ldi	r20, 0x20	; 32
    2608:	51 e4       	ldi	r21, 0x41	; 65
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	8e 01       	movw	r16, r28
    2614:	05 5b       	subi	r16, 0xB5	; 181
    2616:	1f 4f       	sbci	r17, 0xFF	; 255
    2618:	bc 01       	movw	r22, r24
    261a:	cd 01       	movw	r24, r26
    261c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	f8 01       	movw	r30, r16
    2626:	91 83       	std	Z+1, r25	; 0x01
    2628:	80 83       	st	Z, r24
    262a:	1f c0       	rjmp	.+62     	; 0x266a <LCD_displayCharacter+0x2a4>
    262c:	fe 01       	movw	r30, r28
    262e:	e7 5b       	subi	r30, 0xB7	; 183
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	88 ec       	ldi	r24, 0xC8	; 200
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
    263a:	fe 01       	movw	r30, r28
    263c:	e7 5b       	subi	r30, 0xB7	; 183
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	91 81       	ldd	r25, Z+1	; 0x01
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <LCD_displayCharacter+0x27e>
    2648:	fe 01       	movw	r30, r28
    264a:	e7 5b       	subi	r30, 0xB7	; 183
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2652:	de 01       	movw	r26, r28
    2654:	a5 5b       	subi	r26, 0xB5	; 181
    2656:	bf 4f       	sbci	r27, 0xFF	; 255
    2658:	fe 01       	movw	r30, r28
    265a:	e5 5b       	subi	r30, 0xB5	; 181
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	11 96       	adiw	r26, 0x01	; 1
    2666:	9c 93       	st	X, r25
    2668:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266a:	fe 01       	movw	r30, r28
    266c:	e5 5b       	subi	r30, 0xB5	; 181
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	80 81       	ld	r24, Z
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	d1 f6       	brne	.-76     	; 0x262c <LCD_displayCharacter+0x266>
    2678:	27 c0       	rjmp	.+78     	; 0x26c8 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267a:	8e 01       	movw	r16, r28
    267c:	05 5b       	subi	r16, 0xB5	; 181
    267e:	1f 4f       	sbci	r17, 0xFF	; 255
    2680:	fe 01       	movw	r30, r28
    2682:	e3 5b       	subi	r30, 0xB3	; 179
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	f8 01       	movw	r30, r16
    2698:	91 83       	std	Z+1, r25	; 0x01
    269a:	80 83       	st	Z, r24
    269c:	de 01       	movw	r26, r28
    269e:	a9 5b       	subi	r26, 0xB9	; 185
    26a0:	bf 4f       	sbci	r27, 0xFF	; 255
    26a2:	fe 01       	movw	r30, r28
    26a4:	e5 5b       	subi	r30, 0xB5	; 181
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	80 81       	ld	r24, Z
    26aa:	91 81       	ldd	r25, Z+1	; 0x01
    26ac:	8d 93       	st	X+, r24
    26ae:	9c 93       	st	X, r25
    26b0:	fe 01       	movw	r30, r28
    26b2:	e9 5b       	subi	r30, 0xB9	; 185
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <LCD_displayCharacter+0x2f4>
    26be:	fe 01       	movw	r30, r28
    26c0:	e9 5b       	subi	r30, 0xB9	; 185
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(character, 4));
    26c8:	fe 01       	movw	r30, r28
    26ca:	ed 59       	subi	r30, 0x9D	; 157
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	88 2f       	mov	r24, r24
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	80 71       	andi	r24, 0x10	; 16
    26d6:	90 70       	andi	r25, 0x00	; 0
    26d8:	95 95       	asr	r25
    26da:	87 95       	ror	r24
    26dc:	95 95       	asr	r25
    26de:	87 95       	ror	r24
    26e0:	95 95       	asr	r25
    26e2:	87 95       	ror	r24
    26e4:	95 95       	asr	r25
    26e6:	87 95       	ror	r24
    26e8:	98 2f       	mov	r25, r24
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	64 e0       	ldi	r22, 0x04	; 4
    26ee:	49 2f       	mov	r20, r25
    26f0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(character, 5));
    26f4:	fe 01       	movw	r30, r28
    26f6:	ed 59       	subi	r30, 0x9D	; 157
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	88 2f       	mov	r24, r24
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	80 72       	andi	r24, 0x20	; 32
    2702:	90 70       	andi	r25, 0x00	; 0
    2704:	95 95       	asr	r25
    2706:	87 95       	ror	r24
    2708:	95 95       	asr	r25
    270a:	87 95       	ror	r24
    270c:	95 95       	asr	r25
    270e:	87 95       	ror	r24
    2710:	95 95       	asr	r25
    2712:	87 95       	ror	r24
    2714:	95 95       	asr	r25
    2716:	87 95       	ror	r24
    2718:	98 2f       	mov	r25, r24
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	65 e0       	ldi	r22, 0x05	; 5
    271e:	49 2f       	mov	r20, r25
    2720:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(character, 6));
    2724:	fe 01       	movw	r30, r28
    2726:	ed 59       	subi	r30, 0x9D	; 157
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	88 2f       	mov	r24, r24
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	80 74       	andi	r24, 0x40	; 64
    2732:	90 70       	andi	r25, 0x00	; 0
    2734:	08 2e       	mov	r0, r24
    2736:	89 2f       	mov	r24, r25
    2738:	00 0c       	add	r0, r0
    273a:	88 1f       	adc	r24, r24
    273c:	99 0b       	sbc	r25, r25
    273e:	00 0c       	add	r0, r0
    2740:	88 1f       	adc	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	98 2f       	mov	r25, r24
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	66 e0       	ldi	r22, 0x06	; 6
    274a:	49 2f       	mov	r20, r25
    274c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(character, 7));
    2750:	fe 01       	movw	r30, r28
    2752:	ed 59       	subi	r30, 0x9D	; 157
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	80 81       	ld	r24, Z
    2758:	98 2f       	mov	r25, r24
    275a:	99 1f       	adc	r25, r25
    275c:	99 27       	eor	r25, r25
    275e:	99 1f       	adc	r25, r25
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	67 e0       	ldi	r22, 0x07	; 7
    2764:	49 2f       	mov	r20, r25
    2766:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    276a:	fe 01       	movw	r30, r28
    276c:	ed 5b       	subi	r30, 0xBD	; 189
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	a0 e8       	ldi	r26, 0x80	; 128
    2776:	bf e3       	ldi	r27, 0x3F	; 63
    2778:	80 83       	st	Z, r24
    277a:	91 83       	std	Z+1, r25	; 0x01
    277c:	a2 83       	std	Z+2, r26	; 0x02
    277e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2780:	8e 01       	movw	r16, r28
    2782:	01 5c       	subi	r16, 0xC1	; 193
    2784:	1f 4f       	sbci	r17, 0xFF	; 255
    2786:	fe 01       	movw	r30, r28
    2788:	ed 5b       	subi	r30, 0xBD	; 189
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	60 81       	ld	r22, Z
    278e:	71 81       	ldd	r23, Z+1	; 0x01
    2790:	82 81       	ldd	r24, Z+2	; 0x02
    2792:	93 81       	ldd	r25, Z+3	; 0x03
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4a ef       	ldi	r20, 0xFA	; 250
    279a:	54 e4       	ldi	r21, 0x44	; 68
    279c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	f8 01       	movw	r30, r16
    27a6:	80 83       	st	Z, r24
    27a8:	91 83       	std	Z+1, r25	; 0x01
    27aa:	a2 83       	std	Z+2, r26	; 0x02
    27ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ae:	fe 01       	movw	r30, r28
    27b0:	ff 96       	adiw	r30, 0x3f	; 63
    27b2:	60 81       	ld	r22, Z
    27b4:	71 81       	ldd	r23, Z+1	; 0x01
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	93 81       	ldd	r25, Z+3	; 0x03
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e8       	ldi	r20, 0x80	; 128
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9e af       	std	Y+62, r25	; 0x3e
    27d0:	8d af       	std	Y+61, r24	; 0x3d
    27d2:	46 c0       	rjmp	.+140    	; 0x2860 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    27d4:	fe 01       	movw	r30, r28
    27d6:	ff 96       	adiw	r30, 0x3f	; 63
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	93 81       	ldd	r25, Z+3	; 0x03
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	3f ef       	ldi	r19, 0xFF	; 255
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	57 e4       	ldi	r21, 0x47	; 71
    27e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	64 f5       	brge	.+88     	; 0x2848 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f0:	fe 01       	movw	r30, r28
    27f2:	ed 5b       	subi	r30, 0xBD	; 189
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	60 81       	ld	r22, Z
    27f8:	71 81       	ldd	r23, Z+1	; 0x01
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e2       	ldi	r20, 0x20	; 32
    2804:	51 e4       	ldi	r21, 0x41	; 65
    2806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9e af       	std	Y+62, r25	; 0x3e
    281c:	8d af       	std	Y+61, r24	; 0x3d
    281e:	0f c0       	rjmp	.+30     	; 0x283e <LCD_displayCharacter+0x478>
    2820:	88 ec       	ldi	r24, 0xC8	; 200
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9c af       	std	Y+60, r25	; 0x3c
    2826:	8b af       	std	Y+59, r24	; 0x3b
    2828:	8b ad       	ldd	r24, Y+59	; 0x3b
    282a:	9c ad       	ldd	r25, Y+60	; 0x3c
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <LCD_displayCharacter+0x466>
    2830:	9c af       	std	Y+60, r25	; 0x3c
    2832:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2834:	8d ad       	ldd	r24, Y+61	; 0x3d
    2836:	9e ad       	ldd	r25, Y+62	; 0x3e
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	9e af       	std	Y+62, r25	; 0x3e
    283c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2840:	9e ad       	ldd	r25, Y+62	; 0x3e
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	69 f7       	brne	.-38     	; 0x2820 <LCD_displayCharacter+0x45a>
    2846:	16 c0       	rjmp	.+44     	; 0x2874 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2848:	fe 01       	movw	r30, r28
    284a:	ff 96       	adiw	r30, 0x3f	; 63
    284c:	60 81       	ld	r22, Z
    284e:	71 81       	ldd	r23, Z+1	; 0x01
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	93 81       	ldd	r25, Z+3	; 0x03
    2854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9e af       	std	Y+62, r25	; 0x3e
    285e:	8d af       	std	Y+61, r24	; 0x3d
    2860:	8d ad       	ldd	r24, Y+61	; 0x3d
    2862:	9e ad       	ldd	r25, Y+62	; 0x3e
    2864:	9a af       	std	Y+58, r25	; 0x3a
    2866:	89 af       	std	Y+57, r24	; 0x39
    2868:	89 ad       	ldd	r24, Y+57	; 0x39
    286a:	9a ad       	ldd	r25, Y+58	; 0x3a
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <LCD_displayCharacter+0x4a6>
    2870:	9a af       	std	Y+58, r25	; 0x3a
    2872:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* set enable bit to low*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	61 e0       	ldi	r22, 0x01	; 1
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	a0 e8       	ldi	r26, 0x80	; 128
    2884:	bf e3       	ldi	r27, 0x3F	; 63
    2886:	8d ab       	std	Y+53, r24	; 0x35
    2888:	9e ab       	std	Y+54, r25	; 0x36
    288a:	af ab       	std	Y+55, r26	; 0x37
    288c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288e:	6d a9       	ldd	r22, Y+53	; 0x35
    2890:	7e a9       	ldd	r23, Y+54	; 0x36
    2892:	8f a9       	ldd	r24, Y+55	; 0x37
    2894:	98 ad       	ldd	r25, Y+56	; 0x38
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	4a ef       	ldi	r20, 0xFA	; 250
    289c:	54 e4       	ldi	r21, 0x44	; 68
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	89 ab       	std	Y+49, r24	; 0x31
    28a8:	9a ab       	std	Y+50, r25	; 0x32
    28aa:	ab ab       	std	Y+51, r26	; 0x33
    28ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ae:	69 a9       	ldd	r22, Y+49	; 0x31
    28b0:	7a a9       	ldd	r23, Y+50	; 0x32
    28b2:	8b a9       	ldd	r24, Y+51	; 0x33
    28b4:	9c a9       	ldd	r25, Y+52	; 0x34
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e8       	ldi	r20, 0x80	; 128
    28bc:	5f e3       	ldi	r21, 0x3F	; 63
    28be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	2c f4       	brge	.+10     	; 0x28d0 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	98 ab       	std	Y+48, r25	; 0x30
    28cc:	8f a7       	std	Y+47, r24	; 0x2f
    28ce:	3f c0       	rjmp	.+126    	; 0x294e <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    28d0:	69 a9       	ldd	r22, Y+49	; 0x31
    28d2:	7a a9       	ldd	r23, Y+50	; 0x32
    28d4:	8b a9       	ldd	r24, Y+51	; 0x33
    28d6:	9c a9       	ldd	r25, Y+52	; 0x34
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	3f ef       	ldi	r19, 0xFF	; 255
    28dc:	4f e7       	ldi	r20, 0x7F	; 127
    28de:	57 e4       	ldi	r21, 0x47	; 71
    28e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e4:	18 16       	cp	r1, r24
    28e6:	4c f5       	brge	.+82     	; 0x293a <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e8:	6d a9       	ldd	r22, Y+53	; 0x35
    28ea:	7e a9       	ldd	r23, Y+54	; 0x36
    28ec:	8f a9       	ldd	r24, Y+55	; 0x37
    28ee:	98 ad       	ldd	r25, Y+56	; 0x38
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e2       	ldi	r20, 0x20	; 32
    28f6:	51 e4       	ldi	r21, 0x41	; 65
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	98 ab       	std	Y+48, r25	; 0x30
    290e:	8f a7       	std	Y+47, r24	; 0x2f
    2910:	0f c0       	rjmp	.+30     	; 0x2930 <LCD_displayCharacter+0x56a>
    2912:	88 ec       	ldi	r24, 0xC8	; 200
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9e a7       	std	Y+46, r25	; 0x2e
    2918:	8d a7       	std	Y+45, r24	; 0x2d
    291a:	8d a5       	ldd	r24, Y+45	; 0x2d
    291c:	9e a5       	ldd	r25, Y+46	; 0x2e
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <LCD_displayCharacter+0x558>
    2922:	9e a7       	std	Y+46, r25	; 0x2e
    2924:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2926:	8f a5       	ldd	r24, Y+47	; 0x2f
    2928:	98 a9       	ldd	r25, Y+48	; 0x30
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	98 ab       	std	Y+48, r25	; 0x30
    292e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2930:	8f a5       	ldd	r24, Y+47	; 0x2f
    2932:	98 a9       	ldd	r25, Y+48	; 0x30
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	69 f7       	brne	.-38     	; 0x2912 <LCD_displayCharacter+0x54c>
    2938:	14 c0       	rjmp	.+40     	; 0x2962 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293a:	69 a9       	ldd	r22, Y+49	; 0x31
    293c:	7a a9       	ldd	r23, Y+50	; 0x32
    293e:	8b a9       	ldd	r24, Y+51	; 0x33
    2940:	9c a9       	ldd	r25, Y+52	; 0x34
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	98 ab       	std	Y+48, r25	; 0x30
    294c:	8f a7       	std	Y+47, r24	; 0x2f
    294e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2950:	98 a9       	ldd	r25, Y+48	; 0x30
    2952:	9c a7       	std	Y+44, r25	; 0x2c
    2954:	8b a7       	std	Y+43, r24	; 0x2b
    2956:	8b a5       	ldd	r24, Y+43	; 0x2b
    2958:	9c a5       	ldd	r25, Y+44	; 0x2c
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <LCD_displayCharacter+0x594>
    295e:	9c a7       	std	Y+44, r25	; 0x2c
    2960:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	61 e0       	ldi	r22, 0x01	; 1
    2966:	41 e0       	ldi	r20, 0x01	; 1
    2968:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	a0 e8       	ldi	r26, 0x80	; 128
    2972:	bf e3       	ldi	r27, 0x3F	; 63
    2974:	8f a3       	std	Y+39, r24	; 0x27
    2976:	98 a7       	std	Y+40, r25	; 0x28
    2978:	a9 a7       	std	Y+41, r26	; 0x29
    297a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6f a1       	ldd	r22, Y+39	; 0x27
    297e:	78 a5       	ldd	r23, Y+40	; 0x28
    2980:	89 a5       	ldd	r24, Y+41	; 0x29
    2982:	9a a5       	ldd	r25, Y+42	; 0x2a
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a ef       	ldi	r20, 0xFA	; 250
    298a:	54 e4       	ldi	r21, 0x44	; 68
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8b a3       	std	Y+35, r24	; 0x23
    2996:	9c a3       	std	Y+36, r25	; 0x24
    2998:	ad a3       	std	Y+37, r26	; 0x25
    299a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    299c:	6b a1       	ldd	r22, Y+35	; 0x23
    299e:	7c a1       	ldd	r23, Y+36	; 0x24
    29a0:	8d a1       	ldd	r24, Y+37	; 0x25
    29a2:	9e a1       	ldd	r25, Y+38	; 0x26
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9a a3       	std	Y+34, r25	; 0x22
    29ba:	89 a3       	std	Y+33, r24	; 0x21
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    29be:	6b a1       	ldd	r22, Y+35	; 0x23
    29c0:	7c a1       	ldd	r23, Y+36	; 0x24
    29c2:	8d a1       	ldd	r24, Y+37	; 0x25
    29c4:	9e a1       	ldd	r25, Y+38	; 0x26
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6f a1       	ldd	r22, Y+39	; 0x27
    29d8:	78 a5       	ldd	r23, Y+40	; 0x28
    29da:	89 a5       	ldd	r24, Y+41	; 0x29
    29dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9a a3       	std	Y+34, r25	; 0x22
    29fc:	89 a3       	std	Y+33, r24	; 0x21
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <LCD_displayCharacter+0x658>
    2a00:	88 ec       	ldi	r24, 0xC8	; 200
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	98 a3       	std	Y+32, r25	; 0x20
    2a06:	8f 8f       	std	Y+31, r24	; 0x1f
    2a08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a0a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_displayCharacter+0x646>
    2a10:	98 a3       	std	Y+32, r25	; 0x20
    2a12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	89 a1       	ldd	r24, Y+33	; 0x21
    2a16:	9a a1       	ldd	r25, Y+34	; 0x22
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9a a3       	std	Y+34, r25	; 0x22
    2a1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a20:	9a a1       	ldd	r25, Y+34	; 0x22
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <LCD_displayCharacter+0x63a>
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	6b a1       	ldd	r22, Y+35	; 0x23
    2a2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9a a3       	std	Y+34, r25	; 0x22
    2a3a:	89 a3       	std	Y+33, r24	; 0x21
    2a3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a40:	9e 8f       	std	Y+30, r25	; 0x1e
    2a42:	8d 8f       	std	Y+29, r24	; 0x1d
    2a44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <LCD_displayCharacter+0x682>
    2a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a4e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(character, 0));
    2a50:	fe 01       	movw	r30, r28
    2a52:	ed 59       	subi	r30, 0x9D	; 157
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	98 2f       	mov	r25, r24
    2a5a:	91 70       	andi	r25, 0x01	; 1
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	64 e0       	ldi	r22, 0x04	; 4
    2a60:	49 2f       	mov	r20, r25
    2a62:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(character, 1));
    2a66:	fe 01       	movw	r30, r28
    2a68:	ed 59       	subi	r30, 0x9D	; 157
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 81       	ld	r24, Z
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	82 70       	andi	r24, 0x02	; 2
    2a74:	90 70       	andi	r25, 0x00	; 0
    2a76:	95 95       	asr	r25
    2a78:	87 95       	ror	r24
    2a7a:	98 2f       	mov	r25, r24
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	65 e0       	ldi	r22, 0x05	; 5
    2a80:	49 2f       	mov	r20, r25
    2a82:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(character, 2));
    2a86:	fe 01       	movw	r30, r28
    2a88:	ed 59       	subi	r30, 0x9D	; 157
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 81       	ld	r24, Z
    2a8e:	88 2f       	mov	r24, r24
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	84 70       	andi	r24, 0x04	; 4
    2a94:	90 70       	andi	r25, 0x00	; 0
    2a96:	95 95       	asr	r25
    2a98:	87 95       	ror	r24
    2a9a:	95 95       	asr	r25
    2a9c:	87 95       	ror	r24
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	66 e0       	ldi	r22, 0x06	; 6
    2aa4:	49 2f       	mov	r20, r25
    2aa6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(character, 3));
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ed 59       	subi	r30, 0x9D	; 157
    2aae:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab0:	80 81       	ld	r24, Z
    2ab2:	88 2f       	mov	r24, r24
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	88 70       	andi	r24, 0x08	; 8
    2ab8:	90 70       	andi	r25, 0x00	; 0
    2aba:	95 95       	asr	r25
    2abc:	87 95       	ror	r24
    2abe:	95 95       	asr	r25
    2ac0:	87 95       	ror	r24
    2ac2:	95 95       	asr	r25
    2ac4:	87 95       	ror	r24
    2ac6:	98 2f       	mov	r25, r24
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	67 e0       	ldi	r22, 0x07	; 7
    2acc:	49 2f       	mov	r20, r25
    2ace:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e8       	ldi	r26, 0x80	; 128
    2ad8:	bf e3       	ldi	r27, 0x3F	; 63
    2ada:	89 8f       	std	Y+25, r24	; 0x19
    2adc:	9a 8f       	std	Y+26, r25	; 0x1a
    2ade:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a ef       	ldi	r20, 0xFA	; 250
    2af0:	54 e4       	ldi	r21, 0x44	; 68
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8d 8b       	std	Y+21, r24	; 0x15
    2afc:	9e 8b       	std	Y+22, r25	; 0x16
    2afe:	af 8b       	std	Y+23, r26	; 0x17
    2b00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b02:	6d 89       	ldd	r22, Y+21	; 0x15
    2b04:	7e 89       	ldd	r23, Y+22	; 0x16
    2b06:	8f 89       	ldd	r24, Y+23	; 0x17
    2b08:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9c 8b       	std	Y+20, r25	; 0x14
    2b20:	8b 8b       	std	Y+19, r24	; 0x13
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2b24:	6d 89       	ldd	r22, Y+21	; 0x15
    2b26:	7e 89       	ldd	r23, Y+22	; 0x16
    2b28:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9c 8b       	std	Y+20, r25	; 0x14
    2b62:	8b 8b       	std	Y+19, r24	; 0x13
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <LCD_displayCharacter+0x7be>
    2b66:	88 ec       	ldi	r24, 0xC8	; 200
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9a 8b       	std	Y+18, r25	; 0x12
    2b6c:	89 8b       	std	Y+17, r24	; 0x11
    2b6e:	89 89       	ldd	r24, Y+17	; 0x11
    2b70:	9a 89       	ldd	r25, Y+18	; 0x12
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_displayCharacter+0x7ac>
    2b76:	9a 8b       	std	Y+18, r25	; 0x12
    2b78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9c 8b       	std	Y+20, r25	; 0x14
    2b82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	9c 89       	ldd	r25, Y+20	; 0x14
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <LCD_displayCharacter+0x7a0>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b90:	7e 89       	ldd	r23, Y+22	; 0x16
    2b92:	8f 89       	ldd	r24, Y+23	; 0x17
    2b94:	98 8d       	ldd	r25, Y+24	; 0x18
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ba0:	8b 8b       	std	Y+19, r24	; 0x13
    2ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba6:	98 8b       	std	Y+16, r25	; 0x10
    2ba8:	8f 87       	std	Y+15, r24	; 0x0f
    2baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bac:	98 89       	ldd	r25, Y+16	; 0x10
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <LCD_displayCharacter+0x7e8>
    2bb2:	98 8b       	std	Y+16, r25	; 0x10
    2bb4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	61 e0       	ldi	r22, 0x01	; 1
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <GPIO_writePin>
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	a0 e8       	ldi	r26, 0x80	; 128
    2bc6:	bf e3       	ldi	r27, 0x3F	; 63
    2bc8:	8b 87       	std	Y+11, r24	; 0x0b
    2bca:	9c 87       	std	Y+12, r25	; 0x0c
    2bcc:	ad 87       	std	Y+13, r26	; 0x0d
    2bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	4a ef       	ldi	r20, 0xFA	; 250
    2bde:	54 e4       	ldi	r21, 0x44	; 68
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	8f 83       	std	Y+7, r24	; 0x07
    2bea:	98 87       	std	Y+8, r25	; 0x08
    2bec:	a9 87       	std	Y+9, r26	; 0x09
    2bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf2:	78 85       	ldd	r23, Y+8	; 0x08
    2bf4:	89 85       	ldd	r24, Y+9	; 0x09
    2bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	2c f4       	brge	.+10     	; 0x2c12 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	3f c0       	rjmp	.+126    	; 0x2c90 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2c12:	6f 81       	ldd	r22, Y+7	; 0x07
    2c14:	78 85       	ldd	r23, Y+8	; 0x08
    2c16:	89 85       	ldd	r24, Y+9	; 0x09
    2c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	3f ef       	ldi	r19, 0xFF	; 255
    2c1e:	4f e7       	ldi	r20, 0x7F	; 127
    2c20:	57 e4       	ldi	r21, 0x47	; 71
    2c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c26:	18 16       	cp	r1, r24
    2c28:	4c f5       	brge	.+82     	; 0x2c7c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e2       	ldi	r20, 0x20	; 32
    2c38:	51 e4       	ldi	r21, 0x41	; 65
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
    2c52:	0f c0       	rjmp	.+30     	; 0x2c72 <LCD_displayCharacter+0x8ac>
    2c54:	88 ec       	ldi	r24, 0xC8	; 200
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	9c 83       	std	Y+4, r25	; 0x04
    2c5a:	8b 83       	std	Y+3, r24	; 0x03
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <LCD_displayCharacter+0x89a>
    2c64:	9c 83       	std	Y+4, r25	; 0x04
    2c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c68:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	9e 83       	std	Y+6, r25	; 0x06
    2c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c72:	8d 81       	ldd	r24, Y+5	; 0x05
    2c74:	9e 81       	ldd	r25, Y+6	; 0x06
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	69 f7       	brne	.-38     	; 0x2c54 <LCD_displayCharacter+0x88e>
    2c7a:	14 c0       	rjmp	.+40     	; 0x2ca4 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	8d 81       	ldd	r24, Y+5	; 0x05
    2c92:	9e 81       	ldd	r25, Y+6	; 0x06
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <LCD_displayCharacter+0x8d6>
    2ca0:	9a 83       	std	Y+2, r25	; 0x02
    2ca2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2ca4:	cd 59       	subi	r28, 0x9D	; 157
    2ca6:	df 4f       	sbci	r29, 0xFF	; 255
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	08 95       	ret

00002cbc <LCD_displayString>:
/*
 * Description :
 * display a string on the LCD;
 */
void LCD_displayString(const uint8* string)
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <LCD_displayString+0x6>
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	9a 83       	std	Y+2, r25	; 0x02
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	0a c0       	rjmp	.+20     	; 0x2ce0 <LCD_displayString+0x24>
	for(; *string!='\0'; string++)
	{
		LCD_displayCharacter(*string);
    2ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    2cce:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd0:	80 81       	ld	r24, Z
    2cd2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_displayCharacter>
 * Description :
 * display a string on the LCD;
 */
void LCD_displayString(const uint8* string)
{
	for(; *string!='\0'; string++)
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cda:	01 96       	adiw	r24, 0x01	; 1
    2cdc:	9a 83       	std	Y+2, r25	; 0x02
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce4:	80 81       	ld	r24, Z
    2ce6:	88 23       	and	r24, r24
    2ce8:	89 f7       	brne	.-30     	; 0x2ccc <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*string);
	}
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * display a string in a specific location
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column,const uint8* string)
{
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <LCD_displayStringRowColumn+0x6>
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <LCD_displayStringRowColumn+0x8>
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	6a 83       	std	Y+2, r22	; 0x02
    2d04:	5c 83       	std	Y+4, r21	; 0x04
    2d06:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column);
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	6a 81       	ldd	r22, Y+2	; 0x02
    2d0c:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCD_moveCursor>
	LCD_displayString(string);
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	9c 81       	ldd	r25, Y+4	; 0x04
    2d14:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <LCD_displayString>
}
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <LCD_integerToString>:
/*
 * Description :
 * convert integers to characters then display it
 */
void LCD_integerToString(int num)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	62 97       	sbiw	r28, 0x12	; 18
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	9a 8b       	std	Y+18, r25	; 0x12
    2d3c:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(num, buff, 10);
    2d3e:	89 89       	ldd	r24, Y+17	; 0x11
    2d40:	9a 89       	ldd	r25, Y+18	; 0x12
    2d42:	9e 01       	movw	r18, r28
    2d44:	2f 5f       	subi	r18, 0xFF	; 255
    2d46:	3f 4f       	sbci	r19, 0xFF	; 255
    2d48:	b9 01       	movw	r22, r18
    2d4a:	4a e0       	ldi	r20, 0x0A	; 10
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	0e 94 ce 19 	call	0x339c	; 0x339c <itoa>
	LCD_displayString((const uint8*)buff);
    2d52:	ce 01       	movw	r24, r28
    2d54:	01 96       	adiw	r24, 0x01	; 1
    2d56:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <LCD_displayString>
}
    2d5a:	62 96       	adiw	r28, 0x12	; 18
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <LCD_clearScreen>:
/*
 * Description :
 * clear the screen of the LCD
 */
void LCD_clearScreen(void)
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
}
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <LCD_moveCursor>:
/*
 * Description :
 * move the LCD cursor to the desired location
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	00 d0       	rcall	.+0      	; 0x2d86 <LCD_moveCursor+0x6>
    2d86:	00 d0       	rcall	.+0      	; 0x2d88 <LCD_moveCursor+0x8>
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	3c 83       	std	Y+4, r19	; 0x04
    2d98:	2b 83       	std	Y+3, r18	; 0x03
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	81 30       	cpi	r24, 0x01	; 1
    2da0:	91 05       	cpc	r25, r1
    2da2:	d1 f0       	breq	.+52     	; 0x2dd8 <LCD_moveCursor+0x58>
    2da4:	2b 81       	ldd	r18, Y+3	; 0x03
    2da6:	3c 81       	ldd	r19, Y+4	; 0x04
    2da8:	22 30       	cpi	r18, 0x02	; 2
    2daa:	31 05       	cpc	r19, r1
    2dac:	2c f4       	brge	.+10     	; 0x2db8 <LCD_moveCursor+0x38>
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	9c 81       	ldd	r25, Y+4	; 0x04
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	61 f0       	breq	.+24     	; 0x2dce <LCD_moveCursor+0x4e>
    2db6:	21 c0       	rjmp	.+66     	; 0x2dfa <LCD_moveCursor+0x7a>
    2db8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dba:	3c 81       	ldd	r19, Y+4	; 0x04
    2dbc:	22 30       	cpi	r18, 0x02	; 2
    2dbe:	31 05       	cpc	r19, r1
    2dc0:	89 f0       	breq	.+34     	; 0x2de4 <LCD_moveCursor+0x64>
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc6:	83 30       	cpi	r24, 0x03	; 3
    2dc8:	91 05       	cpc	r25, r1
    2dca:	91 f0       	breq	.+36     	; 0x2df0 <LCD_moveCursor+0x70>
    2dcc:	16 c0       	rjmp	.+44     	; 0x2dfa <LCD_moveCursor+0x7a>
	{
	case 0:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | column);
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	80 68       	ori	r24, 0x80	; 128
    2dd2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
    2dd6:	11 c0       	rjmp	.+34     	; 0x2dfa <LCD_moveCursor+0x7a>
		break;
	case 1:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x40));
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	80 5c       	subi	r24, 0xC0	; 192
    2ddc:	80 68       	ori	r24, 0x80	; 128
    2dde:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
    2de2:	0b c0       	rjmp	.+22     	; 0x2dfa <LCD_moveCursor+0x7a>
		break;
	case 2:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x10));
    2de4:	8a 81       	ldd	r24, Y+2	; 0x02
    2de6:	80 5f       	subi	r24, 0xF0	; 240
    2de8:	80 68       	ori	r24, 0x80	; 128
    2dea:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
    2dee:	05 c0       	rjmp	.+10     	; 0x2dfa <LCD_moveCursor+0x7a>
		break;
	case 3:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x50));
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	80 5b       	subi	r24, 0xB0	; 176
    2df4:	80 68       	ori	r24, 0x80	; 128
    2df6:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
		break;
	}
}
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <PWM_Timer0_Start>:
 * initialize timer0 with non-inverting PWM mode
 * setup duty cycle
 * generate 500hz frequency
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	0f 92       	push	r0
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	89 83       	std	Y+1, r24	; 0x01
	/* setup OC0 pin as output */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	63 e0       	ldi	r22, 0x03	; 3
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <GPIO_setupPinDirection>
	/* select non-inverting fast PWM mode with prescaler F_CPU/8 */
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01);
    2e1e:	e3 e5       	ldi	r30, 0x53	; 83
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	8a e6       	ldi	r24, 0x6A	; 106
    2e24:	80 83       	st	Z, r24
	TCNT0=0;
    2e26:	e2 e5       	ldi	r30, 0x52	; 82
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	10 82       	st	Z, r1
	OCR0=((uint16)duty_cycle * 255) / 100;
    2e2c:	ec e5       	ldi	r30, 0x5C	; 92
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	48 2f       	mov	r20, r24
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	ca 01       	movw	r24, r20
    2e38:	9c 01       	movw	r18, r24
    2e3a:	22 0f       	add	r18, r18
    2e3c:	33 1f       	adc	r19, r19
    2e3e:	c9 01       	movw	r24, r18
    2e40:	96 95       	lsr	r25
    2e42:	98 2f       	mov	r25, r24
    2e44:	88 27       	eor	r24, r24
    2e46:	97 95       	ror	r25
    2e48:	87 95       	ror	r24
    2e4a:	82 1b       	sub	r24, r18
    2e4c:	93 0b       	sbc	r25, r19
    2e4e:	84 0f       	add	r24, r20
    2e50:	95 1f       	adc	r25, r21
    2e52:	24 e6       	ldi	r18, 0x64	; 100
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	b9 01       	movw	r22, r18
    2e58:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__udivmodhi4>
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	80 83       	st	Z, r24
}
    2e60:	0f 90       	pop	r0
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <__vector_7>:
 * 						  Interrupt Service Routines
 *******************************************************************************/
static void  (*g_callBack)(void);
/* ISR for compare match interrupt */
ISR(TIMER1_COMPA_vect)
{
    2e68:	1f 92       	push	r1
    2e6a:	0f 92       	push	r0
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	0f 92       	push	r0
    2e70:	11 24       	eor	r1, r1
    2e72:	2f 93       	push	r18
    2e74:	3f 93       	push	r19
    2e76:	4f 93       	push	r20
    2e78:	5f 93       	push	r21
    2e7a:	6f 93       	push	r22
    2e7c:	7f 93       	push	r23
    2e7e:	8f 93       	push	r24
    2e80:	9f 93       	push	r25
    2e82:	af 93       	push	r26
    2e84:	bf 93       	push	r27
    2e86:	ef 93       	push	r30
    2e88:	ff 93       	push	r31
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
	(*g_callBack)();
    2e92:	e0 91 68 00 	lds	r30, 0x0068
    2e96:	f0 91 69 00 	lds	r31, 0x0069
    2e9a:	09 95       	icall
}
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	ff 91       	pop	r31
    2ea2:	ef 91       	pop	r30
    2ea4:	bf 91       	pop	r27
    2ea6:	af 91       	pop	r26
    2ea8:	9f 91       	pop	r25
    2eaa:	8f 91       	pop	r24
    2eac:	7f 91       	pop	r23
    2eae:	6f 91       	pop	r22
    2eb0:	5f 91       	pop	r21
    2eb2:	4f 91       	pop	r20
    2eb4:	3f 91       	pop	r19
    2eb6:	2f 91       	pop	r18
    2eb8:	0f 90       	pop	r0
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	0f 90       	pop	r0
    2ebe:	1f 90       	pop	r1
    2ec0:	18 95       	reti

00002ec2 <__vector_9>:
/* ISR for overflow interrupt */
ISR(TIMER1_OVF_vect)
{
    2ec2:	1f 92       	push	r1
    2ec4:	0f 92       	push	r0
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	0f 92       	push	r0
    2eca:	11 24       	eor	r1, r1
    2ecc:	2f 93       	push	r18
    2ece:	3f 93       	push	r19
    2ed0:	4f 93       	push	r20
    2ed2:	5f 93       	push	r21
    2ed4:	6f 93       	push	r22
    2ed6:	7f 93       	push	r23
    2ed8:	8f 93       	push	r24
    2eda:	9f 93       	push	r25
    2edc:	af 93       	push	r26
    2ede:	bf 93       	push	r27
    2ee0:	ef 93       	push	r30
    2ee2:	ff 93       	push	r31
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
	(*g_callBack)();
    2eec:	e0 91 68 00 	lds	r30, 0x0068
    2ef0:	f0 91 69 00 	lds	r31, 0x0069
    2ef4:	09 95       	icall
}
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	ff 91       	pop	r31
    2efc:	ef 91       	pop	r30
    2efe:	bf 91       	pop	r27
    2f00:	af 91       	pop	r26
    2f02:	9f 91       	pop	r25
    2f04:	8f 91       	pop	r24
    2f06:	7f 91       	pop	r23
    2f08:	6f 91       	pop	r22
    2f0a:	5f 91       	pop	r21
    2f0c:	4f 91       	pop	r20
    2f0e:	3f 91       	pop	r19
    2f10:	2f 91       	pop	r18
    2f12:	0f 90       	pop	r0
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	0f 90       	pop	r0
    2f18:	1f 90       	pop	r1
    2f1a:	18 95       	reti

00002f1c <Timer1_init>:
/*
 * Description :
 * a function to initiate timer1 with desired configuration(prescaler, mode, initial register values)
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <Timer1_init+0x6>
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	89 83       	std	Y+1, r24	; 0x01
	/* initializing timer 1 counter register */
	TCNT1 = Config_Ptr->initial_value;
    2f2a:	ac e4       	ldi	r26, 0x4C	; 76
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f30:	fa 81       	ldd	r31, Y+2	; 0x02
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	11 96       	adiw	r26, 0x01	; 1
    2f38:	9c 93       	st	X, r25
    2f3a:	8e 93       	st	-X, r24
	/* initializing compare register if compare mode specified */
	if(Config_Ptr->mode == COMPARE)
    2f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f40:	85 81       	ldd	r24, Z+5	; 0x05
    2f42:	81 30       	cpi	r24, 0x01	; 1
    2f44:	89 f4       	brne	.+34     	; 0x2f68 <Timer1_init+0x4c>
	{
		OCR1A = Config_Ptr->compare_value;
    2f46:	aa e4       	ldi	r26, 0x4A	; 74
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	11 96       	adiw	r26, 0x01	; 1
    2f54:	9c 93       	st	X, r25
    2f56:	8e 93       	st	-X, r24
		TIMSK|=(1<<OCIE1A);
    2f58:	a9 e5       	ldi	r26, 0x59	; 89
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e9 e5       	ldi	r30, 0x59	; 89
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	80 61       	ori	r24, 0x10	; 16
    2f64:	8c 93       	st	X, r24
    2f66:	07 c0       	rjmp	.+14     	; 0x2f76 <Timer1_init+0x5a>
	}
	else
	{
		TIMSK|=(1<<TOIE1);
    2f68:	a9 e5       	ldi	r26, 0x59	; 89
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	e9 e5       	ldi	r30, 0x59	; 89
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	84 60       	ori	r24, 0x04	; 4
    2f74:	8c 93       	st	X, r24
	}
	/* set FOC1 to 1 for non_PWM mode */
	TCCR1A|=(1<<FOC1A) | (1<<FOC1B);
    2f76:	af e4       	ldi	r26, 0x4F	; 79
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	ef e4       	ldi	r30, 0x4F	; 79
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	8c 60       	ori	r24, 0x0C	; 12
    2f82:	8c 93       	st	X, r24
	/* set prescaler and choose mode of operation */
	/* note : WGM!0 and WGM11 are set to 0 in both normal and compare mode */
	TCCR1B= Config_Ptr->prescaler | (Config_Ptr->mode<<WGM12);
    2f84:	ae e4       	ldi	r26, 0x4E	; 78
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8c:	84 81       	ldd	r24, Z+4	; 0x04
    2f8e:	28 2f       	mov	r18, r24
    2f90:	e9 81       	ldd	r30, Y+1	; 0x01
    2f92:	fa 81       	ldd	r31, Y+2	; 0x02
    2f94:	85 81       	ldd	r24, Z+5	; 0x05
    2f96:	88 2f       	mov	r24, r24
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	88 0f       	add	r24, r24
    2f9c:	99 1f       	adc	r25, r25
    2f9e:	88 0f       	add	r24, r24
    2fa0:	99 1f       	adc	r25, r25
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	82 2b       	or	r24, r18
    2fa8:	8c 93       	st	X, r24
}
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <Timer1_deInit>:
/*
 * Description :
 * a function to deactivate timer1
 */
void Timer1_deInit(void)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2fbc:	ef e4       	ldi	r30, 0x4F	; 79
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	10 82       	st	Z, r1
	TCCR1B=0;
    2fc2:	ee e4       	ldi	r30, 0x4E	; 78
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	10 82       	st	Z, r1
}
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	08 95       	ret

00002fce <Timer1_setCallBack>:
/*
 * Description :
 * a function to set the call back function pointer
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    2fce:	df 93       	push	r29
    2fd0:	cf 93       	push	r28
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <Timer1_setCallBack+0x6>
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	9a 83       	std	Y+2, r25	; 0x02
    2fda:	89 83       	std	Y+1, r24	; 0x01
	g_callBack=a_ptr;
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
    2fde:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe0:	90 93 69 00 	sts	0x0069, r25
    2fe4:	80 93 68 00 	sts	0x0068, r24
}
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	08 95       	ret

00002ff2 <TWI_init>:
/*
 * Description :
 * a function to initialize TWI
 */
void TWI_init(const TWI_ConfigType* Config_Ptr)
{
    2ff2:	0f 93       	push	r16
    2ff4:	1f 93       	push	r17
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	00 d0       	rcall	.+0      	; 0x2ffc <TWI_init+0xa>
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
    3000:	9a 83       	std	Y+2, r25	; 0x02
    3002:	89 83       	std	Y+1, r24	; 0x01
	/* set bit rate */
	TWBR = (((F_CPU / Config_Ptr->bit_rate) / 1000) - 16) / 2;
    3004:	00 e2       	ldi	r16, 0x20	; 32
    3006:	10 e0       	ldi	r17, 0x00	; 0
    3008:	e9 81       	ldd	r30, Y+1	; 0x01
    300a:	fa 81       	ldd	r31, Y+2	; 0x02
    300c:	81 81       	ldd	r24, Z+1	; 0x01
    300e:	92 81       	ldd	r25, Z+2	; 0x02
    3010:	9c 01       	movw	r18, r24
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	80 e4       	ldi	r24, 0x40	; 64
    3018:	9f e1       	ldi	r25, 0x1F	; 31
    301a:	a0 e0       	ldi	r26, 0x00	; 0
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	0e 94 75 19 	call	0x32ea	; 0x32ea <__udivmodsi4>
    3026:	da 01       	movw	r26, r20
    3028:	c9 01       	movw	r24, r18
    302a:	40 97       	sbiw	r24, 0x10	; 16
    302c:	a1 09       	sbc	r26, r1
    302e:	b1 09       	sbc	r27, r1
    3030:	b6 95       	lsr	r27
    3032:	a7 95       	ror	r26
    3034:	97 95       	ror	r25
    3036:	87 95       	ror	r24
    3038:	f8 01       	movw	r30, r16
    303a:	80 83       	st	Z, r24
	/* set address for slave mode */
	TWAR = Config_Ptr->address << 1;
    303c:	a2 e2       	ldi	r26, 0x22	; 34
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e9 81       	ldd	r30, Y+1	; 0x01
    3042:	fa 81       	ldd	r31, Y+2	; 0x02
    3044:	80 81       	ld	r24, Z
    3046:	88 0f       	add	r24, r24
    3048:	8c 93       	st	X, r24
	/* set prescaller 1 */
	TWSR = 0;
    304a:	e1 e2       	ldi	r30, 0x21	; 33
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	10 82       	st	Z, r1
	/* enable TWI */
	TWCR = (1<<TWEN);
    3050:	e6 e5       	ldi	r30, 0x56	; 86
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	84 e0       	ldi	r24, 0x04	; 4
    3056:	80 83       	st	Z, r24
}
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	08 95       	ret

00003066 <TWI_start>:
/*
 * Description :
 * send start bit
 */
void TWI_start()
{
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag
	 * enable TWI
	 * set start condition to 1 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTA);
    306e:	e6 e5       	ldi	r30, 0x56	; 86
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	84 ea       	ldi	r24, 0xA4	; 164
    3074:	80 83       	st	Z, r24
	/* wait until start bit is sent */
	while(BIT_IS_CLEAR(TWCR, TWINT));
    3076:	e6 e5       	ldi	r30, 0x56	; 86
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	88 23       	and	r24, r24
    307e:	dc f7       	brge	.-10     	; 0x3076 <TWI_start+0x10>
}
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <TWI_stop>:
/*
 * Description :
 * send stop bit
 */
void TWI_stop()
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag
	 * enable TWI
	 * set stop condition to 1 */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO);
    308e:	e6 e5       	ldi	r30, 0x56	; 86
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	84 e9       	ldi	r24, 0x94	; 148
    3094:	80 83       	st	Z, r24
}
    3096:	cf 91       	pop	r28
    3098:	df 91       	pop	r29
    309a:	08 95       	ret

0000309c <TWI_writeByte>:
/*
 * Description:
 * a function to send byte
 */
void TWI_writeByte(uint8 data)
{
    309c:	df 93       	push	r29
    309e:	cf 93       	push	r28
    30a0:	0f 92       	push	r0
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	89 83       	std	Y+1, r24	; 0x01
	/* send data */
	TWDR= data;
    30a8:	e3 e2       	ldi	r30, 0x23	; 35
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	80 83       	st	Z, r24
	/* Clear interrupt flag
	 * enable TWI */
	TWCR = (1<<TWEN) | (1<<TWINT);
    30b0:	e6 e5       	ldi	r30, 0x56	; 86
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	84 e8       	ldi	r24, 0x84	; 132
    30b6:	80 83       	st	Z, r24
	/* wait until data is sent */
	while(BIT_IS_CLEAR(TWCR, TWINT));
    30b8:	e6 e5       	ldi	r30, 0x56	; 86
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	88 23       	and	r24, r24
    30c0:	dc f7       	brge	.-10     	; 0x30b8 <TWI_writeByte+0x1c>
}
    30c2:	0f 90       	pop	r0
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	08 95       	ret

000030ca <TWI_readByteWithACK>:
/*
 * Description:
 * a function to receive byte and send acknowledge
 */
uint8 TWI_readByteWithACK()
{
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag
	 * enable TWI
	 * enable acknowledge bit */
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
    30d2:	e6 e5       	ldi	r30, 0x56	; 86
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	84 ec       	ldi	r24, 0xC4	; 196
    30d8:	80 83       	st	Z, r24
	/* wait until data is received */
	while(BIT_IS_CLEAR(TWCR, TWINT));
    30da:	e6 e5       	ldi	r30, 0x56	; 86
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	88 23       	and	r24, r24
    30e2:	dc f7       	brge	.-10     	; 0x30da <TWI_readByteWithACK+0x10>
	/* return data */
	return TWDR;
    30e4:	e3 e2       	ldi	r30, 0x23	; 35
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
}
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <TWI_readByteWithNACK>:
/*
 * Description:
 * a function to receive byte without sending acknowledge
 */
uint8 TWI_readByteWithNACK()
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
	/* Clear interrupt flag
	 * enable TWI */
	TWCR = (1<<TWEN) | (1<<TWINT);
    30f8:	e6 e5       	ldi	r30, 0x56	; 86
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	84 e8       	ldi	r24, 0x84	; 132
    30fe:	80 83       	st	Z, r24
	/* wait until data is received */
	while(BIT_IS_CLEAR(TWCR, TWINT));
    3100:	e6 e5       	ldi	r30, 0x56	; 86
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	88 23       	and	r24, r24
    3108:	dc f7       	brge	.-10     	; 0x3100 <TWI_readByteWithNACK+0x10>
	/* return data */
	return TWDR;
    310a:	e3 e2       	ldi	r30, 0x23	; 35
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
}
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <TWI_getStatus>:
/*
 * Description:
 * a function to get the status of the last operation
 */
uint8 TWI_getStatus()
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
	/* return the 5 bits status */
	return (TWSR & 0xF8);
    311e:	e1 e2       	ldi	r30, 0x21	; 33
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	88 7f       	andi	r24, 0xF8	; 248
}
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <UART_init>:
/*
 * Description :
 * initialize the UART with the required baud rate and frame
 */
void UART_init(const UART_ConfigType* config)
{
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	00 d0       	rcall	.+0      	; 0x3132 <UART_init+0x6>
    3132:	00 d0       	rcall	.+0      	; 0x3134 <UART_init+0x8>
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 baud_value;
	/* double transmission speed */
	UCSRA=(1<<U2X);
    313c:	eb e2       	ldi	r30, 0x2B	; 43
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	82 e0       	ldi	r24, 0x02	; 2
    3142:	80 83       	st	Z, r24
	/* enable data transmission and receiving and disabling interrupts */
	UCSRB=(1<<TXEN)|(1<<RXEN);
    3144:	ea e2       	ldi	r30, 0x2A	; 42
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	88 e1       	ldi	r24, 0x18	; 24
    314a:	80 83       	st	Z, r24
	/* URSEL must be 1 to write in register
	 * selecting frame characteristics
	 */
	UCSRC=(1<<URSEL)|(config->parity<<4)|(config->stop_bits<<3)|(config->character_size<<1);
    314c:	a0 e4       	ldi	r26, 0x40	; 64
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	eb 81       	ldd	r30, Y+3	; 0x03
    3152:	fc 81       	ldd	r31, Y+4	; 0x04
    3154:	85 81       	ldd	r24, Z+5	; 0x05
    3156:	88 2f       	mov	r24, r24
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	82 95       	swap	r24
    315c:	92 95       	swap	r25
    315e:	90 7f       	andi	r25, 0xF0	; 240
    3160:	98 27       	eor	r25, r24
    3162:	80 7f       	andi	r24, 0xF0	; 240
    3164:	98 27       	eor	r25, r24
    3166:	28 2f       	mov	r18, r24
    3168:	20 68       	ori	r18, 0x80	; 128
    316a:	eb 81       	ldd	r30, Y+3	; 0x03
    316c:	fc 81       	ldd	r31, Y+4	; 0x04
    316e:	86 81       	ldd	r24, Z+6	; 0x06
    3170:	88 2f       	mov	r24, r24
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	88 0f       	add	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	28 2b       	or	r18, r24
    3182:	eb 81       	ldd	r30, Y+3	; 0x03
    3184:	fc 81       	ldd	r31, Y+4	; 0x04
    3186:	84 81       	ldd	r24, Z+4	; 0x04
    3188:	88 2f       	mov	r24, r24
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	82 2b       	or	r24, r18
    3192:	8c 93       	st	X, r24
	/* calculating the value to achieve the required baud rate */
	baud_value=(uint16)((F_CPU / (config->baudRate * 8)) - 1);
    3194:	eb 81       	ldd	r30, Y+3	; 0x03
    3196:	fc 81       	ldd	r31, Y+4	; 0x04
    3198:	80 81       	ld	r24, Z
    319a:	91 81       	ldd	r25, Z+1	; 0x01
    319c:	a2 81       	ldd	r26, Z+2	; 0x02
    319e:	b3 81       	ldd	r27, Z+3	; 0x03
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	aa 1f       	adc	r26, r26
    31a6:	bb 1f       	adc	r27, r27
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	aa 1f       	adc	r26, r26
    31ae:	bb 1f       	adc	r27, r27
    31b0:	88 0f       	add	r24, r24
    31b2:	99 1f       	adc	r25, r25
    31b4:	aa 1f       	adc	r26, r26
    31b6:	bb 1f       	adc	r27, r27
    31b8:	9c 01       	movw	r18, r24
    31ba:	ad 01       	movw	r20, r26
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	92 e1       	ldi	r25, 0x12	; 18
    31c0:	aa e7       	ldi	r26, 0x7A	; 122
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 75 19 	call	0x32ea	; 0x32ea <__udivmodsi4>
    31cc:	da 01       	movw	r26, r20
    31ce:	c9 01       	movw	r24, r18
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	9a 83       	std	Y+2, r25	; 0x02
    31d4:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=baud_value;
    31d6:	e9 e2       	ldi	r30, 0x29	; 41
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	80 83       	st	Z, r24
	UBRRH=(baud_value>>8);
    31de:	e0 e4       	ldi	r30, 0x40	; 64
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	9a 81       	ldd	r25, Y+2	; 0x02
    31e6:	89 2f       	mov	r24, r25
    31e8:	99 27       	eor	r25, r25
    31ea:	80 83       	st	Z, r24
}
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	08 95       	ret

000031fa <UART_sendByte>:
/*
 * Description :
 * Function to send a byte
 */
void UART_sendByte(uint8 data)
{
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	0f 92       	push	r0
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	89 83       	std	Y+1, r24	; 0x01
	/* wait until transmission register is empty */
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    3206:	eb e2       	ldi	r30, 0x2B	; 43
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	88 2f       	mov	r24, r24
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	80 72       	andi	r24, 0x20	; 32
    3212:	90 70       	andi	r25, 0x00	; 0
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	b9 f3       	breq	.-18     	; 0x3206 <UART_sendByte+0xc>
	/* send the data */
	UDR=data;
    3218:	ec e2       	ldi	r30, 0x2C	; 44
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	80 83       	st	Z, r24
}
    3220:	0f 90       	pop	r0
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	08 95       	ret

00003228 <UART_receiveByte>:
/*
 * Description :
 * Function to read a received byte
 */
uint8 UART_receiveByte(void)
{
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
	/* wait until the entire bit is received */
	while(BIT_IS_CLEAR(UCSRA, RXC));
    3230:	eb e2       	ldi	r30, 0x2B	; 43
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	80 81       	ld	r24, Z
    3236:	88 23       	and	r24, r24
    3238:	dc f7       	brge	.-10     	; 0x3230 <UART_receiveByte+0x8>
	/* read the data */
	return UDR;
    323a:	ec e2       	ldi	r30, 0x2C	; 44
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
}
    3240:	cf 91       	pop	r28
    3242:	df 91       	pop	r29
    3244:	08 95       	ret

00003246 <UART_sendString>:
/*
 * Description :
 * Function to send a String
 */
void UART_sendString(uint8* str)
{
    3246:	df 93       	push	r29
    3248:	cf 93       	push	r28
    324a:	00 d0       	rcall	.+0      	; 0x324c <UART_sendString+0x6>
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	9a 83       	std	Y+2, r25	; 0x02
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	0a c0       	rjmp	.+20     	; 0x326a <UART_sendString+0x24>
	for(; *str!='\0'; str++)
	{
		UART_sendByte(*str);
    3256:	e9 81       	ldd	r30, Y+1	; 0x01
    3258:	fa 81       	ldd	r31, Y+2	; 0x02
    325a:	80 81       	ld	r24, Z
    325c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <UART_sendByte>
 * Description :
 * Function to send a String
 */
void UART_sendString(uint8* str)
{
	for(; *str!='\0'; str++)
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	01 96       	adiw	r24, 0x01	; 1
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	e9 81       	ldd	r30, Y+1	; 0x01
    326c:	fa 81       	ldd	r31, Y+2	; 0x02
    326e:	80 81       	ld	r24, Z
    3270:	88 23       	and	r24, r24
    3272:	89 f7       	brne	.-30     	; 0x3256 <UART_sendString+0x10>
	{
		UART_sendByte(*str);
	}
}
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <UART_receiveString>:
/*
 * Description :
 * Function to read a received String
 */
void UART_receiveString(uint8* str)
{
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	00 d0       	rcall	.+0      	; 0x3284 <UART_receiveString+0x6>
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	9a 83       	std	Y+2, r25	; 0x02
    328a:	89 83       	std	Y+1, r24	; 0x01

	/* receive data until the stop byte agreed upon*/
	do
	{
		*str=UART_receiveByte();
    328c:	0e 94 14 19 	call	0x3228	; 0x3228 <UART_receiveByte>
    3290:	e9 81       	ldd	r30, Y+1	; 0x01
    3292:	fa 81       	ldd	r31, Y+2	; 0x02
    3294:	80 83       	st	Z, r24
		str++;
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
	}while(*(str-1)!='#');
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	fc 01       	movw	r30, r24
    32a6:	31 97       	sbiw	r30, 0x01	; 1
    32a8:	80 81       	ld	r24, Z
    32aa:	83 32       	cpi	r24, 0x23	; 35
    32ac:	79 f7       	brne	.-34     	; 0x328c <UART_receiveString+0xe>
	/* replace the stop byte with null */
	*(str-1)='\0';
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	9a 81       	ldd	r25, Y+2	; 0x02
    32b2:	fc 01       	movw	r30, r24
    32b4:	31 97       	sbiw	r30, 0x01	; 1
    32b6:	10 82       	st	Z, r1
}
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <__udivmodhi4>:
    32c2:	aa 1b       	sub	r26, r26
    32c4:	bb 1b       	sub	r27, r27
    32c6:	51 e1       	ldi	r21, 0x11	; 17
    32c8:	07 c0       	rjmp	.+14     	; 0x32d8 <__udivmodhi4_ep>

000032ca <__udivmodhi4_loop>:
    32ca:	aa 1f       	adc	r26, r26
    32cc:	bb 1f       	adc	r27, r27
    32ce:	a6 17       	cp	r26, r22
    32d0:	b7 07       	cpc	r27, r23
    32d2:	10 f0       	brcs	.+4      	; 0x32d8 <__udivmodhi4_ep>
    32d4:	a6 1b       	sub	r26, r22
    32d6:	b7 0b       	sbc	r27, r23

000032d8 <__udivmodhi4_ep>:
    32d8:	88 1f       	adc	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	5a 95       	dec	r21
    32de:	a9 f7       	brne	.-22     	; 0x32ca <__udivmodhi4_loop>
    32e0:	80 95       	com	r24
    32e2:	90 95       	com	r25
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	08 95       	ret

000032ea <__udivmodsi4>:
    32ea:	a1 e2       	ldi	r26, 0x21	; 33
    32ec:	1a 2e       	mov	r1, r26
    32ee:	aa 1b       	sub	r26, r26
    32f0:	bb 1b       	sub	r27, r27
    32f2:	fd 01       	movw	r30, r26
    32f4:	0d c0       	rjmp	.+26     	; 0x3310 <__udivmodsi4_ep>

000032f6 <__udivmodsi4_loop>:
    32f6:	aa 1f       	adc	r26, r26
    32f8:	bb 1f       	adc	r27, r27
    32fa:	ee 1f       	adc	r30, r30
    32fc:	ff 1f       	adc	r31, r31
    32fe:	a2 17       	cp	r26, r18
    3300:	b3 07       	cpc	r27, r19
    3302:	e4 07       	cpc	r30, r20
    3304:	f5 07       	cpc	r31, r21
    3306:	20 f0       	brcs	.+8      	; 0x3310 <__udivmodsi4_ep>
    3308:	a2 1b       	sub	r26, r18
    330a:	b3 0b       	sbc	r27, r19
    330c:	e4 0b       	sbc	r30, r20
    330e:	f5 0b       	sbc	r31, r21

00003310 <__udivmodsi4_ep>:
    3310:	66 1f       	adc	r22, r22
    3312:	77 1f       	adc	r23, r23
    3314:	88 1f       	adc	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	1a 94       	dec	r1
    331a:	69 f7       	brne	.-38     	; 0x32f6 <__udivmodsi4_loop>
    331c:	60 95       	com	r22
    331e:	70 95       	com	r23
    3320:	80 95       	com	r24
    3322:	90 95       	com	r25
    3324:	9b 01       	movw	r18, r22
    3326:	ac 01       	movw	r20, r24
    3328:	bd 01       	movw	r22, r26
    332a:	cf 01       	movw	r24, r30
    332c:	08 95       	ret

0000332e <__prologue_saves__>:
    332e:	2f 92       	push	r2
    3330:	3f 92       	push	r3
    3332:	4f 92       	push	r4
    3334:	5f 92       	push	r5
    3336:	6f 92       	push	r6
    3338:	7f 92       	push	r7
    333a:	8f 92       	push	r8
    333c:	9f 92       	push	r9
    333e:	af 92       	push	r10
    3340:	bf 92       	push	r11
    3342:	cf 92       	push	r12
    3344:	df 92       	push	r13
    3346:	ef 92       	push	r14
    3348:	ff 92       	push	r15
    334a:	0f 93       	push	r16
    334c:	1f 93       	push	r17
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	cd b7       	in	r28, 0x3d	; 61
    3354:	de b7       	in	r29, 0x3e	; 62
    3356:	ca 1b       	sub	r28, r26
    3358:	db 0b       	sbc	r29, r27
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	09 94       	ijmp

00003366 <__epilogue_restores__>:
    3366:	2a 88       	ldd	r2, Y+18	; 0x12
    3368:	39 88       	ldd	r3, Y+17	; 0x11
    336a:	48 88       	ldd	r4, Y+16	; 0x10
    336c:	5f 84       	ldd	r5, Y+15	; 0x0f
    336e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3370:	7d 84       	ldd	r7, Y+13	; 0x0d
    3372:	8c 84       	ldd	r8, Y+12	; 0x0c
    3374:	9b 84       	ldd	r9, Y+11	; 0x0b
    3376:	aa 84       	ldd	r10, Y+10	; 0x0a
    3378:	b9 84       	ldd	r11, Y+9	; 0x09
    337a:	c8 84       	ldd	r12, Y+8	; 0x08
    337c:	df 80       	ldd	r13, Y+7	; 0x07
    337e:	ee 80       	ldd	r14, Y+6	; 0x06
    3380:	fd 80       	ldd	r15, Y+5	; 0x05
    3382:	0c 81       	ldd	r16, Y+4	; 0x04
    3384:	1b 81       	ldd	r17, Y+3	; 0x03
    3386:	aa 81       	ldd	r26, Y+2	; 0x02
    3388:	b9 81       	ldd	r27, Y+1	; 0x01
    338a:	ce 0f       	add	r28, r30
    338c:	d1 1d       	adc	r29, r1
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	de bf       	out	0x3e, r29	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	cd bf       	out	0x3d, r28	; 61
    3398:	ed 01       	movw	r28, r26
    339a:	08 95       	ret

0000339c <itoa>:
    339c:	fb 01       	movw	r30, r22
    339e:	9f 01       	movw	r18, r30
    33a0:	e8 94       	clt
    33a2:	42 30       	cpi	r20, 0x02	; 2
    33a4:	c4 f0       	brlt	.+48     	; 0x33d6 <itoa+0x3a>
    33a6:	45 32       	cpi	r20, 0x25	; 37
    33a8:	b4 f4       	brge	.+44     	; 0x33d6 <itoa+0x3a>
    33aa:	4a 30       	cpi	r20, 0x0A	; 10
    33ac:	29 f4       	brne	.+10     	; 0x33b8 <itoa+0x1c>
    33ae:	97 fb       	bst	r25, 7
    33b0:	1e f4       	brtc	.+6      	; 0x33b8 <itoa+0x1c>
    33b2:	90 95       	com	r25
    33b4:	81 95       	neg	r24
    33b6:	9f 4f       	sbci	r25, 0xFF	; 255
    33b8:	64 2f       	mov	r22, r20
    33ba:	77 27       	eor	r23, r23
    33bc:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__udivmodhi4>
    33c0:	80 5d       	subi	r24, 0xD0	; 208
    33c2:	8a 33       	cpi	r24, 0x3A	; 58
    33c4:	0c f0       	brlt	.+2      	; 0x33c8 <itoa+0x2c>
    33c6:	89 5d       	subi	r24, 0xD9	; 217
    33c8:	81 93       	st	Z+, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	a1 f7       	brne	.-24     	; 0x33b8 <itoa+0x1c>
    33d0:	16 f4       	brtc	.+4      	; 0x33d6 <itoa+0x3a>
    33d2:	5d e2       	ldi	r21, 0x2D	; 45
    33d4:	51 93       	st	Z+, r21
    33d6:	10 82       	st	Z, r1
    33d8:	c9 01       	movw	r24, r18
    33da:	0c 94 ef 19 	jmp	0x33de	; 0x33de <strrev>

000033de <strrev>:
    33de:	dc 01       	movw	r26, r24
    33e0:	fc 01       	movw	r30, r24
    33e2:	67 2f       	mov	r22, r23
    33e4:	71 91       	ld	r23, Z+
    33e6:	77 23       	and	r23, r23
    33e8:	e1 f7       	brne	.-8      	; 0x33e2 <strrev+0x4>
    33ea:	32 97       	sbiw	r30, 0x02	; 2
    33ec:	04 c0       	rjmp	.+8      	; 0x33f6 <strrev+0x18>
    33ee:	7c 91       	ld	r23, X
    33f0:	6d 93       	st	X+, r22
    33f2:	70 83       	st	Z, r23
    33f4:	62 91       	ld	r22, -Z
    33f6:	ae 17       	cp	r26, r30
    33f8:	bf 07       	cpc	r27, r31
    33fa:	c8 f3       	brcs	.-14     	; 0x33ee <strrev+0x10>
    33fc:	08 95       	ret

000033fe <_exit>:
    33fe:	f8 94       	cli

00003400 <__stop_program>:
    3400:	ff cf       	rjmp	.-2      	; 0x3400 <__stop_program>
