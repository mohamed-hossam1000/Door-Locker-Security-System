
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00003308  0000339c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000f6  008000f6  00003432  2**0
                  ALLOC
  3 .stab         00002b68  00000000  00000000  00003434  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001201  00000000  00000000  00005f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000719d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000072dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000744d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009096  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ad30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b11d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 82 19 	jmp	0x3304	; 0x3304 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ee       	ldi	r26, 0xED	; 237
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 06 19 	jmp	0x320c	; 0x320c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ee       	ldi	r24, 0xED	; 237
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2e 19 	jmp	0x325c	; 0x325c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 16 19 	jmp	0x322c	; 0x322c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

volatile uint8 g_time;


int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uartConfig;
	/* a variable to store Timer1 configuration */
	Timer1_ConfigType timerConfig;

	/* UART configuration and initialization */
	uartConfig.baudRate = 9600;
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	95 e2       	ldi	r25, 0x25	; 37
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	8a 83       	std	Y+2, r24	; 0x02
     b64:	9b 83       	std	Y+3, r25	; 0x03
     b66:	ac 83       	std	Y+4, r26	; 0x04
     b68:	bd 83       	std	Y+5, r27	; 0x05
	uartConfig.character_size = EIGHT_BITS;
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	8e 83       	std	Y+6, r24	; 0x06
	uartConfig.parity = DISABLED;
     b6e:	1f 82       	std	Y+7, r1	; 0x07
	uartConfig.stop_bits = ONE_BIT;
     b70:	18 86       	std	Y+8, r1	; 0x08
	UART_init(&uartConfig);
     b72:	ce 01       	movw	r24, r28
     b74:	02 96       	adiw	r24, 0x02	; 2
     b76:	0e 94 19 18 	call	0x3032	; 0x3032 <UART_init>

	/* Timer1 configuration without initialization
	 * configured to give interrupt every 7.5 seconds */
	timerConfig.initial_value = 0;
     b7a:	1a 86       	std	Y+10, r1	; 0x0a
     b7c:	19 86       	std	Y+9, r1	; 0x09
	timerConfig.mode = COMPARE;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	8e 87       	std	Y+14, r24	; 0x0e
	timerConfig.compare_value = 58593;
     b82:	81 ee       	ldi	r24, 0xE1	; 225
     b84:	94 ee       	ldi	r25, 0xE4	; 228
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	8b 87       	std	Y+11, r24	; 0x0b
	timerConfig.prescaler = CLK_1024;
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	8d 87       	std	Y+13, r24	; 0x0d
	Timer1_setCallBack(timerTick);
     b8e:	8c e5       	ldi	r24, 0x5C	; 92
     b90:	96 e0       	ldi	r25, 0x06	; 6
     b92:	0e 94 07 18 	call	0x300e	; 0x300e <Timer1_setCallBack>

	/* initialize LCD */
	LCD_init();
     b96:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_init>
	/* enable global interrupt */
	SREG|=(1<<7);
     b9a:	af e5       	ldi	r26, 0x5F	; 95
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ef e5       	ldi	r30, 0x5F	; 95
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	8c 93       	st	X, r24

	/* set password for first time
	 * continue asking for password if the confirmation doesn't match the password */
	while(setPassword() == UNMATCHED_PASSWORDS);
     ba8:	0e 94 81 07 	call	0xf02	; 0xf02 <setPassword>
     bac:	83 32       	cpi	r24, 0x23	; 35
     bae:	e1 f3       	breq	.-8      	; 0xba8 <main+0x62>

	for(;;)
	{
		LCD_clearScreen();
     bb0:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
     bb4:	80 e6       	ldi	r24, 0x60	; 96
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     bbc:	2e e6       	ldi	r18, 0x6E	; 110
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	a9 01       	movw	r20, r18
     bc6:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_displayStringRowColumn>
		do
		{
			key = KEYPAD_getPressedKey();
     bca:	0e 94 1c 0c 	call	0x1838	; 0x1838 <KEYPAD_getPressedKey>
     bce:	89 83       	std	Y+1, r24	; 0x01
		}while(key != '+' && key != '-');
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	8b 32       	cpi	r24, 0x2B	; 43
     bd4:	19 f0       	breq	.+6      	; 0xbdc <main+0x96>
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	8d 32       	cpi	r24, 0x2D	; 45
     bda:	b9 f7       	brne	.-18     	; 0xbca <main+0x84>

		/* ask the user for the password and check if it's correct
		 * we need to check password to do either operation  */
		if(checkPassword() == MATCHED_PASSWORDS)
     bdc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <checkPassword>
     be0:	88 32       	cpi	r24, 0x28	; 40
     be2:	09 f0       	breq	.+2      	; 0xbe6 <main+0xa0>
     be4:	48 c0       	rjmp	.+144    	; 0xc76 <main+0x130>
		{
			switch(key)
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	38 8b       	std	Y+16, r19	; 0x10
     bee:	2f 87       	std	Y+15, r18	; 0x0f
     bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf2:	98 89       	ldd	r25, Y+16	; 0x10
     bf4:	8b 32       	cpi	r24, 0x2B	; 43
     bf6:	91 05       	cpc	r25, r1
     bf8:	31 f0       	breq	.+12     	; 0xc06 <main+0xc0>
     bfa:	2f 85       	ldd	r18, Y+15	; 0x0f
     bfc:	38 89       	ldd	r19, Y+16	; 0x10
     bfe:	2d 32       	cpi	r18, 0x2D	; 45
     c00:	31 05       	cpc	r19, r1
     c02:	a1 f1       	breq	.+104    	; 0xc6c <main+0x126>
     c04:	d5 cf       	rjmp	.-86     	; 0xbb0 <main+0x6a>
			{
			case '+':
				/* send command open door to MCU2 */
				UART_sendByte(OPEN_DOOR);
     c06:	85 e0       	ldi	r24, 0x05	; 5
     c08:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
				/* display the state of the lock
				 * MCU2 sends a dummy byte every time the state changes */
				UART_receiveByte();
     c0c:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>
				LCD_clearScreen();
     c10:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_clearScreen>
				LCD_displayString("    Door is");
     c14:	8e e7       	ldi	r24, 0x7E	; 126
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
				LCD_displayStringRowColumn(1, 3, "Unlocking");
     c1c:	2a e8       	ldi	r18, 0x8A	; 138
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	63 e0       	ldi	r22, 0x03	; 3
     c24:	a9 01       	movw	r20, r18
     c26:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_displayStringRowColumn>

				UART_receiveByte();
     c2a:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>
				LCD_clearScreen();
     c2e:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_clearScreen>
				LCD_displayString("    Door is");
     c32:	8e e7       	ldi	r24, 0x7E	; 126
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
				LCD_displayStringRowColumn(1, 6, "Open");
     c3a:	24 e9       	ldi	r18, 0x94	; 148
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	66 e0       	ldi	r22, 0x06	; 6
     c42:	a9 01       	movw	r20, r18
     c44:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_displayStringRowColumn>


				UART_receiveByte();
     c48:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>
				LCD_clearScreen();
     c4c:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_clearScreen>
				LCD_displayString("    Door is");
     c50:	8e e7       	ldi	r24, 0x7E	; 126
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
				LCD_displayStringRowColumn(1, 4, "Locking");
     c58:	29 e9       	ldi	r18, 0x99	; 153
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	64 e0       	ldi	r22, 0x04	; 4
     c60:	a9 01       	movw	r20, r18
     c62:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_displayStringRowColumn>

				UART_receiveByte();
     c66:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>
     c6a:	a2 cf       	rjmp	.-188    	; 0xbb0 <main+0x6a>
				break;
			case '-':
				/* change password
				 * continue asking for password if the confirmation doesn't
				 *  match the password */
				while(setPassword() == UNMATCHED_PASSWORDS);
     c6c:	0e 94 81 07 	call	0xf02	; 0xf02 <setPassword>
     c70:	83 32       	cpi	r24, 0x23	; 35
     c72:	e1 f3       	breq	.-8      	; 0xc6c <main+0x126>
     c74:	9d cf       	rjmp	.-198    	; 0xbb0 <main+0x6a>
		else
		{
			/* if user enter password wrong 3 times release the alarm and stop
			 * the system for a minute */
			/* turn MCU2 buzzer on */
			UART_sendByte(BUZZER_ON);
     c76:	89 e1       	ldi	r24, 0x19	; 25
     c78:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
			/* display error message */
			LCD_clearScreen();
     c7c:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_clearScreen>
			LCD_displayString("WRONG PASSWORD!");
     c80:	81 ea       	ldi	r24, 0xA1	; 161
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
			LCD_displayStringRowColumn(1, 1, "System Locked");
     c88:	21 eb       	ldi	r18, 0xB1	; 177
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	a9 01       	movw	r20, r18
     c92:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_displayStringRowColumn>
			/* set time t0 60 seconds (8 * 7.5 = 60) */
			g_time = 8;
     c96:	88 e0       	ldi	r24, 0x08	; 8
     c98:	80 93 f8 00 	sts	0x00F8, r24
			/* initialize timer1 */
			Timer1_init(&timerConfig);
     c9c:	ce 01       	movw	r24, r28
     c9e:	09 96       	adiw	r24, 0x09	; 9
     ca0:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <Timer1_init>
			/* wait until the minute is over */
			while(g_time > 0);
     ca4:	80 91 f8 00 	lds	r24, 0x00F8
     ca8:	88 23       	and	r24, r24
     caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0x15e>
			/* de_initialize timer1 */
			Timer1_deInit();
     cac:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <Timer1_deInit>
			/* turn MCU2 buzzer off */
			UART_sendByte(BUZZER_OFF);
     cb0:	8e e1       	ldi	r24, 0x1E	; 30
     cb2:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
     cb6:	7c cf       	rjmp	.-264    	; 0xbb0 <main+0x6a>

00000cb8 <timerTick>:
 * Description :
 * a function that acts as the ISR of timer1
 * increase the time every interrupt
 */
void timerTick()
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	g_time--;
     cc0:	80 91 f8 00 	lds	r24, 0x00F8
     cc4:	81 50       	subi	r24, 0x01	; 1
     cc6:	80 93 f8 00 	sts	0x00F8, r24
}
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <getPassword>:
/*
 * Description :
 * a function to take 5 digits input from keypad (password)
 */
void getPassword(uint8* ptr)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	a0 97       	sbiw	r28, 0x20	; 32
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	98 a3       	std	Y+32, r25	; 0x20
     ce6:	8f 8f       	std	Y+31, r24	; 0x1f
	/* a variable to store pressed key */
	uint8 key;
	/* loop variable */
	uint8 i;
	/* get 5 digits password through keypad */
	for(i=0; i<5; i++)
     ce8:	1d 8e       	std	Y+29, r1	; 0x1d
     cea:	88 c0       	rjmp	.+272    	; 0xdfc <getPassword+0x12c>
	{
		do
		{
			key = KEYPAD_getPressedKey();
     cec:	0e 94 1c 0c 	call	0x1838	; 0x1838 <KEYPAD_getPressedKey>
     cf0:	8e 8f       	std	Y+30, r24	; 0x1e
		}while(key < 0 || key >9);/* only take numbers as input */
     cf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cf4:	8a 30       	cpi	r24, 0x0A	; 10
     cf6:	d0 f7       	brcc	.-12     	; 0xcec <getPassword+0x1c>

		ptr[i] = key;
     cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d00:	98 a1       	ldd	r25, Y+32	; 0x20
     d02:	fc 01       	movw	r30, r24
     d04:	e2 0f       	add	r30, r18
     d06:	f3 1f       	adc	r31, r19
     d08:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d0a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     d0c:	8a e2       	ldi	r24, 0x2A	; 42
     d0e:	0e 94 33 12 	call	0x2466	; 0x2466 <LCD_displayCharacter>
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a8 ec       	ldi	r26, 0xC8	; 200
     d18:	b3 e4       	ldi	r27, 0x43	; 67
     d1a:	89 8f       	std	Y+25, r24	; 0x19
     d1c:	9a 8f       	std	Y+26, r25	; 0x1a
     d1e:	ab 8f       	std	Y+27, r26	; 0x1b
     d20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a ef       	ldi	r20, 0xFA	; 250
     d30:	54 e4       	ldi	r21, 0x44	; 68
     d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	8d 8b       	std	Y+21, r24	; 0x15
     d3c:	9e 8b       	std	Y+22, r25	; 0x16
     d3e:	af 8b       	std	Y+23, r26	; 0x17
     d40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d42:	6d 89       	ldd	r22, Y+21	; 0x15
     d44:	7e 89       	ldd	r23, Y+22	; 0x16
     d46:	8f 89       	ldd	r24, Y+23	; 0x17
     d48:	98 8d       	ldd	r25, Y+24	; 0x18
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d56:	88 23       	and	r24, r24
     d58:	2c f4       	brge	.+10     	; 0xd64 <getPassword+0x94>
		__ticks = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9c 8b       	std	Y+20, r25	; 0x14
     d60:	8b 8b       	std	Y+19, r24	; 0x13
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <getPassword+0x112>
	else if (__tmp > 65535)
     d64:	6d 89       	ldd	r22, Y+21	; 0x15
     d66:	7e 89       	ldd	r23, Y+22	; 0x16
     d68:	8f 89       	ldd	r24, Y+23	; 0x17
     d6a:	98 8d       	ldd	r25, Y+24	; 0x18
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	4c f5       	brge	.+82     	; 0xdce <getPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7c:	69 8d       	ldd	r22, Y+25	; 0x19
     d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9c 8b       	std	Y+20, r25	; 0x14
     da2:	8b 8b       	std	Y+19, r24	; 0x13
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <getPassword+0xf4>
     da6:	88 ec       	ldi	r24, 0xC8	; 200
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9a 8b       	std	Y+18, r25	; 0x12
     dac:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dae:	89 89       	ldd	r24, Y+17	; 0x11
     db0:	9a 89       	ldd	r25, Y+18	; 0x12
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <getPassword+0xe2>
     db6:	9a 8b       	std	Y+18, r25	; 0x12
     db8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dba:	8b 89       	ldd	r24, Y+19	; 0x13
     dbc:	9c 89       	ldd	r25, Y+20	; 0x14
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	9c 8b       	std	Y+20, r25	; 0x14
     dc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc4:	8b 89       	ldd	r24, Y+19	; 0x13
     dc6:	9c 89       	ldd	r25, Y+20	; 0x14
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f7       	brne	.-38     	; 0xda6 <getPassword+0xd6>
     dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <getPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dce:	6d 89       	ldd	r22, Y+21	; 0x15
     dd0:	7e 89       	ldd	r23, Y+22	; 0x16
     dd2:	8f 89       	ldd	r24, Y+23	; 0x17
     dd4:	98 8d       	ldd	r25, Y+24	; 0x18
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9c 8b       	std	Y+20, r25	; 0x14
     de0:	8b 8b       	std	Y+19, r24	; 0x13
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	98 8b       	std	Y+16, r25	; 0x10
     de8:	8f 87       	std	Y+15, r24	; 0x0f
     dea:	8f 85       	ldd	r24, Y+15	; 0x0f
     dec:	98 89       	ldd	r25, Y+16	; 0x10
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <getPassword+0x11e>
     df2:	98 8b       	std	Y+16, r25	; 0x10
     df4:	8f 87       	std	Y+15, r24	; 0x0f
	/* a variable to store pressed key */
	uint8 key;
	/* loop variable */
	uint8 i;
	/* get 5 digits password through keypad */
	for(i=0; i<5; i++)
     df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df8:	8f 5f       	subi	r24, 0xFF	; 255
     dfa:	8d 8f       	std	Y+29, r24	; 0x1d
     dfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dfe:	85 30       	cpi	r24, 0x05	; 5
     e00:	08 f4       	brcc	.+2      	; 0xe04 <getPassword+0x134>
     e02:	74 cf       	rjmp	.-280    	; 0xcec <getPassword+0x1c>
		ptr[i] = key;
		LCD_displayCharacter('*');
		_delay_ms(400);
	}
	/* wait for user to press enter */
	while(KEYPAD_getPressedKey() != ENTER);
     e04:	0e 94 1c 0c 	call	0x1838	; 0x1838 <KEYPAD_getPressedKey>
     e08:	8d 33       	cpi	r24, 0x3D	; 61
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <getPassword+0x134>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	a8 ec       	ldi	r26, 0xC8	; 200
     e12:	b3 e4       	ldi	r27, 0x43	; 67
     e14:	8b 87       	std	Y+11, r24	; 0x0b
     e16:	9c 87       	std	Y+12, r25	; 0x0c
     e18:	ad 87       	std	Y+13, r26	; 0x0d
     e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	4a ef       	ldi	r20, 0xFA	; 250
     e2a:	54 e4       	ldi	r21, 0x44	; 68
     e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	8f 83       	std	Y+7, r24	; 0x07
     e36:	98 87       	std	Y+8, r25	; 0x08
     e38:	a9 87       	std	Y+9, r26	; 0x09
     e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e3c:	6f 81       	ldd	r22, Y+7	; 0x07
     e3e:	78 85       	ldd	r23, Y+8	; 0x08
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e8       	ldi	r20, 0x80	; 128
     e4a:	5f e3       	ldi	r21, 0x3F	; 63
     e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e50:	88 23       	and	r24, r24
     e52:	2c f4       	brge	.+10     	; 0xe5e <getPassword+0x18e>
		__ticks = 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	3f c0       	rjmp	.+126    	; 0xedc <getPassword+0x20c>
	else if (__tmp > 65535)
     e5e:	6f 81       	ldd	r22, Y+7	; 0x07
     e60:	78 85       	ldd	r23, Y+8	; 0x08
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	3f ef       	ldi	r19, 0xFF	; 255
     e6a:	4f e7       	ldi	r20, 0x7F	; 127
     e6c:	57 e4       	ldi	r21, 0x47	; 71
     e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e72:	18 16       	cp	r1, r24
     e74:	4c f5       	brge	.+82     	; 0xec8 <getPassword+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e76:	6b 85       	ldd	r22, Y+11	; 0x0b
     e78:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e2       	ldi	r20, 0x20	; 32
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	bc 01       	movw	r22, r24
     e90:	cd 01       	movw	r24, r26
     e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	0f c0       	rjmp	.+30     	; 0xebe <getPassword+0x1ee>
     ea0:	88 ec       	ldi	r24, 0xC8	; 200
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <getPassword+0x1dc>
     eb0:	9c 83       	std	Y+4, r25	; 0x04
     eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	69 f7       	brne	.-38     	; 0xea0 <getPassword+0x1d0>
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <getPassword+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec8:	6f 81       	ldd	r22, Y+7	; 0x07
     eca:	78 85       	ldd	r23, Y+8	; 0x08
     ecc:	89 85       	ldd	r24, Y+9	; 0x09
     ece:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <getPassword+0x218>
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
}
     ef0:	a0 96       	adiw	r28, 0x20	; 32
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <setPassword>:
/*
 * Description :
 * a function to set the password of lock
 */
uint8 setPassword()
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	2e 97       	sbiw	r28, 0x0e	; 14
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
	/* a variable to store the password */
	uint8 pass[5];
	/* a variable to store the re_entered password */
	uint8 passConfirm[5];
	/* ask the user for password */
	LCD_clearScreen();
     f16:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_clearScreen>
	LCD_displayString("plz enter pass: ");
     f1a:	8f eb       	ldi	r24, 0xBF	; 191
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
	LCD_moveCursor(1, 0);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
	/* get 5 digits password through keypad */
	getPassword(pass);
     f2a:	ce 01       	movw	r24, r28
     f2c:	05 96       	adiw	r24, 0x05	; 5
     f2e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <getPassword>
	/* clear screen and ask the user to re_enter password */
	LCD_clearScreen();
     f32:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_clearScreen>
	LCD_displayString("plz re_enter the");
     f36:	80 ed       	ldi	r24, 0xD0	; 208
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "same pass: ");
     f3e:	21 ee       	ldi	r18, 0xE1	; 225
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	a9 01       	movw	r20, r18
     f48:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <LCD_displayStringRowColumn>
	/* get 5 digits password through keypad */
	getPassword(passConfirm);
     f4c:	ce 01       	movw	r24, r28
     f4e:	0a 96       	adiw	r24, 0x0a	; 10
     f50:	0e 94 68 06 	call	0xcd0	; 0xcd0 <getPassword>

	/* send a predefined character that indicates to the second MCU
	 * the operation is setting a new password */
	UART_sendByte(SET_PASSWORD);
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
	/* send the two passwords */
	for(int i=0; i<5; i++)
     f5a:	1c 82       	std	Y+4, r1	; 0x04
     f5c:	1b 82       	std	Y+3, r1	; 0x03
     f5e:	11 c0       	rjmp	.+34     	; 0xf82 <setPassword+0x80>
	{
		UART_sendByte(pass[i]);
     f60:	2b 81       	ldd	r18, Y+3	; 0x03
     f62:	3c 81       	ldd	r19, Y+4	; 0x04
     f64:	ce 01       	movw	r24, r28
     f66:	05 96       	adiw	r24, 0x05	; 5
     f68:	fc 01       	movw	r30, r24
     f6a:	e2 0f       	add	r30, r18
     f6c:	f3 1f       	adc	r31, r19
     f6e:	80 81       	ld	r24, Z
     f70:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
		UART_receiveByte();
     f74:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>

	/* send a predefined character that indicates to the second MCU
	 * the operation is setting a new password */
	UART_sendByte(SET_PASSWORD);
	/* send the two passwords */
	for(int i=0; i<5; i++)
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	9c 83       	std	Y+4, r25	; 0x04
     f80:	8b 83       	std	Y+3, r24	; 0x03
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	85 30       	cpi	r24, 0x05	; 5
     f88:	91 05       	cpc	r25, r1
     f8a:	54 f3       	brlt	.-44     	; 0xf60 <setPassword+0x5e>
	{
		UART_sendByte(pass[i]);
		UART_receiveByte();
	}
	for(int i=0; i<5; i++)
     f8c:	1a 82       	std	Y+2, r1	; 0x02
     f8e:	19 82       	std	Y+1, r1	; 0x01
     f90:	11 c0       	rjmp	.+34     	; 0xfb4 <setPassword+0xb2>
	{
		UART_sendByte(passConfirm[i]);\
     f92:	29 81       	ldd	r18, Y+1	; 0x01
     f94:	3a 81       	ldd	r19, Y+2	; 0x02
     f96:	ce 01       	movw	r24, r28
     f98:	0a 96       	adiw	r24, 0x0a	; 10
     f9a:	fc 01       	movw	r30, r24
     f9c:	e2 0f       	add	r30, r18
     f9e:	f3 1f       	adc	r31, r19
     fa0:	80 81       	ld	r24, Z
     fa2:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
		UART_receiveByte();
     fa6:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>
	for(int i=0; i<5; i++)
	{
		UART_sendByte(pass[i]);
		UART_receiveByte();
	}
	for(int i=0; i<5; i++)
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	9a 83       	std	Y+2, r25	; 0x02
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	85 30       	cpi	r24, 0x05	; 5
     fba:	91 05       	cpc	r25, r1
     fbc:	54 f3       	brlt	.-44     	; 0xf92 <setPassword+0x90>
		UART_sendByte(passConfirm[i]);\
		UART_receiveByte();
	}

	/* return MCU2 response whether the two passwords match or not */
	return UART_receiveByte();
     fbe:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>
}
     fc2:	2e 96       	adiw	r28, 0x0e	; 14
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <checkPassword>:
 * Description :
 * a function to take the password and check if it is the same as the
 * password stored in the EEPROM connected to MCU2
 */
uint8 checkPassword()
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	2a 97       	sbiw	r28, 0x0a	; 10
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
	/* loop variable */
	uint8 i;
	/* a variable to store the password */
	uint8 pass[6];
	/* ask the user for password */
	for(i=0; i<3; i++)
     fe8:	1b 82       	std	Y+3, r1	; 0x03
     fea:	34 c0       	rjmp	.+104    	; 0x1054 <checkPassword+0x80>
	{
		LCD_clearScreen();
     fec:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_clearScreen>
		LCD_displayString("plz enter pass: ");
     ff0:	8f eb       	ldi	r24, 0xBF	; 191
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
		LCD_moveCursor(1, 0);
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>

		UART_sendByte(COMPARE_PASSWORD);
    1000:	8f e0       	ldi	r24, 0x0F	; 15
    1002:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
		/* get 5 digits password through keypad */
		getPassword(pass);
    1006:	ce 01       	movw	r24, r28
    1008:	04 96       	adiw	r24, 0x04	; 4
    100a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <getPassword>
		/* send password to MCU2 */
		for(int i=0; i<5; i++)
    100e:	1a 82       	std	Y+2, r1	; 0x02
    1010:	19 82       	std	Y+1, r1	; 0x01
    1012:	11 c0       	rjmp	.+34     	; 0x1036 <checkPassword+0x62>
		{
			UART_sendByte(pass[i]);
    1014:	29 81       	ldd	r18, Y+1	; 0x01
    1016:	3a 81       	ldd	r19, Y+2	; 0x02
    1018:	ce 01       	movw	r24, r28
    101a:	04 96       	adiw	r24, 0x04	; 4
    101c:	fc 01       	movw	r30, r24
    101e:	e2 0f       	add	r30, r18
    1020:	f3 1f       	adc	r31, r19
    1022:	80 81       	ld	r24, Z
    1024:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
			UART_receiveByte();
    1028:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>

		UART_sendByte(COMPARE_PASSWORD);
		/* get 5 digits password through keypad */
		getPassword(pass);
		/* send password to MCU2 */
		for(int i=0; i<5; i++)
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	9a 81       	ldd	r25, Y+2	; 0x02
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	85 30       	cpi	r24, 0x05	; 5
    103c:	91 05       	cpc	r25, r1
    103e:	54 f3       	brlt	.-44     	; 0x1014 <checkPassword+0x40>
		{
			UART_sendByte(pass[i]);
			UART_receiveByte();
		}
		/* return MCU2 response  whether the two passwords match or not */
		if(UART_receiveByte() == MATCHED_PASSWORDS)
    1040:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>
    1044:	88 32       	cpi	r24, 0x28	; 40
    1046:	19 f4       	brne	.+6      	; 0x104e <checkPassword+0x7a>
		{
			return MATCHED_PASSWORDS;
    1048:	88 e2       	ldi	r24, 0x28	; 40
    104a:	8a 87       	std	Y+10, r24	; 0x0a
    104c:	08 c0       	rjmp	.+16     	; 0x105e <checkPassword+0x8a>
	/* loop variable */
	uint8 i;
	/* a variable to store the password */
	uint8 pass[6];
	/* ask the user for password */
	for(i=0; i<3; i++)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	8b 83       	std	Y+3, r24	; 0x03
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	48 f2       	brcs	.-110    	; 0xfec <checkPassword+0x18>
		{
			return MATCHED_PASSWORDS;
		}
	}

	return UNMATCHED_PASSWORDS;
    105a:	83 e2       	ldi	r24, 0x23	; 35
    105c:	8a 87       	std	Y+10, r24	; 0x0a
    105e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1060:	2a 96       	adiw	r28, 0x0a	; 10
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <GPIO_setupPinDirection+0x6>
    1078:	00 d0       	rcall	.+0      	; 0x107a <GPIO_setupPinDirection+0x8>
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	6a 83       	std	Y+2, r22	; 0x02
    1084:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	88 30       	cpi	r24, 0x08	; 8
    108a:	08 f0       	brcs	.+2      	; 0x108e <GPIO_setupPinDirection+0x1c>
    108c:	d5 c0       	rjmp	.+426    	; 0x1238 <GPIO_setupPinDirection+0x1c6>
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	84 30       	cpi	r24, 0x04	; 4
    1092:	08 f0       	brcs	.+2      	; 0x1096 <GPIO_setupPinDirection+0x24>
    1094:	d1 c0       	rjmp	.+418    	; 0x1238 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3d 83       	std	Y+5, r19	; 0x05
    109e:	2c 83       	std	Y+4, r18	; 0x04
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <GPIO_setupPinDirection+0x3a>
    10aa:	43 c0       	rjmp	.+134    	; 0x1132 <GPIO_setupPinDirection+0xc0>
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	3d 81       	ldd	r19, Y+5	; 0x05
    10b0:	22 30       	cpi	r18, 0x02	; 2
    10b2:	31 05       	cpc	r19, r1
    10b4:	2c f4       	brge	.+10     	; 0x10c0 <GPIO_setupPinDirection+0x4e>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	71 f0       	breq	.+28     	; 0x10da <GPIO_setupPinDirection+0x68>
    10be:	bc c0       	rjmp	.+376    	; 0x1238 <GPIO_setupPinDirection+0x1c6>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <GPIO_setupPinDirection+0x5a>
    10ca:	5f c0       	rjmp	.+190    	; 0x118a <GPIO_setupPinDirection+0x118>
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	83 30       	cpi	r24, 0x03	; 3
    10d2:	91 05       	cpc	r25, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <GPIO_setupPinDirection+0x66>
    10d6:	85 c0       	rjmp	.+266    	; 0x11e2 <GPIO_setupPinDirection+0x170>
    10d8:	af c0       	rjmp	.+350    	; 0x1238 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	a1 f4       	brne	.+40     	; 0x1108 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10e0:	aa e3       	ldi	r26, 0x3A	; 58
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ea e3       	ldi	r30, 0x3A	; 58
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <GPIO_setupPinDirection+0x8c>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <GPIO_setupPinDirection+0x88>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	98 c0       	rjmp	.+304    	; 0x1238 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1108:	aa e3       	ldi	r26, 0x3A	; 58
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ea e3       	ldi	r30, 0x3A	; 58
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GPIO_setupPinDirection+0xb4>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <GPIO_setupPinDirection+0xb0>
    112a:	80 95       	com	r24
    112c:	84 23       	and	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	83 c0       	rjmp	.+262    	; 0x1238 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	a1 f4       	brne	.+40     	; 0x1160 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1138:	a7 e3       	ldi	r26, 0x37	; 55
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e7 e3       	ldi	r30, 0x37	; 55
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_setupPinDirection+0xe4>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_setupPinDirection+0xe0>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	6c c0       	rjmp	.+216    	; 0x1238 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1160:	a7 e3       	ldi	r26, 0x37	; 55
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e7 e3       	ldi	r30, 0x37	; 55
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <GPIO_setupPinDirection+0x10c>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <GPIO_setupPinDirection+0x108>
    1182:	80 95       	com	r24
    1184:	84 23       	and	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	57 c0       	rjmp	.+174    	; 0x1238 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	a1 f4       	brne	.+40     	; 0x11b8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1190:	a4 e3       	ldi	r26, 0x34	; 52
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e4 e3       	ldi	r30, 0x34	; 52
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <GPIO_setupPinDirection+0x13c>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <GPIO_setupPinDirection+0x138>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	40 c0       	rjmp	.+128    	; 0x1238 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11b8:	a4 e3       	ldi	r26, 0x34	; 52
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e4 e3       	ldi	r30, 0x34	; 52
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <GPIO_setupPinDirection+0x164>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <GPIO_setupPinDirection+0x160>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	2b c0       	rjmp	.+86     	; 0x1238 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	a1 f4       	brne	.+40     	; 0x1210 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11e8:	a1 e3       	ldi	r26, 0x31	; 49
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e1 e3       	ldi	r30, 0x31	; 49
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <GPIO_setupPinDirection+0x194>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <GPIO_setupPinDirection+0x190>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	14 c0       	rjmp	.+40     	; 0x1238 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1210:	a1 e3       	ldi	r26, 0x31	; 49
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e1 e3       	ldi	r30, 0x31	; 49
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <GPIO_setupPinDirection+0x1bc>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <GPIO_setupPinDirection+0x1b8>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <GPIO_writePin+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <GPIO_writePin+0x8>
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	6a 83       	std	Y+2, r22	; 0x02
    125a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	08 f0       	brcs	.+2      	; 0x1264 <GPIO_writePin+0x1c>
    1262:	d5 c0       	rjmp	.+426    	; 0x140e <GPIO_writePin+0x1c6>
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	08 f0       	brcs	.+2      	; 0x126c <GPIO_writePin+0x24>
    126a:	d1 c0       	rjmp	.+418    	; 0x140e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3d 83       	std	Y+5, r19	; 0x05
    1274:	2c 83       	std	Y+4, r18	; 0x04
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	9d 81       	ldd	r25, Y+5	; 0x05
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <GPIO_writePin+0x3a>
    1280:	43 c0       	rjmp	.+134    	; 0x1308 <GPIO_writePin+0xc0>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	2c f4       	brge	.+10     	; 0x1296 <GPIO_writePin+0x4e>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	71 f0       	breq	.+28     	; 0x12b0 <GPIO_writePin+0x68>
    1294:	bc c0       	rjmp	.+376    	; 0x140e <GPIO_writePin+0x1c6>
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <GPIO_writePin+0x5a>
    12a0:	5f c0       	rjmp	.+190    	; 0x1360 <GPIO_writePin+0x118>
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <GPIO_writePin+0x66>
    12ac:	85 c0       	rjmp	.+266    	; 0x13b8 <GPIO_writePin+0x170>
    12ae:	af c0       	rjmp	.+350    	; 0x140e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	a1 f4       	brne	.+40     	; 0x12de <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    12b6:	ab e3       	ldi	r26, 0x3B	; 59
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	eb e3       	ldi	r30, 0x3B	; 59
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <GPIO_writePin+0x8c>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <GPIO_writePin+0x88>
    12d8:	84 2b       	or	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	98 c0       	rjmp	.+304    	; 0x140e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12de:	ab e3       	ldi	r26, 0x3B	; 59
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	eb e3       	ldi	r30, 0x3B	; 59
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_writePin+0xb4>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_writePin+0xb0>
    1300:	80 95       	com	r24
    1302:	84 23       	and	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	83 c0       	rjmp	.+262    	; 0x140e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	a1 f4       	brne	.+40     	; 0x1336 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    130e:	a8 e3       	ldi	r26, 0x38	; 56
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e8 e3       	ldi	r30, 0x38	; 56
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <GPIO_writePin+0xe4>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <GPIO_writePin+0xe0>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	6c c0       	rjmp	.+216    	; 0x140e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1336:	a8 e3       	ldi	r26, 0x38	; 56
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e8 e3       	ldi	r30, 0x38	; 56
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <GPIO_writePin+0x10c>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <GPIO_writePin+0x108>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	57 c0       	rjmp	.+174    	; 0x140e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	a1 f4       	brne	.+40     	; 0x138e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1366:	a5 e3       	ldi	r26, 0x35	; 53
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e5 e3       	ldi	r30, 0x35	; 53
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <GPIO_writePin+0x13c>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <GPIO_writePin+0x138>
    1388:	84 2b       	or	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	40 c0       	rjmp	.+128    	; 0x140e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    138e:	a5 e3       	ldi	r26, 0x35	; 53
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e3       	ldi	r30, 0x35	; 53
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <GPIO_writePin+0x164>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <GPIO_writePin+0x160>
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	2b c0       	rjmp	.+86     	; 0x140e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	a1 f4       	brne	.+40     	; 0x13e6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13be:	a2 e3       	ldi	r26, 0x32	; 50
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e2 e3       	ldi	r30, 0x32	; 50
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <GPIO_writePin+0x194>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <GPIO_writePin+0x190>
    13e0:	84 2b       	or	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13e6:	a2 e3       	ldi	r26, 0x32	; 50
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e2 e3       	ldi	r30, 0x32	; 50
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <GPIO_writePin+0x1bc>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <GPIO_writePin+0x1b8>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <GPIO_readPin+0x6>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <GPIO_readPin+0x8>
    1426:	0f 92       	push	r0
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	8a 83       	std	Y+2, r24	; 0x02
    142e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1430:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 30       	cpi	r24, 0x08	; 8
    1436:	08 f0       	brcs	.+2      	; 0x143a <GPIO_readPin+0x1c>
    1438:	84 c0       	rjmp	.+264    	; 0x1542 <GPIO_readPin+0x124>
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	84 30       	cpi	r24, 0x04	; 4
    143e:	08 f0       	brcs	.+2      	; 0x1442 <GPIO_readPin+0x24>
    1440:	80 c0       	rjmp	.+256    	; 0x1542 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3d 83       	std	Y+5, r19	; 0x05
    144a:	2c 83       	std	Y+4, r18	; 0x04
    144c:	4c 81       	ldd	r20, Y+4	; 0x04
    144e:	5d 81       	ldd	r21, Y+5	; 0x05
    1450:	41 30       	cpi	r20, 0x01	; 1
    1452:	51 05       	cpc	r21, r1
    1454:	79 f1       	breq	.+94     	; 0x14b4 <GPIO_readPin+0x96>
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	9d 81       	ldd	r25, Y+5	; 0x05
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	91 05       	cpc	r25, r1
    145e:	34 f4       	brge	.+12     	; 0x146c <GPIO_readPin+0x4e>
    1460:	2c 81       	ldd	r18, Y+4	; 0x04
    1462:	3d 81       	ldd	r19, Y+5	; 0x05
    1464:	21 15       	cp	r18, r1
    1466:	31 05       	cpc	r19, r1
    1468:	69 f0       	breq	.+26     	; 0x1484 <GPIO_readPin+0x66>
    146a:	6b c0       	rjmp	.+214    	; 0x1542 <GPIO_readPin+0x124>
    146c:	4c 81       	ldd	r20, Y+4	; 0x04
    146e:	5d 81       	ldd	r21, Y+5	; 0x05
    1470:	42 30       	cpi	r20, 0x02	; 2
    1472:	51 05       	cpc	r21, r1
    1474:	b9 f1       	breq	.+110    	; 0x14e4 <GPIO_readPin+0xc6>
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	9d 81       	ldd	r25, Y+5	; 0x05
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	91 05       	cpc	r25, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <GPIO_readPin+0x64>
    1480:	49 c0       	rjmp	.+146    	; 0x1514 <GPIO_readPin+0xf6>
    1482:	5f c0       	rjmp	.+190    	; 0x1542 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1484:	e9 e3       	ldi	r30, 0x39	; 57
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a9 01       	movw	r20, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_readPin+0x7e>
    1498:	55 95       	asr	r21
    149a:	47 95       	ror	r20
    149c:	8a 95       	dec	r24
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_readPin+0x7a>
    14a0:	ca 01       	movw	r24, r20
    14a2:	81 70       	andi	r24, 0x01	; 1
    14a4:	90 70       	andi	r25, 0x00	; 0
    14a6:	88 23       	and	r24, r24
    14a8:	19 f0       	breq	.+6      	; 0x14b0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	49 c0       	rjmp	.+146    	; 0x1542 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14b0:	19 82       	std	Y+1, r1	; 0x01
    14b2:	47 c0       	rjmp	.+142    	; 0x1542 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    14b4:	e6 e3       	ldi	r30, 0x36	; 54
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a9 01       	movw	r20, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_readPin+0xae>
    14c8:	55 95       	asr	r21
    14ca:	47 95       	ror	r20
    14cc:	8a 95       	dec	r24
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_readPin+0xaa>
    14d0:	ca 01       	movw	r24, r20
    14d2:	81 70       	andi	r24, 0x01	; 1
    14d4:	90 70       	andi	r25, 0x00	; 0
    14d6:	88 23       	and	r24, r24
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	31 c0       	rjmp	.+98     	; 0x1542 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	2f c0       	rjmp	.+94     	; 0x1542 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14e4:	e3 e3       	ldi	r30, 0x33	; 51
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a9 01       	movw	r20, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <GPIO_readPin+0xde>
    14f8:	55 95       	asr	r21
    14fa:	47 95       	ror	r20
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <GPIO_readPin+0xda>
    1500:	ca 01       	movw	r24, r20
    1502:	81 70       	andi	r24, 0x01	; 1
    1504:	90 70       	andi	r25, 0x00	; 0
    1506:	88 23       	and	r24, r24
    1508:	19 f0       	breq	.+6      	; 0x1510 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	19 c0       	rjmp	.+50     	; 0x1542 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1510:	19 82       	std	Y+1, r1	; 0x01
    1512:	17 c0       	rjmp	.+46     	; 0x1542 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1514:	e0 e3       	ldi	r30, 0x30	; 48
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a9 01       	movw	r20, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <GPIO_readPin+0x10e>
    1528:	55 95       	asr	r21
    152a:	47 95       	ror	r20
    152c:	8a 95       	dec	r24
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <GPIO_readPin+0x10a>
    1530:	ca 01       	movw	r24, r20
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	90 70       	andi	r25, 0x00	; 0
    1536:	88 23       	and	r24, r24
    1538:	19 f0       	breq	.+6      	; 0x1540 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1540:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <GPIO_setupPortDirection+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <GPIO_setupPortDirection+0x8>
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	90 f5       	brcc	.+100    	; 0x15ce <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3c 83       	std	Y+4, r19	; 0x04
    1572:	2b 83       	std	Y+3, r18	; 0x03
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	9c 81       	ldd	r25, Y+4	; 0x04
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	d1 f0       	breq	.+52     	; 0x15b2 <GPIO_setupPortDirection+0x5e>
    157e:	2b 81       	ldd	r18, Y+3	; 0x03
    1580:	3c 81       	ldd	r19, Y+4	; 0x04
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	2c f4       	brge	.+10     	; 0x1592 <GPIO_setupPortDirection+0x3e>
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	61 f0       	breq	.+24     	; 0x15a8 <GPIO_setupPortDirection+0x54>
    1590:	1e c0       	rjmp	.+60     	; 0x15ce <GPIO_setupPortDirection+0x7a>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	81 f0       	breq	.+32     	; 0x15bc <GPIO_setupPortDirection+0x68>
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	9c 81       	ldd	r25, Y+4	; 0x04
    15a0:	83 30       	cpi	r24, 0x03	; 3
    15a2:	91 05       	cpc	r25, r1
    15a4:	81 f0       	breq	.+32     	; 0x15c6 <GPIO_setupPortDirection+0x72>
    15a6:	13 c0       	rjmp	.+38     	; 0x15ce <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15a8:	ea e3       	ldi	r30, 0x3A	; 58
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	80 83       	st	Z, r24
    15b0:	0e c0       	rjmp	.+28     	; 0x15ce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15b2:	e7 e3       	ldi	r30, 0x37	; 55
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 83       	st	Z, r24
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15bc:	e4 e3       	ldi	r30, 0x34	; 52
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	80 83       	st	Z, r24
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15c6:	e1 e3       	ldi	r30, 0x31	; 49
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	80 83       	st	Z, r24
			break;
		}
	}
}
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <GPIO_writePort+0x6>
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <GPIO_writePort+0x8>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	84 30       	cpi	r24, 0x04	; 4
    15f0:	90 f5       	brcc	.+100    	; 0x1656 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3c 83       	std	Y+4, r19	; 0x04
    15fa:	2b 83       	std	Y+3, r18	; 0x03
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	91 05       	cpc	r25, r1
    1604:	d1 f0       	breq	.+52     	; 0x163a <GPIO_writePort+0x5e>
    1606:	2b 81       	ldd	r18, Y+3	; 0x03
    1608:	3c 81       	ldd	r19, Y+4	; 0x04
    160a:	22 30       	cpi	r18, 0x02	; 2
    160c:	31 05       	cpc	r19, r1
    160e:	2c f4       	brge	.+10     	; 0x161a <GPIO_writePort+0x3e>
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	61 f0       	breq	.+24     	; 0x1630 <GPIO_writePort+0x54>
    1618:	1e c0       	rjmp	.+60     	; 0x1656 <GPIO_writePort+0x7a>
    161a:	2b 81       	ldd	r18, Y+3	; 0x03
    161c:	3c 81       	ldd	r19, Y+4	; 0x04
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	81 f0       	breq	.+32     	; 0x1644 <GPIO_writePort+0x68>
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	91 05       	cpc	r25, r1
    162c:	81 f0       	breq	.+32     	; 0x164e <GPIO_writePort+0x72>
    162e:	13 c0       	rjmp	.+38     	; 0x1656 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1630:	eb e3       	ldi	r30, 0x3B	; 59
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	80 83       	st	Z, r24
    1638:	0e c0       	rjmp	.+28     	; 0x1656 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    163a:	e8 e3       	ldi	r30, 0x38	; 56
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	80 83       	st	Z, r24
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1644:	e5 e3       	ldi	r30, 0x35	; 53
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	80 83       	st	Z, r24
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    164e:	e2 e3       	ldi	r30, 0x32	; 50
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	80 83       	st	Z, r24
			break;
		}
	}
}
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <GPIO_readPort+0x6>
    166a:	00 d0       	rcall	.+0      	; 0x166c <GPIO_readPort+0x8>
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1672:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	84 30       	cpi	r24, 0x04	; 4
    1678:	90 f5       	brcc	.+100    	; 0x16de <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3c 83       	std	Y+4, r19	; 0x04
    1682:	2b 83       	std	Y+3, r18	; 0x03
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	d1 f0       	breq	.+52     	; 0x16c2 <GPIO_readPort+0x5e>
    168e:	2b 81       	ldd	r18, Y+3	; 0x03
    1690:	3c 81       	ldd	r19, Y+4	; 0x04
    1692:	22 30       	cpi	r18, 0x02	; 2
    1694:	31 05       	cpc	r19, r1
    1696:	2c f4       	brge	.+10     	; 0x16a2 <GPIO_readPort+0x3e>
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	61 f0       	breq	.+24     	; 0x16b8 <GPIO_readPort+0x54>
    16a0:	1e c0       	rjmp	.+60     	; 0x16de <GPIO_readPort+0x7a>
    16a2:	2b 81       	ldd	r18, Y+3	; 0x03
    16a4:	3c 81       	ldd	r19, Y+4	; 0x04
    16a6:	22 30       	cpi	r18, 0x02	; 2
    16a8:	31 05       	cpc	r19, r1
    16aa:	81 f0       	breq	.+32     	; 0x16cc <GPIO_readPort+0x68>
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	83 30       	cpi	r24, 0x03	; 3
    16b2:	91 05       	cpc	r25, r1
    16b4:	81 f0       	breq	.+32     	; 0x16d6 <GPIO_readPort+0x72>
    16b6:	13 c0       	rjmp	.+38     	; 0x16de <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    16b8:	e9 e3       	ldi	r30, 0x39	; 57
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	0e c0       	rjmp	.+28     	; 0x16de <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16c2:	e6 e3       	ldi	r30, 0x36	; 54
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16cc:	e3 e3       	ldi	r30, 0x33	; 51
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16d6:	e0 e3       	ldi	r30, 0x30	; 48
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16de:	89 81       	ldd	r24, Y+1	; 0x01
}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <decipherKey>:
/*
 * Description :
 * takes the number of the key pressed and returns the intended input
 */
static uint8 decipherKey(uint8 key_num)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <decipherKey+0x6>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <decipherKey+0x8>
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			return key_num;
		}
	#else
		switch (key_num)
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3c 83       	std	Y+4, r19	; 0x04
    1704:	2b 83       	std	Y+3, r18	; 0x03
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	88 30       	cpi	r24, 0x08	; 8
    170c:	91 05       	cpc	r25, r1
    170e:	09 f4       	brne	.+2      	; 0x1712 <decipherKey+0x24>
    1710:	70 c0       	rjmp	.+224    	; 0x17f2 <decipherKey+0x104>
    1712:	2b 81       	ldd	r18, Y+3	; 0x03
    1714:	3c 81       	ldd	r19, Y+4	; 0x04
    1716:	29 30       	cpi	r18, 0x09	; 9
    1718:	31 05       	cpc	r19, r1
    171a:	5c f5       	brge	.+86     	; 0x1772 <decipherKey+0x84>
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	84 30       	cpi	r24, 0x04	; 4
    1722:	91 05       	cpc	r25, r1
    1724:	09 f4       	brne	.+2      	; 0x1728 <decipherKey+0x3a>
    1726:	59 c0       	rjmp	.+178    	; 0x17da <decipherKey+0xec>
    1728:	2b 81       	ldd	r18, Y+3	; 0x03
    172a:	3c 81       	ldd	r19, Y+4	; 0x04
    172c:	25 30       	cpi	r18, 0x05	; 5
    172e:	31 05       	cpc	r19, r1
    1730:	9c f4       	brge	.+38     	; 0x1758 <decipherKey+0x6a>
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	91 05       	cpc	r25, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <decipherKey+0x50>
    173c:	48 c0       	rjmp	.+144    	; 0x17ce <decipherKey+0xe0>
    173e:	2b 81       	ldd	r18, Y+3	; 0x03
    1740:	3c 81       	ldd	r19, Y+4	; 0x04
    1742:	23 30       	cpi	r18, 0x03	; 3
    1744:	31 05       	cpc	r19, r1
    1746:	0c f0       	brlt	.+2      	; 0x174a <decipherKey+0x5c>
    1748:	45 c0       	rjmp	.+138    	; 0x17d4 <decipherKey+0xe6>
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <decipherKey+0x68>
    1754:	39 c0       	rjmp	.+114    	; 0x17c8 <decipherKey+0xda>
    1756:	67 c0       	rjmp	.+206    	; 0x1826 <decipherKey+0x138>
    1758:	2b 81       	ldd	r18, Y+3	; 0x03
    175a:	3c 81       	ldd	r19, Y+4	; 0x04
    175c:	26 30       	cpi	r18, 0x06	; 6
    175e:	31 05       	cpc	r19, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <decipherKey+0x76>
    1762:	41 c0       	rjmp	.+130    	; 0x17e6 <decipherKey+0xf8>
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	87 30       	cpi	r24, 0x07	; 7
    176a:	91 05       	cpc	r25, r1
    176c:	0c f0       	brlt	.+2      	; 0x1770 <decipherKey+0x82>
    176e:	3e c0       	rjmp	.+124    	; 0x17ec <decipherKey+0xfe>
    1770:	37 c0       	rjmp	.+110    	; 0x17e0 <decipherKey+0xf2>
    1772:	2b 81       	ldd	r18, Y+3	; 0x03
    1774:	3c 81       	ldd	r19, Y+4	; 0x04
    1776:	2c 30       	cpi	r18, 0x0C	; 12
    1778:	31 05       	cpc	r19, r1
    177a:	09 f4       	brne	.+2      	; 0x177e <decipherKey+0x90>
    177c:	46 c0       	rjmp	.+140    	; 0x180a <decipherKey+0x11c>
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	8d 30       	cpi	r24, 0x0D	; 13
    1784:	91 05       	cpc	r25, r1
    1786:	5c f4       	brge	.+22     	; 0x179e <decipherKey+0xb0>
    1788:	2b 81       	ldd	r18, Y+3	; 0x03
    178a:	3c 81       	ldd	r19, Y+4	; 0x04
    178c:	2a 30       	cpi	r18, 0x0A	; 10
    178e:	31 05       	cpc	r19, r1
    1790:	b1 f1       	breq	.+108    	; 0x17fe <decipherKey+0x110>
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	8b 30       	cpi	r24, 0x0B	; 11
    1798:	91 05       	cpc	r25, r1
    179a:	a4 f5       	brge	.+104    	; 0x1804 <decipherKey+0x116>
    179c:	2d c0       	rjmp	.+90     	; 0x17f8 <decipherKey+0x10a>
    179e:	2b 81       	ldd	r18, Y+3	; 0x03
    17a0:	3c 81       	ldd	r19, Y+4	; 0x04
    17a2:	2e 30       	cpi	r18, 0x0E	; 14
    17a4:	31 05       	cpc	r19, r1
    17a6:	b9 f1       	breq	.+110    	; 0x1816 <decipherKey+0x128>
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	8e 30       	cpi	r24, 0x0E	; 14
    17ae:	91 05       	cpc	r25, r1
    17b0:	7c f1       	brlt	.+94     	; 0x1810 <decipherKey+0x122>
    17b2:	2b 81       	ldd	r18, Y+3	; 0x03
    17b4:	3c 81       	ldd	r19, Y+4	; 0x04
    17b6:	2f 30       	cpi	r18, 0x0F	; 15
    17b8:	31 05       	cpc	r19, r1
    17ba:	79 f1       	breq	.+94     	; 0x181a <decipherKey+0x12c>
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	80 31       	cpi	r24, 0x10	; 16
    17c2:	91 05       	cpc	r25, r1
    17c4:	69 f1       	breq	.+90     	; 0x1820 <decipherKey+0x132>
    17c6:	2f c0       	rjmp	.+94     	; 0x1826 <decipherKey+0x138>
		{
		case 1:
			return 7;
    17c8:	97 e0       	ldi	r25, 0x07	; 7
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	2d c0       	rjmp	.+90     	; 0x1828 <decipherKey+0x13a>
			break;
		case 2:
			return 8;
    17ce:	28 e0       	ldi	r18, 0x08	; 8
    17d0:	2a 83       	std	Y+2, r18	; 0x02
    17d2:	2a c0       	rjmp	.+84     	; 0x1828 <decipherKey+0x13a>
			break;
		case 3:
			return 9;
    17d4:	39 e0       	ldi	r19, 0x09	; 9
    17d6:	3a 83       	std	Y+2, r19	; 0x02
    17d8:	27 c0       	rjmp	.+78     	; 0x1828 <decipherKey+0x13a>
			break;
		case 4:
			return '%';
    17da:	85 e2       	ldi	r24, 0x25	; 37
    17dc:	8a 83       	std	Y+2, r24	; 0x02
    17de:	24 c0       	rjmp	.+72     	; 0x1828 <decipherKey+0x13a>
			break;
		case 5:
			return 4;
    17e0:	94 e0       	ldi	r25, 0x04	; 4
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	21 c0       	rjmp	.+66     	; 0x1828 <decipherKey+0x13a>
			break;
		case 6:
			return 5;
    17e6:	25 e0       	ldi	r18, 0x05	; 5
    17e8:	2a 83       	std	Y+2, r18	; 0x02
    17ea:	1e c0       	rjmp	.+60     	; 0x1828 <decipherKey+0x13a>
			break;
		case 7:
			return 6;
    17ec:	36 e0       	ldi	r19, 0x06	; 6
    17ee:	3a 83       	std	Y+2, r19	; 0x02
    17f0:	1b c0       	rjmp	.+54     	; 0x1828 <decipherKey+0x13a>
			break;
		case 8:
			return '*';
    17f2:	8a e2       	ldi	r24, 0x2A	; 42
    17f4:	8a 83       	std	Y+2, r24	; 0x02
    17f6:	18 c0       	rjmp	.+48     	; 0x1828 <decipherKey+0x13a>
			break;
		case 9:
			return 1;
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	15 c0       	rjmp	.+42     	; 0x1828 <decipherKey+0x13a>
			break;
		case 10:
			return 2;
    17fe:	22 e0       	ldi	r18, 0x02	; 2
    1800:	2a 83       	std	Y+2, r18	; 0x02
    1802:	12 c0       	rjmp	.+36     	; 0x1828 <decipherKey+0x13a>
			break;
		case 11:
			return 3;
    1804:	33 e0       	ldi	r19, 0x03	; 3
    1806:	3a 83       	std	Y+2, r19	; 0x02
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <decipherKey+0x13a>
			break;
		case 12:
			return  '-';
    180a:	8d e2       	ldi	r24, 0x2D	; 45
    180c:	8a 83       	std	Y+2, r24	; 0x02
    180e:	0c c0       	rjmp	.+24     	; 0x1828 <decipherKey+0x13a>
			break;
		case 13:
			return '!';
    1810:	91 e2       	ldi	r25, 0x21	; 33
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <decipherKey+0x13a>
			break;
		case 14:
			return 0;
    1816:	1a 82       	std	Y+2, r1	; 0x02
    1818:	07 c0       	rjmp	.+14     	; 0x1828 <decipherKey+0x13a>
			break;
		case 15:
			return '=';
    181a:	2d e3       	ldi	r18, 0x3D	; 61
    181c:	2a 83       	std	Y+2, r18	; 0x02
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <decipherKey+0x13a>
			break;
		case 16:
			return '+';
    1820:	3b e2       	ldi	r19, 0x2B	; 43
    1822:	3a 83       	std	Y+2, r19	; 0x02
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <decipherKey+0x13a>
			break;
		default:
			return 0;
    1826:	1a 82       	std	Y+2, r1	; 0x02
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
		}

	#endif
#endif
}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <KEYPAD_getPressedKey>:
/*
 * Description :
 * get the pressed key number and return its value
 */
uint8 KEYPAD_getPressedKey(void)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	60 97       	sbiw	r28, 0x10	; 16
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
	uint8 row,col;/* counters for the loops */
	/* setup all the pins as input */
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID, PIN_INPUT);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	64 e0       	ldi	r22, 0x04	; 4
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID+1, PIN_INPUT);
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	65 e0       	ldi	r22, 0x05	; 5
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID+2, PIN_INPUT);
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	66 e0       	ldi	r22, 0x06	; 6
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID+3, PIN_INPUT);
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	67 e0       	ldi	r22, 0x07	; 7
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID, PIN_INPUT);
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID+1, PIN_INPUT);
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID+2, PIN_INPUT);
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	62 e0       	ldi	r22, 0x02	; 2
    188c:	40 e0       	ldi	r20, 0x00	; 0
    188e:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_OF_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID+3, PIN_INPUT);
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	63 e0       	ldi	r22, 0x03	; 3
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
#endif

	/* loop through all the keys until we find a pressed key */
	for(;;)
	{
		for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    189c:	18 8a       	std	Y+16, r1	; 0x10
    189e:	b1 c0       	rjmp	.+354    	; 0x1a02 <KEYPAD_getPressedKey+0x1ca>
		{
			/* set one row as output and enable it */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_OUTPUT);
    18a0:	88 89       	ldd	r24, Y+16	; 0x10
    18a2:	98 2f       	mov	r25, r24
    18a4:	9c 5f       	subi	r25, 0xFC	; 252
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	69 2f       	mov	r22, r25
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, KEYPAD_KEY_PRESSED);
    18b0:	88 89       	ldd	r24, Y+16	; 0x10
    18b2:	98 2f       	mov	r25, r24
    18b4:	9c 5f       	subi	r25, 0xFC	; 252
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	69 2f       	mov	r22, r25
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
			/* loop through all the key in the enabled row */
			for(col=0; col<KEYPAD_NUM_OF_COLS; col++)
    18c0:	1f 86       	std	Y+15, r1	; 0x0f
    18c2:	1f c0       	rjmp	.+62     	; 0x1902 <KEYPAD_getPressedKey+0xca>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID + col) == KEYPAD_KEY_PRESSED)
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    18c8:	0e 94 0f 0a 	call	0x141e	; 0x141e <GPIO_readPin>
    18cc:	88 23       	and	r24, r24
    18ce:	b1 f4       	brne	.+44     	; 0x18fc <KEYPAD_getPressedKey+0xc4>
				{
					/* after finding a pressed key return the input intended by it */
					#if (KEYPAD_BASIC)
						return (row * KEYPAD_NUM_OF_COLS + col + 1);
					#else
						return decipherKey(row * KEYPAD_NUM_OF_COLS + col + 1);
    18d0:	88 89       	ldd	r24, Y+16	; 0x10
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	98 2f       	mov	r25, r24
    18e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e2:	89 0f       	add	r24, r25
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <decipherKey>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(10);
		}
	}
	return 0;
}
    18ea:	60 96       	adiw	r28, 0x10	; 16
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret
		{
			/* set one row as output and enable it */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, KEYPAD_KEY_PRESSED);
			/* loop through all the key in the enabled row */
			for(col=0; col<KEYPAD_NUM_OF_COLS; col++)
    18fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	8f 87       	std	Y+15, r24	; 0x0f
    1902:	8f 85       	ldd	r24, Y+15	; 0x0f
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	f0 f2       	brcs	.-68     	; 0x18c4 <KEYPAD_getPressedKey+0x8c>
						return decipherKey(row * KEYPAD_NUM_OF_COLS + col + 1);
					#endif
				}
			}
			/* set the same row as input to disable it */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
    1908:	88 89       	ldd	r24, Y+16	; 0x10
    190a:	98 2f       	mov	r25, r24
    190c:	9c 5f       	subi	r25, 0xFC	; 252
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	69 2f       	mov	r22, r25
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a0 e2       	ldi	r26, 0x20	; 32
    191e:	b1 e4       	ldi	r27, 0x41	; 65
    1920:	8b 87       	std	Y+11, r24	; 0x0b
    1922:	9c 87       	std	Y+12, r25	; 0x0c
    1924:	ad 87       	std	Y+13, r26	; 0x0d
    1926:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1928:	6b 85       	ldd	r22, Y+11	; 0x0b
    192a:	7c 85       	ldd	r23, Y+12	; 0x0c
    192c:	8d 85       	ldd	r24, Y+13	; 0x0d
    192e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	4a ef       	ldi	r20, 0xFA	; 250
    1936:	54 e4       	ldi	r21, 0x44	; 68
    1938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	8f 83       	std	Y+7, r24	; 0x07
    1942:	98 87       	std	Y+8, r25	; 0x08
    1944:	a9 87       	std	Y+9, r26	; 0x09
    1946:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	78 85       	ldd	r23, Y+8	; 0x08
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e8       	ldi	r20, 0x80	; 128
    1956:	5f e3       	ldi	r21, 0x3F	; 63
    1958:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195c:	88 23       	and	r24, r24
    195e:	2c f4       	brge	.+10     	; 0x196a <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	3f c0       	rjmp	.+126    	; 0x19e8 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	3f ef       	ldi	r19, 0xFF	; 255
    1976:	4f e7       	ldi	r20, 0x7F	; 127
    1978:	57 e4       	ldi	r21, 0x47	; 71
    197a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    197e:	18 16       	cp	r1, r24
    1980:	4c f5       	brge	.+82     	; 0x19d4 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1982:	6b 85       	ldd	r22, Y+11	; 0x0b
    1984:	7c 85       	ldd	r23, Y+12	; 0x0c
    1986:	8d 85       	ldd	r24, Y+13	; 0x0d
    1988:	9e 85       	ldd	r25, Y+14	; 0x0e
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e2       	ldi	r20, 0x20	; 32
    1990:	51 e4       	ldi	r21, 0x41	; 65
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	bc 01       	movw	r22, r24
    199c:	cd 01       	movw	r24, r26
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	0f c0       	rjmp	.+30     	; 0x19ca <KEYPAD_getPressedKey+0x192>
    19ac:	88 ec       	ldi	r24, 0xC8	; 200
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9c 83       	std	Y+4, r25	; 0x04
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <KEYPAD_getPressedKey+0x180>
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	69 f7       	brne	.-38     	; 0x19ac <KEYPAD_getPressedKey+0x174>
    19d2:	14 c0       	rjmp	.+40     	; 0x19fc <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d4:	6f 81       	ldd	r22, Y+7	; 0x07
    19d6:	78 85       	ldd	r23, Y+8	; 0x08
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <KEYPAD_getPressedKey+0x1bc>
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
#endif

	/* loop through all the keys until we find a pressed key */
	for(;;)
	{
		for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    19fc:	88 89       	ldd	r24, Y+16	; 0x10
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	88 8b       	std	Y+16, r24	; 0x10
    1a02:	88 89       	ldd	r24, Y+16	; 0x10
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	08 f4       	brcc	.+2      	; 0x1a0a <KEYPAD_getPressedKey+0x1d2>
    1a08:	4b cf       	rjmp	.-362    	; 0x18a0 <KEYPAD_getPressedKey+0x68>
    1a0a:	48 cf       	rjmp	.-368    	; 0x189c <KEYPAD_getPressedKey+0x64>

00001a0c <LCD_init>:
 * initialize the LCD ports
 * configure 2 lines 8 bit mode
 * clear the screen and disable cursor
 */
void LCD_init(void)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	2e 97       	sbiw	r28, 0x0e	; 14
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
	/* configure RS pin output */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	41 e0       	ldi	r20, 0x01	; 1
    1a26:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	/* configure enable pin output */
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	/* choose 2 lines 8 bits mode */
	LCD_sendCommand(LCD_2LINES_8BITS_MODE);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	/* configure data pins output for 8 bit operations */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, PIN_OUTPUT);
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	64 e0       	ldi	r22, 0x04	; 4
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, PIN_OUTPUT);
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	65 e0       	ldi	r22, 0x05	; 5
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, PIN_OUTPUT);
    1a48:	82 e0       	ldi	r24, 0x02	; 2
    1a4a:	66 e0       	ldi	r22, 0x06	; 6
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, PIN_OUTPUT);
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	67 e0       	ldi	r22, 0x07	; 7
    1a56:	41 e0       	ldi	r20, 0x01	; 1
    1a58:	0e 94 39 08 	call	0x1072	; 0x1072 <GPIO_setupPinDirection>

	/* send 4 bits initialization */
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT1);
    1a5c:	83 e3       	ldi	r24, 0x33	; 51
    1a5e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT2);
    1a62:	82 e3       	ldi	r24, 0x32	; 50
    1a64:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
	/* choose 2 lines 4 bits mode */
	LCD_sendCommand(LCD_2LINES_4BITS_MODE);
    1a68:	88 e2       	ldi	r24, 0x28	; 40
    1a6a:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 ea       	ldi	r26, 0xA0	; 160
    1a74:	b1 e4       	ldi	r27, 0x41	; 65
    1a76:	8b 87       	std	Y+11, r24	; 0x0b
    1a78:	9c 87       	std	Y+12, r25	; 0x0c
    1a7a:	ad 87       	std	Y+13, r26	; 0x0d
    1a7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a ef       	ldi	r20, 0xFA	; 250
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8f 83       	std	Y+7, r24	; 0x07
    1a98:	98 87       	std	Y+8, r25	; 0x08
    1a9a:	a9 87       	std	Y+9, r26	; 0x09
    1a9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <LCD_init+0xb4>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <LCD_init+0x132>
	else if (__tmp > 65535)
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <LCD_init+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    1adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_init+0x114>
    1b02:	88 ec       	ldi	r24, 0xC8	; 200
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_init+0x102>
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_init+0xf6>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <LCD_init+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2c:	78 85       	ldd	r23, Y+8	; 0x08
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_init+0x13e>
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(20);
	LCD_sendCommand(LCD_DISABLE_CURSOR);
    1b52:	8c e0       	ldi	r24, 0x0C	; 12
    1b54:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
}
    1b5e:	2e 96       	adiw	r28, 0x0e	; 14
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <LCD_sendCommand>:
/*
 * Description :
 * send a command to the LCD
 */
void LCD_sendCommand(uint8 command)
{
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	c3 56       	subi	r28, 0x63	; 99
    1b7e:	d0 40       	sbci	r29, 0x00	; 0
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ed 59       	subi	r30, 0x9D	; 157
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	80 83       	st	Z, r24
	/* set RS to low to send a command */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e1 5a       	subi	r30, 0xA1	; 161
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a0 e8       	ldi	r26, 0x80	; 128
    1ba8:	bf e3       	ldi	r27, 0x3F	; 63
    1baa:	80 83       	st	Z, r24
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	a2 83       	std	Z+2, r26	; 0x02
    1bb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	05 5a       	subi	r16, 0xA5	; 165
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e1 5a       	subi	r30, 0xA1	; 161
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a ef       	ldi	r20, 0xFA	; 250
    1bcc:	54 e4       	ldi	r21, 0x44	; 68
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	80 83       	st	Z, r24
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	a2 83       	std	Z+2, r26	; 0x02
    1bde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be0:	fe 01       	movw	r30, r28
    1be2:	e5 5a       	subi	r30, 0xA5	; 165
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e8       	ldi	r20, 0x80	; 128
    1bf4:	5f e3       	ldi	r21, 0x3F	; 63
    1bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfa:	88 23       	and	r24, r24
    1bfc:	44 f4       	brge	.+16     	; 0x1c0e <LCD_sendCommand+0x9e>
		__ticks = 1;
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e7 5a       	subi	r30, 0xA7	; 167
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	80 83       	st	Z, r24
    1c0c:	64 c0       	rjmp	.+200    	; 0x1cd6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1c0e:	fe 01       	movw	r30, r28
    1c10:	e5 5a       	subi	r30, 0xA5	; 165
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	3f ef       	ldi	r19, 0xFF	; 255
    1c20:	4f e7       	ldi	r20, 0x7F	; 127
    1c22:	57 e4       	ldi	r21, 0x47	; 71
    1c24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c28:	18 16       	cp	r1, r24
    1c2a:	0c f0       	brlt	.+2      	; 0x1c2e <LCD_sendCommand+0xbe>
    1c2c:	43 c0       	rjmp	.+134    	; 0x1cb4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e1 5a       	subi	r30, 0xA1	; 161
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8e 01       	movw	r16, r28
    1c4e:	07 5a       	subi	r16, 0xA7	; 167
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	f8 01       	movw	r30, r16
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	80 83       	st	Z, r24
    1c64:	1f c0       	rjmp	.+62     	; 0x1ca4 <LCD_sendCommand+0x134>
    1c66:	fe 01       	movw	r30, r28
    1c68:	e9 5a       	subi	r30, 0xA9	; 169
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	88 ec       	ldi	r24, 0xC8	; 200
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	91 83       	std	Z+1, r25	; 0x01
    1c72:	80 83       	st	Z, r24
    1c74:	fe 01       	movw	r30, r28
    1c76:	e9 5a       	subi	r30, 0xA9	; 169
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <LCD_sendCommand+0x10e>
    1c82:	fe 01       	movw	r30, r28
    1c84:	e9 5a       	subi	r30, 0xA9	; 169
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8c:	de 01       	movw	r26, r28
    1c8e:	a7 5a       	subi	r26, 0xA7	; 167
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	e7 5a       	subi	r30, 0xA7	; 167
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	9c 93       	st	X, r25
    1ca2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e7 5a       	subi	r30, 0xA7	; 167
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	d1 f6       	brne	.-76     	; 0x1c66 <LCD_sendCommand+0xf6>
    1cb2:	27 c0       	rjmp	.+78     	; 0x1d02 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	8e 01       	movw	r16, r28
    1cb6:	07 5a       	subi	r16, 0xA7	; 167
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e5 5a       	subi	r30, 0xA5	; 165
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
    1cd6:	de 01       	movw	r26, r28
    1cd8:	ab 5a       	subi	r26, 0xAB	; 171
    1cda:	bf 4f       	sbci	r27, 0xFF	; 255
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e7 5a       	subi	r30, 0xA7	; 167
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	8d 93       	st	X+, r24
    1ce8:	9c 93       	st	X, r25
    1cea:	fe 01       	movw	r30, r28
    1cec:	eb 5a       	subi	r30, 0xAB	; 171
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_sendCommand+0x184>
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	eb 5a       	subi	r30, 0xAB	; 171
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	80 83       	st	Z, r24
	_delay_ms(1);
	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ef 5a       	subi	r30, 0xAF	; 175
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e8       	ldi	r26, 0x80	; 128
    1d18:	bf e3       	ldi	r27, 0x3F	; 63
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	a2 83       	std	Z+2, r26	; 0x02
    1d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	8e 01       	movw	r16, r28
    1d24:	03 5b       	subi	r16, 0xB3	; 179
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ef 5a       	subi	r30, 0xAF	; 175
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	60 81       	ld	r22, Z
    1d30:	71 81       	ldd	r23, Z+1	; 0x01
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a ef       	ldi	r20, 0xFA	; 250
    1d3c:	54 e4       	ldi	r21, 0x44	; 68
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 83       	st	Z, r24
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	a2 83       	std	Z+2, r26	; 0x02
    1d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d50:	fe 01       	movw	r30, r28
    1d52:	e3 5b       	subi	r30, 0xB3	; 179
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	44 f4       	brge	.+16     	; 0x1d7e <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e5 5b       	subi	r30, 0xB5	; 181
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	64 c0       	rjmp	.+200    	; 0x1e46 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e3 5b       	subi	r30, 0xB3	; 179
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	3f ef       	ldi	r19, 0xFF	; 255
    1d90:	4f e7       	ldi	r20, 0x7F	; 127
    1d92:	57 e4       	ldi	r21, 0x47	; 71
    1d94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d98:	18 16       	cp	r1, r24
    1d9a:	0c f0       	brlt	.+2      	; 0x1d9e <LCD_sendCommand+0x22e>
    1d9c:	43 c0       	rjmp	.+134    	; 0x1e24 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ef 5a       	subi	r30, 0xAF	; 175
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	8e 01       	movw	r16, r28
    1dbe:	05 5b       	subi	r16, 0xB5	; 181
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	f8 01       	movw	r30, r16
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
    1dd4:	1f c0       	rjmp	.+62     	; 0x1e14 <LCD_sendCommand+0x2a4>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e7 5b       	subi	r30, 0xB7	; 183
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	88 ec       	ldi	r24, 0xC8	; 200
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	80 83       	st	Z, r24
    1de4:	fe 01       	movw	r30, r28
    1de6:	e7 5b       	subi	r30, 0xB7	; 183
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCD_sendCommand+0x27e>
    1df2:	fe 01       	movw	r30, r28
    1df4:	e7 5b       	subi	r30, 0xB7	; 183
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	de 01       	movw	r26, r28
    1dfe:	a5 5b       	subi	r26, 0xB5	; 181
    1e00:	bf 4f       	sbci	r27, 0xFF	; 255
    1e02:	fe 01       	movw	r30, r28
    1e04:	e5 5b       	subi	r30, 0xB5	; 181
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	11 96       	adiw	r26, 0x01	; 1
    1e10:	9c 93       	st	X, r25
    1e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	fe 01       	movw	r30, r28
    1e16:	e5 5b       	subi	r30, 0xB5	; 181
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	d1 f6       	brne	.-76     	; 0x1dd6 <LCD_sendCommand+0x266>
    1e22:	27 c0       	rjmp	.+78     	; 0x1e72 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	8e 01       	movw	r16, r28
    1e26:	05 5b       	subi	r16, 0xB5	; 181
    1e28:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e3 5b       	subi	r30, 0xB3	; 179
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	80 83       	st	Z, r24
    1e46:	de 01       	movw	r26, r28
    1e48:	a9 5b       	subi	r26, 0xB9	; 185
    1e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e5 5b       	subi	r30, 0xB5	; 181
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	91 81       	ldd	r25, Z+1	; 0x01
    1e56:	8d 93       	st	X+, r24
    1e58:	9c 93       	st	X, r25
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e9 5b       	subi	r30, 0xB9	; 185
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	91 81       	ldd	r25, Z+1	; 0x01
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_sendCommand+0x2f4>
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e9 5b       	subi	r30, 0xB9	; 185
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	80 83       	st	Z, r24

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(command, 4));
    1e72:	fe 01       	movw	r30, r28
    1e74:	ed 59       	subi	r30, 0x9D	; 157
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	80 81       	ld	r24, Z
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	80 71       	andi	r24, 0x10	; 16
    1e80:	90 70       	andi	r25, 0x00	; 0
    1e82:	95 95       	asr	r25
    1e84:	87 95       	ror	r24
    1e86:	95 95       	asr	r25
    1e88:	87 95       	ror	r24
    1e8a:	95 95       	asr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	95 95       	asr	r25
    1e90:	87 95       	ror	r24
    1e92:	98 2f       	mov	r25, r24
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	64 e0       	ldi	r22, 0x04	; 4
    1e98:	49 2f       	mov	r20, r25
    1e9a:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(command, 5));
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	ed 59       	subi	r30, 0x9D	; 157
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	80 72       	andi	r24, 0x20	; 32
    1eac:	90 70       	andi	r25, 0x00	; 0
    1eae:	95 95       	asr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	95 95       	asr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	95 95       	asr	r25
    1eb8:	87 95       	ror	r24
    1eba:	95 95       	asr	r25
    1ebc:	87 95       	ror	r24
    1ebe:	95 95       	asr	r25
    1ec0:	87 95       	ror	r24
    1ec2:	98 2f       	mov	r25, r24
    1ec4:	82 e0       	ldi	r24, 0x02	; 2
    1ec6:	65 e0       	ldi	r22, 0x05	; 5
    1ec8:	49 2f       	mov	r20, r25
    1eca:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(command, 6));
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ed 59       	subi	r30, 0x9D	; 157
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	80 74       	andi	r24, 0x40	; 64
    1edc:	90 70       	andi	r25, 0x00	; 0
    1ede:	08 2e       	mov	r0, r24
    1ee0:	89 2f       	mov	r24, r25
    1ee2:	00 0c       	add	r0, r0
    1ee4:	88 1f       	adc	r24, r24
    1ee6:	99 0b       	sbc	r25, r25
    1ee8:	00 0c       	add	r0, r0
    1eea:	88 1f       	adc	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	98 2f       	mov	r25, r24
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	66 e0       	ldi	r22, 0x06	; 6
    1ef4:	49 2f       	mov	r20, r25
    1ef6:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(command, 7));
    1efa:	fe 01       	movw	r30, r28
    1efc:	ed 59       	subi	r30, 0x9D	; 157
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	98 2f       	mov	r25, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	99 27       	eor	r25, r25
    1f08:	99 1f       	adc	r25, r25
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	67 e0       	ldi	r22, 0x07	; 7
    1f0e:	49 2f       	mov	r20, r25
    1f10:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    1f14:	fe 01       	movw	r30, r28
    1f16:	ed 5b       	subi	r30, 0xBD	; 189
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e8       	ldi	r26, 0x80	; 128
    1f20:	bf e3       	ldi	r27, 0x3F	; 63
    1f22:	80 83       	st	Z, r24
    1f24:	91 83       	std	Z+1, r25	; 0x01
    1f26:	a2 83       	std	Z+2, r26	; 0x02
    1f28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	01 5c       	subi	r16, 0xC1	; 193
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	ed 5b       	subi	r30, 0xBD	; 189
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a ef       	ldi	r20, 0xFA	; 250
    1f44:	54 e4       	ldi	r21, 0x44	; 68
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	f8 01       	movw	r30, r16
    1f50:	80 83       	st	Z, r24
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	a2 83       	std	Z+2, r26	; 0x02
    1f56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ff 96       	adiw	r30, 0x3f	; 63
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e8       	ldi	r20, 0x80	; 128
    1f6a:	5f e3       	ldi	r21, 0x3F	; 63
    1f6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f70:	88 23       	and	r24, r24
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9e af       	std	Y+62, r25	; 0x3e
    1f7a:	8d af       	std	Y+61, r24	; 0x3d
    1f7c:	46 c0       	rjmp	.+140    	; 0x200a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ff 96       	adiw	r30, 0x3f	; 63
    1f82:	60 81       	ld	r22, Z
    1f84:	71 81       	ldd	r23, Z+1	; 0x01
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	93 81       	ldd	r25, Z+3	; 0x03
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	64 f5       	brge	.+88     	; 0x1ff2 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	ed 5b       	subi	r30, 0xBD	; 189
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e2       	ldi	r20, 0x20	; 32
    1fae:	51 e4       	ldi	r21, 0x41	; 65
    1fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	9e af       	std	Y+62, r25	; 0x3e
    1fc6:	8d af       	std	Y+61, r24	; 0x3d
    1fc8:	0f c0       	rjmp	.+30     	; 0x1fe8 <LCD_sendCommand+0x478>
    1fca:	88 ec       	ldi	r24, 0xC8	; 200
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	9c af       	std	Y+60, r25	; 0x3c
    1fd0:	8b af       	std	Y+59, r24	; 0x3b
    1fd2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fd4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <LCD_sendCommand+0x466>
    1fda:	9c af       	std	Y+60, r25	; 0x3c
    1fdc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fde:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fe0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	9e af       	std	Y+62, r25	; 0x3e
    1fe6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fea:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	69 f7       	brne	.-38     	; 0x1fca <LCD_sendCommand+0x45a>
    1ff0:	16 c0       	rjmp	.+44     	; 0x201e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ff 96       	adiw	r30, 0x3f	; 63
    1ff6:	60 81       	ld	r22, Z
    1ff8:	71 81       	ldd	r23, Z+1	; 0x01
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	93 81       	ldd	r25, Z+3	; 0x03
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e af       	std	Y+62, r25	; 0x3e
    2008:	8d af       	std	Y+61, r24	; 0x3d
    200a:	8d ad       	ldd	r24, Y+61	; 0x3d
    200c:	9e ad       	ldd	r25, Y+62	; 0x3e
    200e:	9a af       	std	Y+58, r25	; 0x3a
    2010:	89 af       	std	Y+57, r24	; 0x39
    2012:	89 ad       	ldd	r24, Y+57	; 0x39
    2014:	9a ad       	ldd	r25, Y+58	; 0x3a
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <LCD_sendCommand+0x4a6>
    201a:	9a af       	std	Y+58, r25	; 0x3a
    201c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* set enable bit to low*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    201e:	82 e0       	ldi	r24, 0x02	; 2
    2020:	61 e0       	ldi	r22, 0x01	; 1
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 e8       	ldi	r26, 0x80	; 128
    202e:	bf e3       	ldi	r27, 0x3F	; 63
    2030:	8d ab       	std	Y+53, r24	; 0x35
    2032:	9e ab       	std	Y+54, r25	; 0x36
    2034:	af ab       	std	Y+55, r26	; 0x37
    2036:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2038:	6d a9       	ldd	r22, Y+53	; 0x35
    203a:	7e a9       	ldd	r23, Y+54	; 0x36
    203c:	8f a9       	ldd	r24, Y+55	; 0x37
    203e:	98 ad       	ldd	r25, Y+56	; 0x38
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a ef       	ldi	r20, 0xFA	; 250
    2046:	54 e4       	ldi	r21, 0x44	; 68
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	89 ab       	std	Y+49, r24	; 0x31
    2052:	9a ab       	std	Y+50, r25	; 0x32
    2054:	ab ab       	std	Y+51, r26	; 0x33
    2056:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2058:	69 a9       	ldd	r22, Y+49	; 0x31
    205a:	7a a9       	ldd	r23, Y+50	; 0x32
    205c:	8b a9       	ldd	r24, Y+51	; 0x33
    205e:	9c a9       	ldd	r25, Y+52	; 0x34
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	2c f4       	brge	.+10     	; 0x207a <LCD_sendCommand+0x50a>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	98 ab       	std	Y+48, r25	; 0x30
    2076:	8f a7       	std	Y+47, r24	; 0x2f
    2078:	3f c0       	rjmp	.+126    	; 0x20f8 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    207a:	69 a9       	ldd	r22, Y+49	; 0x31
    207c:	7a a9       	ldd	r23, Y+50	; 0x32
    207e:	8b a9       	ldd	r24, Y+51	; 0x33
    2080:	9c a9       	ldd	r25, Y+52	; 0x34
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	4c f5       	brge	.+82     	; 0x20e4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	6d a9       	ldd	r22, Y+53	; 0x35
    2094:	7e a9       	ldd	r23, Y+54	; 0x36
    2096:	8f a9       	ldd	r24, Y+55	; 0x37
    2098:	98 ad       	ldd	r25, Y+56	; 0x38
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	98 ab       	std	Y+48, r25	; 0x30
    20b8:	8f a7       	std	Y+47, r24	; 0x2f
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <LCD_sendCommand+0x56a>
    20bc:	88 ec       	ldi	r24, 0xC8	; 200
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9e a7       	std	Y+46, r25	; 0x2e
    20c2:	8d a7       	std	Y+45, r24	; 0x2d
    20c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_sendCommand+0x558>
    20cc:	9e a7       	std	Y+46, r25	; 0x2e
    20ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d2:	98 a9       	ldd	r25, Y+48	; 0x30
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	98 ab       	std	Y+48, r25	; 0x30
    20d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	8f a5       	ldd	r24, Y+47	; 0x2f
    20dc:	98 a9       	ldd	r25, Y+48	; 0x30
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f7       	brne	.-38     	; 0x20bc <LCD_sendCommand+0x54c>
    20e2:	14 c0       	rjmp	.+40     	; 0x210c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	69 a9       	ldd	r22, Y+49	; 0x31
    20e6:	7a a9       	ldd	r23, Y+50	; 0x32
    20e8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ea:	9c a9       	ldd	r25, Y+52	; 0x34
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	98 ab       	std	Y+48, r25	; 0x30
    20f6:	8f a7       	std	Y+47, r24	; 0x2f
    20f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20fa:	98 a9       	ldd	r25, Y+48	; 0x30
    20fc:	9c a7       	std	Y+44, r25	; 0x2c
    20fe:	8b a7       	std	Y+43, r24	; 0x2b
    2100:	8b a5       	ldd	r24, Y+43	; 0x2b
    2102:	9c a5       	ldd	r25, Y+44	; 0x2c
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_sendCommand+0x594>
    2108:	9c a7       	std	Y+44, r25	; 0x2c
    210a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a0 e8       	ldi	r26, 0x80	; 128
    211c:	bf e3       	ldi	r27, 0x3F	; 63
    211e:	8f a3       	std	Y+39, r24	; 0x27
    2120:	98 a7       	std	Y+40, r25	; 0x28
    2122:	a9 a7       	std	Y+41, r26	; 0x29
    2124:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	6f a1       	ldd	r22, Y+39	; 0x27
    2128:	78 a5       	ldd	r23, Y+40	; 0x28
    212a:	89 a5       	ldd	r24, Y+41	; 0x29
    212c:	9a a5       	ldd	r25, Y+42	; 0x2a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a ef       	ldi	r20, 0xFA	; 250
    2134:	54 e4       	ldi	r21, 0x44	; 68
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	8b a3       	std	Y+35, r24	; 0x23
    2140:	9c a3       	std	Y+36, r25	; 0x24
    2142:	ad a3       	std	Y+37, r26	; 0x25
    2144:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2146:	6b a1       	ldd	r22, Y+35	; 0x23
    2148:	7c a1       	ldd	r23, Y+36	; 0x24
    214a:	8d a1       	ldd	r24, Y+37	; 0x25
    214c:	9e a1       	ldd	r25, Y+38	; 0x26
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	2c f4       	brge	.+10     	; 0x2168 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9a a3       	std	Y+34, r25	; 0x22
    2164:	89 a3       	std	Y+33, r24	; 0x21
    2166:	3f c0       	rjmp	.+126    	; 0x21e6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2168:	6b a1       	ldd	r22, Y+35	; 0x23
    216a:	7c a1       	ldd	r23, Y+36	; 0x24
    216c:	8d a1       	ldd	r24, Y+37	; 0x25
    216e:	9e a1       	ldd	r25, Y+38	; 0x26
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	3f ef       	ldi	r19, 0xFF	; 255
    2174:	4f e7       	ldi	r20, 0x7F	; 127
    2176:	57 e4       	ldi	r21, 0x47	; 71
    2178:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    217c:	18 16       	cp	r1, r24
    217e:	4c f5       	brge	.+82     	; 0x21d2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	6f a1       	ldd	r22, Y+39	; 0x27
    2182:	78 a5       	ldd	r23, Y+40	; 0x28
    2184:	89 a5       	ldd	r24, Y+41	; 0x29
    2186:	9a a5       	ldd	r25, Y+42	; 0x2a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	51 e4       	ldi	r21, 0x41	; 65
    2190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9a a3       	std	Y+34, r25	; 0x22
    21a6:	89 a3       	std	Y+33, r24	; 0x21
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <LCD_sendCommand+0x658>
    21aa:	88 ec       	ldi	r24, 0xC8	; 200
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	98 a3       	std	Y+32, r25	; 0x20
    21b0:	8f 8f       	std	Y+31, r24	; 0x1f
    21b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21b4:	98 a1       	ldd	r25, Y+32	; 0x20
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_sendCommand+0x646>
    21ba:	98 a3       	std	Y+32, r25	; 0x20
    21bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	89 a1       	ldd	r24, Y+33	; 0x21
    21c0:	9a a1       	ldd	r25, Y+34	; 0x22
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	9a a3       	std	Y+34, r25	; 0x22
    21c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ca:	9a a1       	ldd	r25, Y+34	; 0x22
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	69 f7       	brne	.-38     	; 0x21aa <LCD_sendCommand+0x63a>
    21d0:	14 c0       	rjmp	.+40     	; 0x21fa <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d2:	6b a1       	ldd	r22, Y+35	; 0x23
    21d4:	7c a1       	ldd	r23, Y+36	; 0x24
    21d6:	8d a1       	ldd	r24, Y+37	; 0x25
    21d8:	9e a1       	ldd	r25, Y+38	; 0x26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9a a3       	std	Y+34, r25	; 0x22
    21e4:	89 a3       	std	Y+33, r24	; 0x21
    21e6:	89 a1       	ldd	r24, Y+33	; 0x21
    21e8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ea:	9e 8f       	std	Y+30, r25	; 0x1e
    21ec:	8d 8f       	std	Y+29, r24	; 0x1d
    21ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <LCD_sendCommand+0x682>
    21f6:	9e 8f       	std	Y+30, r25	; 0x1e
    21f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(command, 0));
    21fa:	fe 01       	movw	r30, r28
    21fc:	ed 59       	subi	r30, 0x9D	; 157
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 81       	ld	r24, Z
    2202:	98 2f       	mov	r25, r24
    2204:	91 70       	andi	r25, 0x01	; 1
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	64 e0       	ldi	r22, 0x04	; 4
    220a:	49 2f       	mov	r20, r25
    220c:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(command, 1));
    2210:	fe 01       	movw	r30, r28
    2212:	ed 59       	subi	r30, 0x9D	; 157
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	82 70       	andi	r24, 0x02	; 2
    221e:	90 70       	andi	r25, 0x00	; 0
    2220:	95 95       	asr	r25
    2222:	87 95       	ror	r24
    2224:	98 2f       	mov	r25, r24
    2226:	82 e0       	ldi	r24, 0x02	; 2
    2228:	65 e0       	ldi	r22, 0x05	; 5
    222a:	49 2f       	mov	r20, r25
    222c:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(command, 2));
    2230:	fe 01       	movw	r30, r28
    2232:	ed 59       	subi	r30, 0x9D	; 157
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 81       	ld	r24, Z
    2238:	88 2f       	mov	r24, r24
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	84 70       	andi	r24, 0x04	; 4
    223e:	90 70       	andi	r25, 0x00	; 0
    2240:	95 95       	asr	r25
    2242:	87 95       	ror	r24
    2244:	95 95       	asr	r25
    2246:	87 95       	ror	r24
    2248:	98 2f       	mov	r25, r24
    224a:	82 e0       	ldi	r24, 0x02	; 2
    224c:	66 e0       	ldi	r22, 0x06	; 6
    224e:	49 2f       	mov	r20, r25
    2250:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(command, 3));
    2254:	fe 01       	movw	r30, r28
    2256:	ed 59       	subi	r30, 0x9D	; 157
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	88 2f       	mov	r24, r24
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	88 70       	andi	r24, 0x08	; 8
    2262:	90 70       	andi	r25, 0x00	; 0
    2264:	95 95       	asr	r25
    2266:	87 95       	ror	r24
    2268:	95 95       	asr	r25
    226a:	87 95       	ror	r24
    226c:	95 95       	asr	r25
    226e:	87 95       	ror	r24
    2270:	98 2f       	mov	r25, r24
    2272:	82 e0       	ldi	r24, 0x02	; 2
    2274:	67 e0       	ldi	r22, 0x07	; 7
    2276:	49 2f       	mov	r20, r25
    2278:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a0 e8       	ldi	r26, 0x80	; 128
    2282:	bf e3       	ldi	r27, 0x3F	; 63
    2284:	89 8f       	std	Y+25, r24	; 0x19
    2286:	9a 8f       	std	Y+26, r25	; 0x1a
    2288:	ab 8f       	std	Y+27, r26	; 0x1b
    228a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	69 8d       	ldd	r22, Y+25	; 0x19
    228e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a ef       	ldi	r20, 0xFA	; 250
    229a:	54 e4       	ldi	r21, 0x44	; 68
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	8d 8b       	std	Y+21, r24	; 0x15
    22a6:	9e 8b       	std	Y+22, r25	; 0x16
    22a8:	af 8b       	std	Y+23, r26	; 0x17
    22aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ac:	6d 89       	ldd	r22, Y+21	; 0x15
    22ae:	7e 89       	ldd	r23, Y+22	; 0x16
    22b0:	8f 89       	ldd	r24, Y+23	; 0x17
    22b2:	98 8d       	ldd	r25, Y+24	; 0x18
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	2c f4       	brge	.+10     	; 0x22ce <LCD_sendCommand+0x75e>
		__ticks = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9c 8b       	std	Y+20, r25	; 0x14
    22ca:	8b 8b       	std	Y+19, r24	; 0x13
    22cc:	3f c0       	rjmp	.+126    	; 0x234c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    22ce:	6d 89       	ldd	r22, Y+21	; 0x15
    22d0:	7e 89       	ldd	r23, Y+22	; 0x16
    22d2:	8f 89       	ldd	r24, Y+23	; 0x17
    22d4:	98 8d       	ldd	r25, Y+24	; 0x18
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	3f ef       	ldi	r19, 0xFF	; 255
    22da:	4f e7       	ldi	r20, 0x7F	; 127
    22dc:	57 e4       	ldi	r21, 0x47	; 71
    22de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	4c f5       	brge	.+82     	; 0x2338 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e6:	69 8d       	ldd	r22, Y+25	; 0x19
    22e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9c 8b       	std	Y+20, r25	; 0x14
    230c:	8b 8b       	std	Y+19, r24	; 0x13
    230e:	0f c0       	rjmp	.+30     	; 0x232e <LCD_sendCommand+0x7be>
    2310:	88 ec       	ldi	r24, 0xC8	; 200
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9a 8b       	std	Y+18, r25	; 0x12
    2316:	89 8b       	std	Y+17, r24	; 0x11
    2318:	89 89       	ldd	r24, Y+17	; 0x11
    231a:	9a 89       	ldd	r25, Y+18	; 0x12
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_sendCommand+0x7ac>
    2320:	9a 8b       	std	Y+18, r25	; 0x12
    2322:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	8b 89       	ldd	r24, Y+19	; 0x13
    2326:	9c 89       	ldd	r25, Y+20	; 0x14
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	8b 89       	ldd	r24, Y+19	; 0x13
    2330:	9c 89       	ldd	r25, Y+20	; 0x14
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	69 f7       	brne	.-38     	; 0x2310 <LCD_sendCommand+0x7a0>
    2336:	14 c0       	rjmp	.+40     	; 0x2360 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	6d 89       	ldd	r22, Y+21	; 0x15
    233a:	7e 89       	ldd	r23, Y+22	; 0x16
    233c:	8f 89       	ldd	r24, Y+23	; 0x17
    233e:	98 8d       	ldd	r25, Y+24	; 0x18
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9c 8b       	std	Y+20, r25	; 0x14
    234a:	8b 8b       	std	Y+19, r24	; 0x13
    234c:	8b 89       	ldd	r24, Y+19	; 0x13
    234e:	9c 89       	ldd	r25, Y+20	; 0x14
    2350:	98 8b       	std	Y+16, r25	; 0x10
    2352:	8f 87       	std	Y+15, r24	; 0x0f
    2354:	8f 85       	ldd	r24, Y+15	; 0x0f
    2356:	98 89       	ldd	r25, Y+16	; 0x10
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_sendCommand+0x7e8>
    235c:	98 8b       	std	Y+16, r25	; 0x10
    235e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	61 e0       	ldi	r22, 0x01	; 1
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a0 e8       	ldi	r26, 0x80	; 128
    2370:	bf e3       	ldi	r27, 0x3F	; 63
    2372:	8b 87       	std	Y+11, r24	; 0x0b
    2374:	9c 87       	std	Y+12, r25	; 0x0c
    2376:	ad 87       	std	Y+13, r26	; 0x0d
    2378:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237a:	6b 85       	ldd	r22, Y+11	; 0x0b
    237c:	7c 85       	ldd	r23, Y+12	; 0x0c
    237e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2380:	9e 85       	ldd	r25, Y+14	; 0x0e
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	4a ef       	ldi	r20, 0xFA	; 250
    2388:	54 e4       	ldi	r21, 0x44	; 68
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	8f 83       	std	Y+7, r24	; 0x07
    2394:	98 87       	std	Y+8, r25	; 0x08
    2396:	a9 87       	std	Y+9, r26	; 0x09
    2398:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239a:	6f 81       	ldd	r22, Y+7	; 0x07
    239c:	78 85       	ldd	r23, Y+8	; 0x08
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5f e3       	ldi	r21, 0x3F	; 63
    23aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ae:	88 23       	and	r24, r24
    23b0:	2c f4       	brge	.+10     	; 0x23bc <LCD_sendCommand+0x84c>
		__ticks = 1;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9e 83       	std	Y+6, r25	; 0x06
    23b8:	8d 83       	std	Y+5, r24	; 0x05
    23ba:	3f c0       	rjmp	.+126    	; 0x243a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	4c f5       	brge	.+82     	; 0x2426 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23da:	9e 85       	ldd	r25, Y+14	; 0x0e
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e2       	ldi	r20, 0x20	; 32
    23e2:	51 e4       	ldi	r21, 0x41	; 65
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	bc 01       	movw	r22, r24
    23ee:	cd 01       	movw	r24, r26
    23f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	9e 83       	std	Y+6, r25	; 0x06
    23fa:	8d 83       	std	Y+5, r24	; 0x05
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <LCD_sendCommand+0x8ac>
    23fe:	88 ec       	ldi	r24, 0xC8	; 200
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9c 83       	std	Y+4, r25	; 0x04
    2404:	8b 83       	std	Y+3, r24	; 0x03
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <LCD_sendCommand+0x89a>
    240e:	9c 83       	std	Y+4, r25	; 0x04
    2410:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241c:	8d 81       	ldd	r24, Y+5	; 0x05
    241e:	9e 81       	ldd	r25, Y+6	; 0x06
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	69 f7       	brne	.-38     	; 0x23fe <LCD_sendCommand+0x88e>
    2424:	14 c0       	rjmp	.+40     	; 0x244e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	6f 81       	ldd	r22, Y+7	; 0x07
    2428:	78 85       	ldd	r23, Y+8	; 0x08
    242a:	89 85       	ldd	r24, Y+9	; 0x09
    242c:	9a 85       	ldd	r25, Y+10	; 0x0a
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9e 83       	std	Y+6, r25	; 0x06
    2438:	8d 83       	std	Y+5, r24	; 0x05
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_sendCommand+0x8d6>
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    244e:	cd 59       	subi	r28, 0x9D	; 157
    2450:	df 4f       	sbci	r29, 0xFF	; 255
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	08 95       	ret

00002466 <LCD_displayCharacter>:
/*
 * Description :
 * display a character on the LCD
 */
void LCD_displayCharacter(uint8 character)
{
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	c3 56       	subi	r28, 0x63	; 99
    2474:	d0 40       	sbci	r29, 0x00	; 0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	fe 01       	movw	r30, r28
    2482:	ed 59       	subi	r30, 0x9D	; 157
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 83       	st	Z, r24
	/* set RS to high to send a character */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2488:	82 e0       	ldi	r24, 0x02	; 2
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    2492:	fe 01       	movw	r30, r28
    2494:	e1 5a       	subi	r30, 0xA1	; 161
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a0 e8       	ldi	r26, 0x80	; 128
    249e:	bf e3       	ldi	r27, 0x3F	; 63
    24a0:	80 83       	st	Z, r24
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	a2 83       	std	Z+2, r26	; 0x02
    24a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	8e 01       	movw	r16, r28
    24aa:	05 5a       	subi	r16, 0xA5	; 165
    24ac:	1f 4f       	sbci	r17, 0xFF	; 255
    24ae:	fe 01       	movw	r30, r28
    24b0:	e1 5a       	subi	r30, 0xA1	; 161
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	60 81       	ld	r22, Z
    24b6:	71 81       	ldd	r23, Z+1	; 0x01
    24b8:	82 81       	ldd	r24, Z+2	; 0x02
    24ba:	93 81       	ldd	r25, Z+3	; 0x03
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	4a ef       	ldi	r20, 0xFA	; 250
    24c2:	54 e4       	ldi	r21, 0x44	; 68
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	f8 01       	movw	r30, r16
    24ce:	80 83       	st	Z, r24
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	a2 83       	std	Z+2, r26	; 0x02
    24d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d6:	fe 01       	movw	r30, r28
    24d8:	e5 5a       	subi	r30, 0xA5	; 165
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	60 81       	ld	r22, Z
    24de:	71 81       	ldd	r23, Z+1	; 0x01
    24e0:	82 81       	ldd	r24, Z+2	; 0x02
    24e2:	93 81       	ldd	r25, Z+3	; 0x03
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	44 f4       	brge	.+16     	; 0x2504 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    24f4:	fe 01       	movw	r30, r28
    24f6:	e7 5a       	subi	r30, 0xA7	; 167
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
    2502:	64 c0       	rjmp	.+200    	; 0x25cc <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2504:	fe 01       	movw	r30, r28
    2506:	e5 5a       	subi	r30, 0xA5	; 165
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	60 81       	ld	r22, Z
    250c:	71 81       	ldd	r23, Z+1	; 0x01
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	3f ef       	ldi	r19, 0xFF	; 255
    2516:	4f e7       	ldi	r20, 0x7F	; 127
    2518:	57 e4       	ldi	r21, 0x47	; 71
    251a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    251e:	18 16       	cp	r1, r24
    2520:	0c f0       	brlt	.+2      	; 0x2524 <LCD_displayCharacter+0xbe>
    2522:	43 c0       	rjmp	.+134    	; 0x25aa <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2524:	fe 01       	movw	r30, r28
    2526:	e1 5a       	subi	r30, 0xA1	; 161
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	60 81       	ld	r22, Z
    252c:	71 81       	ldd	r23, Z+1	; 0x01
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	93 81       	ldd	r25, Z+3	; 0x03
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8e 01       	movw	r16, r28
    2544:	07 5a       	subi	r16, 0xA7	; 167
    2546:	1f 4f       	sbci	r17, 0xFF	; 255
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	f8 01       	movw	r30, r16
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
    255a:	1f c0       	rjmp	.+62     	; 0x259a <LCD_displayCharacter+0x134>
    255c:	fe 01       	movw	r30, r28
    255e:	e9 5a       	subi	r30, 0xA9	; 169
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	88 ec       	ldi	r24, 0xC8	; 200
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
    256a:	fe 01       	movw	r30, r28
    256c:	e9 5a       	subi	r30, 0xA9	; 169
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	91 81       	ldd	r25, Z+1	; 0x01
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_displayCharacter+0x10e>
    2578:	fe 01       	movw	r30, r28
    257a:	e9 5a       	subi	r30, 0xA9	; 169
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	de 01       	movw	r26, r28
    2584:	a7 5a       	subi	r26, 0xA7	; 167
    2586:	bf 4f       	sbci	r27, 0xFF	; 255
    2588:	fe 01       	movw	r30, r28
    258a:	e7 5a       	subi	r30, 0xA7	; 167
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	91 81       	ldd	r25, Z+1	; 0x01
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	11 96       	adiw	r26, 0x01	; 1
    2596:	9c 93       	st	X, r25
    2598:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	fe 01       	movw	r30, r28
    259c:	e7 5a       	subi	r30, 0xA7	; 167
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	80 81       	ld	r24, Z
    25a2:	91 81       	ldd	r25, Z+1	; 0x01
    25a4:	00 97       	sbiw	r24, 0x00	; 0
    25a6:	d1 f6       	brne	.-76     	; 0x255c <LCD_displayCharacter+0xf6>
    25a8:	27 c0       	rjmp	.+78     	; 0x25f8 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25aa:	8e 01       	movw	r16, r28
    25ac:	07 5a       	subi	r16, 0xA7	; 167
    25ae:	1f 4f       	sbci	r17, 0xFF	; 255
    25b0:	fe 01       	movw	r30, r28
    25b2:	e5 5a       	subi	r30, 0xA5	; 165
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	f8 01       	movw	r30, r16
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
    25cc:	de 01       	movw	r26, r28
    25ce:	ab 5a       	subi	r26, 0xAB	; 171
    25d0:	bf 4f       	sbci	r27, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	e7 5a       	subi	r30, 0xA7	; 167
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	8d 93       	st	X+, r24
    25de:	9c 93       	st	X, r25
    25e0:	fe 01       	movw	r30, r28
    25e2:	eb 5a       	subi	r30, 0xAB	; 171
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <LCD_displayCharacter+0x184>
    25ee:	fe 01       	movw	r30, r28
    25f0:	eb 5a       	subi	r30, 0xAB	; 171
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
	_delay_ms(1);
	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	61 e0       	ldi	r22, 0x01	; 1
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    2602:	fe 01       	movw	r30, r28
    2604:	ef 5a       	subi	r30, 0xAF	; 175
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e8       	ldi	r26, 0x80	; 128
    260e:	bf e3       	ldi	r27, 0x3F	; 63
    2610:	80 83       	st	Z, r24
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	a2 83       	std	Z+2, r26	; 0x02
    2616:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	8e 01       	movw	r16, r28
    261a:	03 5b       	subi	r16, 0xB3	; 179
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	fe 01       	movw	r30, r28
    2620:	ef 5a       	subi	r30, 0xAF	; 175
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	60 81       	ld	r22, Z
    2626:	71 81       	ldd	r23, Z+1	; 0x01
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a ef       	ldi	r20, 0xFA	; 250
    2632:	54 e4       	ldi	r21, 0x44	; 68
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	f8 01       	movw	r30, r16
    263e:	80 83       	st	Z, r24
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	a2 83       	std	Z+2, r26	; 0x02
    2644:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2646:	fe 01       	movw	r30, r28
    2648:	e3 5b       	subi	r30, 0xB3	; 179
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2660:	88 23       	and	r24, r24
    2662:	44 f4       	brge	.+16     	; 0x2674 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2664:	fe 01       	movw	r30, r28
    2666:	e5 5b       	subi	r30, 0xB5	; 181
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	64 c0       	rjmp	.+200    	; 0x273c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2674:	fe 01       	movw	r30, r28
    2676:	e3 5b       	subi	r30, 0xB3	; 179
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	60 81       	ld	r22, Z
    267c:	71 81       	ldd	r23, Z+1	; 0x01
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	3f ef       	ldi	r19, 0xFF	; 255
    2686:	4f e7       	ldi	r20, 0x7F	; 127
    2688:	57 e4       	ldi	r21, 0x47	; 71
    268a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268e:	18 16       	cp	r1, r24
    2690:	0c f0       	brlt	.+2      	; 0x2694 <LCD_displayCharacter+0x22e>
    2692:	43 c0       	rjmp	.+134    	; 0x271a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2694:	fe 01       	movw	r30, r28
    2696:	ef 5a       	subi	r30, 0xAF	; 175
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	60 81       	ld	r22, Z
    269c:	71 81       	ldd	r23, Z+1	; 0x01
    269e:	82 81       	ldd	r24, Z+2	; 0x02
    26a0:	93 81       	ldd	r25, Z+3	; 0x03
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e2       	ldi	r20, 0x20	; 32
    26a8:	51 e4       	ldi	r21, 0x41	; 65
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8e 01       	movw	r16, r28
    26b4:	05 5b       	subi	r16, 0xB5	; 181
    26b6:	1f 4f       	sbci	r17, 0xFF	; 255
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	f8 01       	movw	r30, r16
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	80 83       	st	Z, r24
    26ca:	1f c0       	rjmp	.+62     	; 0x270a <LCD_displayCharacter+0x2a4>
    26cc:	fe 01       	movw	r30, r28
    26ce:	e7 5b       	subi	r30, 0xB7	; 183
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	88 ec       	ldi	r24, 0xC8	; 200
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	80 83       	st	Z, r24
    26da:	fe 01       	movw	r30, r28
    26dc:	e7 5b       	subi	r30, 0xB7	; 183
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <LCD_displayCharacter+0x27e>
    26e8:	fe 01       	movw	r30, r28
    26ea:	e7 5b       	subi	r30, 0xB7	; 183
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	de 01       	movw	r26, r28
    26f4:	a5 5b       	subi	r26, 0xB5	; 181
    26f6:	bf 4f       	sbci	r27, 0xFF	; 255
    26f8:	fe 01       	movw	r30, r28
    26fa:	e5 5b       	subi	r30, 0xB5	; 181
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	9c 93       	st	X, r25
    2708:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	fe 01       	movw	r30, r28
    270c:	e5 5b       	subi	r30, 0xB5	; 181
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	d1 f6       	brne	.-76     	; 0x26cc <LCD_displayCharacter+0x266>
    2718:	27 c0       	rjmp	.+78     	; 0x2768 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271a:	8e 01       	movw	r16, r28
    271c:	05 5b       	subi	r16, 0xB5	; 181
    271e:	1f 4f       	sbci	r17, 0xFF	; 255
    2720:	fe 01       	movw	r30, r28
    2722:	e3 5b       	subi	r30, 0xB3	; 179
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	f8 01       	movw	r30, r16
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
    273c:	de 01       	movw	r26, r28
    273e:	a9 5b       	subi	r26, 0xB9	; 185
    2740:	bf 4f       	sbci	r27, 0xFF	; 255
    2742:	fe 01       	movw	r30, r28
    2744:	e5 5b       	subi	r30, 0xB5	; 181
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	8d 93       	st	X+, r24
    274e:	9c 93       	st	X, r25
    2750:	fe 01       	movw	r30, r28
    2752:	e9 5b       	subi	r30, 0xB9	; 185
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <LCD_displayCharacter+0x2f4>
    275e:	fe 01       	movw	r30, r28
    2760:	e9 5b       	subi	r30, 0xB9	; 185
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	91 83       	std	Z+1, r25	; 0x01
    2766:	80 83       	st	Z, r24

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(character, 4));
    2768:	fe 01       	movw	r30, r28
    276a:	ed 59       	subi	r30, 0x9D	; 157
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 81       	ld	r24, Z
    2770:	88 2f       	mov	r24, r24
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	80 71       	andi	r24, 0x10	; 16
    2776:	90 70       	andi	r25, 0x00	; 0
    2778:	95 95       	asr	r25
    277a:	87 95       	ror	r24
    277c:	95 95       	asr	r25
    277e:	87 95       	ror	r24
    2780:	95 95       	asr	r25
    2782:	87 95       	ror	r24
    2784:	95 95       	asr	r25
    2786:	87 95       	ror	r24
    2788:	98 2f       	mov	r25, r24
    278a:	82 e0       	ldi	r24, 0x02	; 2
    278c:	64 e0       	ldi	r22, 0x04	; 4
    278e:	49 2f       	mov	r20, r25
    2790:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(character, 5));
    2794:	fe 01       	movw	r30, r28
    2796:	ed 59       	subi	r30, 0x9D	; 157
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	80 72       	andi	r24, 0x20	; 32
    27a2:	90 70       	andi	r25, 0x00	; 0
    27a4:	95 95       	asr	r25
    27a6:	87 95       	ror	r24
    27a8:	95 95       	asr	r25
    27aa:	87 95       	ror	r24
    27ac:	95 95       	asr	r25
    27ae:	87 95       	ror	r24
    27b0:	95 95       	asr	r25
    27b2:	87 95       	ror	r24
    27b4:	95 95       	asr	r25
    27b6:	87 95       	ror	r24
    27b8:	98 2f       	mov	r25, r24
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	65 e0       	ldi	r22, 0x05	; 5
    27be:	49 2f       	mov	r20, r25
    27c0:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(character, 6));
    27c4:	fe 01       	movw	r30, r28
    27c6:	ed 59       	subi	r30, 0x9D	; 157
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 81       	ld	r24, Z
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	80 74       	andi	r24, 0x40	; 64
    27d2:	90 70       	andi	r25, 0x00	; 0
    27d4:	08 2e       	mov	r0, r24
    27d6:	89 2f       	mov	r24, r25
    27d8:	00 0c       	add	r0, r0
    27da:	88 1f       	adc	r24, r24
    27dc:	99 0b       	sbc	r25, r25
    27de:	00 0c       	add	r0, r0
    27e0:	88 1f       	adc	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	98 2f       	mov	r25, r24
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	66 e0       	ldi	r22, 0x06	; 6
    27ea:	49 2f       	mov	r20, r25
    27ec:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(character, 7));
    27f0:	fe 01       	movw	r30, r28
    27f2:	ed 59       	subi	r30, 0x9D	; 157
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 81       	ld	r24, Z
    27f8:	98 2f       	mov	r25, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	99 27       	eor	r25, r25
    27fe:	99 1f       	adc	r25, r25
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	67 e0       	ldi	r22, 0x07	; 7
    2804:	49 2f       	mov	r20, r25
    2806:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    280a:	fe 01       	movw	r30, r28
    280c:	ed 5b       	subi	r30, 0xBD	; 189
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 e8       	ldi	r26, 0x80	; 128
    2816:	bf e3       	ldi	r27, 0x3F	; 63
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	8e 01       	movw	r16, r28
    2822:	01 5c       	subi	r16, 0xC1	; 193
    2824:	1f 4f       	sbci	r17, 0xFF	; 255
    2826:	fe 01       	movw	r30, r28
    2828:	ed 5b       	subi	r30, 0xBD	; 189
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	4a ef       	ldi	r20, 0xFA	; 250
    283a:	54 e4       	ldi	r21, 0x44	; 68
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	f8 01       	movw	r30, r16
    2846:	80 83       	st	Z, r24
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	a2 83       	std	Z+2, r26	; 0x02
    284c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    284e:	fe 01       	movw	r30, r28
    2850:	ff 96       	adiw	r30, 0x3f	; 63
    2852:	60 81       	ld	r22, Z
    2854:	71 81       	ldd	r23, Z+1	; 0x01
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9e af       	std	Y+62, r25	; 0x3e
    2870:	8d af       	std	Y+61, r24	; 0x3d
    2872:	46 c0       	rjmp	.+140    	; 0x2900 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2874:	fe 01       	movw	r30, r28
    2876:	ff 96       	adiw	r30, 0x3f	; 63
    2878:	60 81       	ld	r22, Z
    287a:	71 81       	ldd	r23, Z+1	; 0x01
    287c:	82 81       	ldd	r24, Z+2	; 0x02
    287e:	93 81       	ldd	r25, Z+3	; 0x03
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	3f ef       	ldi	r19, 0xFF	; 255
    2884:	4f e7       	ldi	r20, 0x7F	; 127
    2886:	57 e4       	ldi	r21, 0x47	; 71
    2888:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288c:	18 16       	cp	r1, r24
    288e:	64 f5       	brge	.+88     	; 0x28e8 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2890:	fe 01       	movw	r30, r28
    2892:	ed 5b       	subi	r30, 0xBD	; 189
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9e af       	std	Y+62, r25	; 0x3e
    28bc:	8d af       	std	Y+61, r24	; 0x3d
    28be:	0f c0       	rjmp	.+30     	; 0x28de <LCD_displayCharacter+0x478>
    28c0:	88 ec       	ldi	r24, 0xC8	; 200
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9c af       	std	Y+60, r25	; 0x3c
    28c6:	8b af       	std	Y+59, r24	; 0x3b
    28c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <LCD_displayCharacter+0x466>
    28d0:	9c af       	std	Y+60, r25	; 0x3c
    28d2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	9e af       	std	Y+62, r25	; 0x3e
    28dc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28de:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	69 f7       	brne	.-38     	; 0x28c0 <LCD_displayCharacter+0x45a>
    28e6:	16 c0       	rjmp	.+44     	; 0x2914 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	fe 01       	movw	r30, r28
    28ea:	ff 96       	adiw	r30, 0x3f	; 63
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9e af       	std	Y+62, r25	; 0x3e
    28fe:	8d af       	std	Y+61, r24	; 0x3d
    2900:	8d ad       	ldd	r24, Y+61	; 0x3d
    2902:	9e ad       	ldd	r25, Y+62	; 0x3e
    2904:	9a af       	std	Y+58, r25	; 0x3a
    2906:	89 af       	std	Y+57, r24	; 0x39
    2908:	89 ad       	ldd	r24, Y+57	; 0x39
    290a:	9a ad       	ldd	r25, Y+58	; 0x3a
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <LCD_displayCharacter+0x4a6>
    2910:	9a af       	std	Y+58, r25	; 0x3a
    2912:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* set enable bit to low*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a0 e8       	ldi	r26, 0x80	; 128
    2924:	bf e3       	ldi	r27, 0x3F	; 63
    2926:	8d ab       	std	Y+53, r24	; 0x35
    2928:	9e ab       	std	Y+54, r25	; 0x36
    292a:	af ab       	std	Y+55, r26	; 0x37
    292c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292e:	6d a9       	ldd	r22, Y+53	; 0x35
    2930:	7e a9       	ldd	r23, Y+54	; 0x36
    2932:	8f a9       	ldd	r24, Y+55	; 0x37
    2934:	98 ad       	ldd	r25, Y+56	; 0x38
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	4a ef       	ldi	r20, 0xFA	; 250
    293c:	54 e4       	ldi	r21, 0x44	; 68
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	89 ab       	std	Y+49, r24	; 0x31
    2948:	9a ab       	std	Y+50, r25	; 0x32
    294a:	ab ab       	std	Y+51, r26	; 0x33
    294c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    294e:	69 a9       	ldd	r22, Y+49	; 0x31
    2950:	7a a9       	ldd	r23, Y+50	; 0x32
    2952:	8b a9       	ldd	r24, Y+51	; 0x33
    2954:	9c a9       	ldd	r25, Y+52	; 0x34
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	2c f4       	brge	.+10     	; 0x2970 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	98 ab       	std	Y+48, r25	; 0x30
    296c:	8f a7       	std	Y+47, r24	; 0x2f
    296e:	3f c0       	rjmp	.+126    	; 0x29ee <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2970:	69 a9       	ldd	r22, Y+49	; 0x31
    2972:	7a a9       	ldd	r23, Y+50	; 0x32
    2974:	8b a9       	ldd	r24, Y+51	; 0x33
    2976:	9c a9       	ldd	r25, Y+52	; 0x34
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	3f ef       	ldi	r19, 0xFF	; 255
    297c:	4f e7       	ldi	r20, 0x7F	; 127
    297e:	57 e4       	ldi	r21, 0x47	; 71
    2980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2984:	18 16       	cp	r1, r24
    2986:	4c f5       	brge	.+82     	; 0x29da <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2988:	6d a9       	ldd	r22, Y+53	; 0x35
    298a:	7e a9       	ldd	r23, Y+54	; 0x36
    298c:	8f a9       	ldd	r24, Y+55	; 0x37
    298e:	98 ad       	ldd	r25, Y+56	; 0x38
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e2       	ldi	r20, 0x20	; 32
    2996:	51 e4       	ldi	r21, 0x41	; 65
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	98 ab       	std	Y+48, r25	; 0x30
    29ae:	8f a7       	std	Y+47, r24	; 0x2f
    29b0:	0f c0       	rjmp	.+30     	; 0x29d0 <LCD_displayCharacter+0x56a>
    29b2:	88 ec       	ldi	r24, 0xC8	; 200
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9e a7       	std	Y+46, r25	; 0x2e
    29b8:	8d a7       	std	Y+45, r24	; 0x2d
    29ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    29bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <LCD_displayCharacter+0x558>
    29c2:	9e a7       	std	Y+46, r25	; 0x2e
    29c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c8:	98 a9       	ldd	r25, Y+48	; 0x30
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	98 ab       	std	Y+48, r25	; 0x30
    29ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d2:	98 a9       	ldd	r25, Y+48	; 0x30
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	69 f7       	brne	.-38     	; 0x29b2 <LCD_displayCharacter+0x54c>
    29d8:	14 c0       	rjmp	.+40     	; 0x2a02 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29da:	69 a9       	ldd	r22, Y+49	; 0x31
    29dc:	7a a9       	ldd	r23, Y+50	; 0x32
    29de:	8b a9       	ldd	r24, Y+51	; 0x33
    29e0:	9c a9       	ldd	r25, Y+52	; 0x34
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	98 ab       	std	Y+48, r25	; 0x30
    29ec:	8f a7       	std	Y+47, r24	; 0x2f
    29ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f0:	98 a9       	ldd	r25, Y+48	; 0x30
    29f2:	9c a7       	std	Y+44, r25	; 0x2c
    29f4:	8b a7       	std	Y+43, r24	; 0x2b
    29f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    29f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <LCD_displayCharacter+0x594>
    29fe:	9c a7       	std	Y+44, r25	; 0x2c
    2a00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	61 e0       	ldi	r22, 0x01	; 1
    2a06:	41 e0       	ldi	r20, 0x01	; 1
    2a08:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	a0 e8       	ldi	r26, 0x80	; 128
    2a12:	bf e3       	ldi	r27, 0x3F	; 63
    2a14:	8f a3       	std	Y+39, r24	; 0x27
    2a16:	98 a7       	std	Y+40, r25	; 0x28
    2a18:	a9 a7       	std	Y+41, r26	; 0x29
    2a1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a20:	89 a5       	ldd	r24, Y+41	; 0x29
    2a22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4a ef       	ldi	r20, 0xFA	; 250
    2a2a:	54 e4       	ldi	r21, 0x44	; 68
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	8b a3       	std	Y+35, r24	; 0x23
    2a36:	9c a3       	std	Y+36, r25	; 0x24
    2a38:	ad a3       	std	Y+37, r26	; 0x25
    2a3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a3c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a40:	8d a1       	ldd	r24, Y+37	; 0x25
    2a42:	9e a1       	ldd	r25, Y+38	; 0x26
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9a a3       	std	Y+34, r25	; 0x22
    2a5a:	89 a3       	std	Y+33, r24	; 0x21
    2a5c:	3f c0       	rjmp	.+126    	; 0x2adc <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2a5e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a60:	7c a1       	ldd	r23, Y+36	; 0x24
    2a62:	8d a1       	ldd	r24, Y+37	; 0x25
    2a64:	9e a1       	ldd	r25, Y+38	; 0x26
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	3f ef       	ldi	r19, 0xFF	; 255
    2a6a:	4f e7       	ldi	r20, 0x7F	; 127
    2a6c:	57 e4       	ldi	r21, 0x47	; 71
    2a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a72:	18 16       	cp	r1, r24
    2a74:	4c f5       	brge	.+82     	; 0x2ac8 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	6f a1       	ldd	r22, Y+39	; 0x27
    2a78:	78 a5       	ldd	r23, Y+40	; 0x28
    2a7a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9a a3       	std	Y+34, r25	; 0x22
    2a9c:	89 a3       	std	Y+33, r24	; 0x21
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <LCD_displayCharacter+0x658>
    2aa0:	88 ec       	ldi	r24, 0xC8	; 200
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	98 a3       	std	Y+32, r25	; 0x20
    2aa6:	8f 8f       	std	Y+31, r24	; 0x1f
    2aa8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aaa:	98 a1       	ldd	r25, Y+32	; 0x20
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <LCD_displayCharacter+0x646>
    2ab0:	98 a3       	std	Y+32, r25	; 0x20
    2ab2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	9a a3       	std	Y+34, r25	; 0x22
    2abc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abe:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	69 f7       	brne	.-38     	; 0x2aa0 <LCD_displayCharacter+0x63a>
    2ac6:	14 c0       	rjmp	.+40     	; 0x2af0 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac8:	6b a1       	ldd	r22, Y+35	; 0x23
    2aca:	7c a1       	ldd	r23, Y+36	; 0x24
    2acc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ace:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9a a3       	std	Y+34, r25	; 0x22
    2ada:	89 a3       	std	Y+33, r24	; 0x21
    2adc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ade:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ae2:	8d 8f       	std	Y+29, r24	; 0x1d
    2ae4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ae6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <LCD_displayCharacter+0x682>
    2aec:	9e 8f       	std	Y+30, r25	; 0x1e
    2aee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(character, 0));
    2af0:	fe 01       	movw	r30, r28
    2af2:	ed 59       	subi	r30, 0x9D	; 157
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 81       	ld	r24, Z
    2af8:	98 2f       	mov	r25, r24
    2afa:	91 70       	andi	r25, 0x01	; 1
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	64 e0       	ldi	r22, 0x04	; 4
    2b00:	49 2f       	mov	r20, r25
    2b02:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(character, 1));
    2b06:	fe 01       	movw	r30, r28
    2b08:	ed 59       	subi	r30, 0x9D	; 157
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	82 70       	andi	r24, 0x02	; 2
    2b14:	90 70       	andi	r25, 0x00	; 0
    2b16:	95 95       	asr	r25
    2b18:	87 95       	ror	r24
    2b1a:	98 2f       	mov	r25, r24
    2b1c:	82 e0       	ldi	r24, 0x02	; 2
    2b1e:	65 e0       	ldi	r22, 0x05	; 5
    2b20:	49 2f       	mov	r20, r25
    2b22:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(character, 2));
    2b26:	fe 01       	movw	r30, r28
    2b28:	ed 59       	subi	r30, 0x9D	; 157
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	80 81       	ld	r24, Z
    2b2e:	88 2f       	mov	r24, r24
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	84 70       	andi	r24, 0x04	; 4
    2b34:	90 70       	andi	r25, 0x00	; 0
    2b36:	95 95       	asr	r25
    2b38:	87 95       	ror	r24
    2b3a:	95 95       	asr	r25
    2b3c:	87 95       	ror	r24
    2b3e:	98 2f       	mov	r25, r24
    2b40:	82 e0       	ldi	r24, 0x02	; 2
    2b42:	66 e0       	ldi	r22, 0x06	; 6
    2b44:	49 2f       	mov	r20, r25
    2b46:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(character, 3));
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ed 59       	subi	r30, 0x9D	; 157
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	88 70       	andi	r24, 0x08	; 8
    2b58:	90 70       	andi	r25, 0x00	; 0
    2b5a:	95 95       	asr	r25
    2b5c:	87 95       	ror	r24
    2b5e:	95 95       	asr	r25
    2b60:	87 95       	ror	r24
    2b62:	95 95       	asr	r25
    2b64:	87 95       	ror	r24
    2b66:	98 2f       	mov	r25, r24
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	67 e0       	ldi	r22, 0x07	; 7
    2b6c:	49 2f       	mov	r20, r25
    2b6e:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a0 e8       	ldi	r26, 0x80	; 128
    2b78:	bf e3       	ldi	r27, 0x3F	; 63
    2b7a:	89 8f       	std	Y+25, r24	; 0x19
    2b7c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b7e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b82:	69 8d       	ldd	r22, Y+25	; 0x19
    2b84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	4a ef       	ldi	r20, 0xFA	; 250
    2b90:	54 e4       	ldi	r21, 0x44	; 68
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	8d 8b       	std	Y+21, r24	; 0x15
    2b9c:	9e 8b       	std	Y+22, r25	; 0x16
    2b9e:	af 8b       	std	Y+23, r26	; 0x17
    2ba0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e8       	ldi	r20, 0x80	; 128
    2bb0:	5f e3       	ldi	r21, 0x3F	; 63
    2bb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb6:	88 23       	and	r24, r24
    2bb8:	2c f4       	brge	.+10     	; 0x2bc4 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	9c 8b       	std	Y+20, r25	; 0x14
    2bc0:	8b 8b       	std	Y+19, r24	; 0x13
    2bc2:	3f c0       	rjmp	.+126    	; 0x2c42 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2bc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bca:	98 8d       	ldd	r25, Y+24	; 0x18
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	3f ef       	ldi	r19, 0xFF	; 255
    2bd0:	4f e7       	ldi	r20, 0x7F	; 127
    2bd2:	57 e4       	ldi	r21, 0x47	; 71
    2bd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bd8:	18 16       	cp	r1, r24
    2bda:	4c f5       	brge	.+82     	; 0x2c2e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bdc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e2       	ldi	r20, 0x20	; 32
    2bea:	51 e4       	ldi	r21, 0x41	; 65
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	9c 8b       	std	Y+20, r25	; 0x14
    2c02:	8b 8b       	std	Y+19, r24	; 0x13
    2c04:	0f c0       	rjmp	.+30     	; 0x2c24 <LCD_displayCharacter+0x7be>
    2c06:	88 ec       	ldi	r24, 0xC8	; 200
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	9a 8b       	std	Y+18, r25	; 0x12
    2c0c:	89 8b       	std	Y+17, r24	; 0x11
    2c0e:	89 89       	ldd	r24, Y+17	; 0x11
    2c10:	9a 89       	ldd	r25, Y+18	; 0x12
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <LCD_displayCharacter+0x7ac>
    2c16:	9a 8b       	std	Y+18, r25	; 0x12
    2c18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	9c 8b       	std	Y+20, r25	; 0x14
    2c22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c24:	8b 89       	ldd	r24, Y+19	; 0x13
    2c26:	9c 89       	ldd	r25, Y+20	; 0x14
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	69 f7       	brne	.-38     	; 0x2c06 <LCD_displayCharacter+0x7a0>
    2c2c:	14 c0       	rjmp	.+40     	; 0x2c56 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c30:	7e 89       	ldd	r23, Y+22	; 0x16
    2c32:	8f 89       	ldd	r24, Y+23	; 0x17
    2c34:	98 8d       	ldd	r25, Y+24	; 0x18
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	9c 8b       	std	Y+20, r25	; 0x14
    2c40:	8b 8b       	std	Y+19, r24	; 0x13
    2c42:	8b 89       	ldd	r24, Y+19	; 0x13
    2c44:	9c 89       	ldd	r25, Y+20	; 0x14
    2c46:	98 8b       	std	Y+16, r25	; 0x10
    2c48:	8f 87       	std	Y+15, r24	; 0x0f
    2c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c4c:	98 89       	ldd	r25, Y+16	; 0x10
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <LCD_displayCharacter+0x7e8>
    2c52:	98 8b       	std	Y+16, r25	; 0x10
    2c54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	0e 94 24 09 	call	0x1248	; 0x1248 <GPIO_writePin>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	a0 e8       	ldi	r26, 0x80	; 128
    2c66:	bf e3       	ldi	r27, 0x3F	; 63
    2c68:	8b 87       	std	Y+11, r24	; 0x0b
    2c6a:	9c 87       	std	Y+12, r25	; 0x0c
    2c6c:	ad 87       	std	Y+13, r26	; 0x0d
    2c6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	4a ef       	ldi	r20, 0xFA	; 250
    2c7e:	54 e4       	ldi	r21, 0x44	; 68
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	8f 83       	std	Y+7, r24	; 0x07
    2c8a:	98 87       	std	Y+8, r25	; 0x08
    2c8c:	a9 87       	std	Y+9, r26	; 0x09
    2c8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e8       	ldi	r20, 0x80	; 128
    2c9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ca0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca4:	88 23       	and	r24, r24
    2ca6:	2c f4       	brge	.+10     	; 0x2cb2 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	9e 83       	std	Y+6, r25	; 0x06
    2cae:	8d 83       	std	Y+5, r24	; 0x05
    2cb0:	3f c0       	rjmp	.+126    	; 0x2d30 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb4:	78 85       	ldd	r23, Y+8	; 0x08
    2cb6:	89 85       	ldd	r24, Y+9	; 0x09
    2cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	4c f5       	brge	.+82     	; 0x2d1c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e2       	ldi	r20, 0x20	; 32
    2cd8:	51 e4       	ldi	r21, 0x41	; 65
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
    2cf2:	0f c0       	rjmp	.+30     	; 0x2d12 <LCD_displayCharacter+0x8ac>
    2cf4:	88 ec       	ldi	r24, 0xC8	; 200
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9c 83       	std	Y+4, r25	; 0x04
    2cfa:	8b 83       	std	Y+3, r24	; 0x03
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCD_displayCharacter+0x89a>
    2d04:	9c 83       	std	Y+4, r25	; 0x04
    2d06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	9e 83       	std	Y+6, r25	; 0x06
    2d10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	69 f7       	brne	.-38     	; 0x2cf4 <LCD_displayCharacter+0x88e>
    2d1a:	14 c0       	rjmp	.+40     	; 0x2d44 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1e:	78 85       	ldd	r23, Y+8	; 0x08
    2d20:	89 85       	ldd	r24, Y+9	; 0x09
    2d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9e 83       	std	Y+6, r25	; 0x06
    2d2e:	8d 83       	std	Y+5, r24	; 0x05
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	9a 83       	std	Y+2, r25	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <LCD_displayCharacter+0x8d6>
    2d40:	9a 83       	std	Y+2, r25	; 0x02
    2d42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2d44:	cd 59       	subi	r28, 0x9D	; 157
    2d46:	df 4f       	sbci	r29, 0xFF	; 255
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	1f 91       	pop	r17
    2d58:	0f 91       	pop	r16
    2d5a:	08 95       	ret

00002d5c <LCD_displayString>:
/*
 * Description :
 * display a string on the LCD;
 */
void LCD_displayString(const uint8* string)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <LCD_displayString+0x6>
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	0a c0       	rjmp	.+20     	; 0x2d80 <LCD_displayString+0x24>
	for(; *string!='\0'; string++)
	{
		LCD_displayCharacter(*string);
    2d6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d70:	80 81       	ld	r24, Z
    2d72:	0e 94 33 12 	call	0x2466	; 0x2466 <LCD_displayCharacter>
 * Description :
 * display a string on the LCD;
 */
void LCD_displayString(const uint8* string)
{
	for(; *string!='\0'; string++)
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7a:	01 96       	adiw	r24, 0x01	; 1
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	e9 81       	ldd	r30, Y+1	; 0x01
    2d82:	fa 81       	ldd	r31, Y+2	; 0x02
    2d84:	80 81       	ld	r24, Z
    2d86:	88 23       	and	r24, r24
    2d88:	89 f7       	brne	.-30     	; 0x2d6c <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*string);
	}
}
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	cf 91       	pop	r28
    2d90:	df 91       	pop	r29
    2d92:	08 95       	ret

00002d94 <LCD_displayStringRowColumn>:
/*
 * Description :
 * display a string in a specific location
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column,const uint8* string)
{
    2d94:	df 93       	push	r29
    2d96:	cf 93       	push	r28
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <LCD_displayStringRowColumn+0x6>
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <LCD_displayStringRowColumn+0x8>
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	89 83       	std	Y+1, r24	; 0x01
    2da2:	6a 83       	std	Y+2, r22	; 0x02
    2da4:	5c 83       	std	Y+4, r21	; 0x04
    2da6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column);
    2da8:	89 81       	ldd	r24, Y+1	; 0x01
    2daa:	6a 81       	ldd	r22, Y+2	; 0x02
    2dac:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_moveCursor>
	LCD_displayString(string);
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	9c 81       	ldd	r25, Y+4	; 0x04
    2db4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
}
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	cf 91       	pop	r28
    2dc2:	df 91       	pop	r29
    2dc4:	08 95       	ret

00002dc6 <LCD_integerToString>:
/*
 * Description :
 * convert integers to characters then display it
 */
void LCD_integerToString(int num)
{
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	62 97       	sbiw	r28, 0x12	; 18
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	9a 8b       	std	Y+18, r25	; 0x12
    2ddc:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(num, buff, 10);
    2dde:	89 89       	ldd	r24, Y+17	; 0x11
    2de0:	9a 89       	ldd	r25, Y+18	; 0x12
    2de2:	9e 01       	movw	r18, r28
    2de4:	2f 5f       	subi	r18, 0xFF	; 255
    2de6:	3f 4f       	sbci	r19, 0xFF	; 255
    2de8:	b9 01       	movw	r22, r18
    2dea:	4a e0       	ldi	r20, 0x0A	; 10
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	0e 94 3d 19 	call	0x327a	; 0x327a <itoa>
	LCD_displayString((const uint8*)buff);
    2df2:	ce 01       	movw	r24, r28
    2df4:	01 96       	adiw	r24, 0x01	; 1
    2df6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <LCD_displayString>
}
    2dfa:	62 96       	adiw	r28, 0x12	; 18
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	08 95       	ret

00002e0c <LCD_clearScreen>:
/*
 * Description :
 * clear the screen of the LCD
 */
void LCD_clearScreen(void)
{
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
}
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	08 95       	ret

00002e20 <LCD_moveCursor>:
/*
 * Description :
 * move the LCD cursor to the desired location
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <LCD_moveCursor+0x6>
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <LCD_moveCursor+0x8>
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	28 2f       	mov	r18, r24
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	3c 83       	std	Y+4, r19	; 0x04
    2e38:	2b 83       	std	Y+3, r18	; 0x03
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	81 30       	cpi	r24, 0x01	; 1
    2e40:	91 05       	cpc	r25, r1
    2e42:	d1 f0       	breq	.+52     	; 0x2e78 <LCD_moveCursor+0x58>
    2e44:	2b 81       	ldd	r18, Y+3	; 0x03
    2e46:	3c 81       	ldd	r19, Y+4	; 0x04
    2e48:	22 30       	cpi	r18, 0x02	; 2
    2e4a:	31 05       	cpc	r19, r1
    2e4c:	2c f4       	brge	.+10     	; 0x2e58 <LCD_moveCursor+0x38>
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e50:	9c 81       	ldd	r25, Y+4	; 0x04
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	61 f0       	breq	.+24     	; 0x2e6e <LCD_moveCursor+0x4e>
    2e56:	21 c0       	rjmp	.+66     	; 0x2e9a <LCD_moveCursor+0x7a>
    2e58:	2b 81       	ldd	r18, Y+3	; 0x03
    2e5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e5c:	22 30       	cpi	r18, 0x02	; 2
    2e5e:	31 05       	cpc	r19, r1
    2e60:	89 f0       	breq	.+34     	; 0x2e84 <LCD_moveCursor+0x64>
    2e62:	8b 81       	ldd	r24, Y+3	; 0x03
    2e64:	9c 81       	ldd	r25, Y+4	; 0x04
    2e66:	83 30       	cpi	r24, 0x03	; 3
    2e68:	91 05       	cpc	r25, r1
    2e6a:	91 f0       	breq	.+36     	; 0x2e90 <LCD_moveCursor+0x70>
    2e6c:	16 c0       	rjmp	.+44     	; 0x2e9a <LCD_moveCursor+0x7a>
	{
	case 0:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | column);
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	80 68       	ori	r24, 0x80	; 128
    2e72:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
    2e76:	11 c0       	rjmp	.+34     	; 0x2e9a <LCD_moveCursor+0x7a>
		break;
	case 1:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x40));
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	80 5c       	subi	r24, 0xC0	; 192
    2e7c:	80 68       	ori	r24, 0x80	; 128
    2e7e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
    2e82:	0b c0       	rjmp	.+22     	; 0x2e9a <LCD_moveCursor+0x7a>
		break;
	case 2:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x10));
    2e84:	8a 81       	ldd	r24, Y+2	; 0x02
    2e86:	80 5f       	subi	r24, 0xF0	; 240
    2e88:	80 68       	ori	r24, 0x80	; 128
    2e8a:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
    2e8e:	05 c0       	rjmp	.+10     	; 0x2e9a <LCD_moveCursor+0x7a>
		break;
	case 3:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x50));
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	80 5b       	subi	r24, 0xB0	; 176
    2e94:	80 68       	ori	r24, 0x80	; 128
    2e96:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <LCD_sendCommand>
		break;
	}
}
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <__vector_7>:
 * 						  Interrupt Service Routines
 *******************************************************************************/
static void  (*g_callBack)(void);
/* ISR for compare match interrupt */
ISR(TIMER1_COMPA_vect)
{
    2ea8:	1f 92       	push	r1
    2eaa:	0f 92       	push	r0
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	0f 92       	push	r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	2f 93       	push	r18
    2eb4:	3f 93       	push	r19
    2eb6:	4f 93       	push	r20
    2eb8:	5f 93       	push	r21
    2eba:	6f 93       	push	r22
    2ebc:	7f 93       	push	r23
    2ebe:	8f 93       	push	r24
    2ec0:	9f 93       	push	r25
    2ec2:	af 93       	push	r26
    2ec4:	bf 93       	push	r27
    2ec6:	ef 93       	push	r30
    2ec8:	ff 93       	push	r31
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
	(*g_callBack)();
    2ed2:	e0 91 f6 00 	lds	r30, 0x00F6
    2ed6:	f0 91 f7 00 	lds	r31, 0x00F7
    2eda:	09 95       	icall
}
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	ff 91       	pop	r31
    2ee2:	ef 91       	pop	r30
    2ee4:	bf 91       	pop	r27
    2ee6:	af 91       	pop	r26
    2ee8:	9f 91       	pop	r25
    2eea:	8f 91       	pop	r24
    2eec:	7f 91       	pop	r23
    2eee:	6f 91       	pop	r22
    2ef0:	5f 91       	pop	r21
    2ef2:	4f 91       	pop	r20
    2ef4:	3f 91       	pop	r19
    2ef6:	2f 91       	pop	r18
    2ef8:	0f 90       	pop	r0
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	0f 90       	pop	r0
    2efe:	1f 90       	pop	r1
    2f00:	18 95       	reti

00002f02 <__vector_9>:
/* ISR for overflow interrupt */
ISR(TIMER1_OVF_vect)
{
    2f02:	1f 92       	push	r1
    2f04:	0f 92       	push	r0
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	0f 92       	push	r0
    2f0a:	11 24       	eor	r1, r1
    2f0c:	2f 93       	push	r18
    2f0e:	3f 93       	push	r19
    2f10:	4f 93       	push	r20
    2f12:	5f 93       	push	r21
    2f14:	6f 93       	push	r22
    2f16:	7f 93       	push	r23
    2f18:	8f 93       	push	r24
    2f1a:	9f 93       	push	r25
    2f1c:	af 93       	push	r26
    2f1e:	bf 93       	push	r27
    2f20:	ef 93       	push	r30
    2f22:	ff 93       	push	r31
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
	(*g_callBack)();
    2f2c:	e0 91 f6 00 	lds	r30, 0x00F6
    2f30:	f0 91 f7 00 	lds	r31, 0x00F7
    2f34:	09 95       	icall
}
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	ff 91       	pop	r31
    2f3c:	ef 91       	pop	r30
    2f3e:	bf 91       	pop	r27
    2f40:	af 91       	pop	r26
    2f42:	9f 91       	pop	r25
    2f44:	8f 91       	pop	r24
    2f46:	7f 91       	pop	r23
    2f48:	6f 91       	pop	r22
    2f4a:	5f 91       	pop	r21
    2f4c:	4f 91       	pop	r20
    2f4e:	3f 91       	pop	r19
    2f50:	2f 91       	pop	r18
    2f52:	0f 90       	pop	r0
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	0f 90       	pop	r0
    2f58:	1f 90       	pop	r1
    2f5a:	18 95       	reti

00002f5c <Timer1_init>:
/*
 * Description :
 * a function to initiate timer1 with desired configuration(prescaler, mode, initial register values)
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <Timer1_init+0x6>
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
	/* initializing timer 1 counter register */
	TCNT1 = Config_Ptr->initial_value;
    2f6a:	ac e4       	ldi	r26, 0x4C	; 76
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f70:	fa 81       	ldd	r31, Y+2	; 0x02
    2f72:	80 81       	ld	r24, Z
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	11 96       	adiw	r26, 0x01	; 1
    2f78:	9c 93       	st	X, r25
    2f7a:	8e 93       	st	-X, r24
	/* initializing compare register if compare mode specified */
	if(Config_Ptr->mode == COMPARE)
    2f7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f80:	85 81       	ldd	r24, Z+5	; 0x05
    2f82:	81 30       	cpi	r24, 0x01	; 1
    2f84:	89 f4       	brne	.+34     	; 0x2fa8 <Timer1_init+0x4c>
	{
		OCR1A = Config_Ptr->compare_value;
    2f86:	aa e4       	ldi	r26, 0x4A	; 74
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8e:	82 81       	ldd	r24, Z+2	; 0x02
    2f90:	93 81       	ldd	r25, Z+3	; 0x03
    2f92:	11 96       	adiw	r26, 0x01	; 1
    2f94:	9c 93       	st	X, r25
    2f96:	8e 93       	st	-X, r24
		TIMSK|=(1<<OCIE1A);
    2f98:	a9 e5       	ldi	r26, 0x59	; 89
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	e9 e5       	ldi	r30, 0x59	; 89
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	80 61       	ori	r24, 0x10	; 16
    2fa4:	8c 93       	st	X, r24
    2fa6:	07 c0       	rjmp	.+14     	; 0x2fb6 <Timer1_init+0x5a>
	}
	else
	{
		TIMSK|=(1<<TOIE1);
    2fa8:	a9 e5       	ldi	r26, 0x59	; 89
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	e9 e5       	ldi	r30, 0x59	; 89
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	80 81       	ld	r24, Z
    2fb2:	84 60       	ori	r24, 0x04	; 4
    2fb4:	8c 93       	st	X, r24
	}
	/* set FOC1 to 1 for non_PWM mode */
	TCCR1A|=(1<<FOC1A) | (1<<FOC1B);
    2fb6:	af e4       	ldi	r26, 0x4F	; 79
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	ef e4       	ldi	r30, 0x4F	; 79
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	8c 60       	ori	r24, 0x0C	; 12
    2fc2:	8c 93       	st	X, r24
	/* set prescaler and choose mode of operation */
	/* note : WGM!0 and WGM11 are set to 0 in both normal and compare mode */
	TCCR1B= Config_Ptr->prescaler | (Config_Ptr->mode<<WGM12);
    2fc4:	ae e4       	ldi	r26, 0x4E	; 78
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fca:	fa 81       	ldd	r31, Y+2	; 0x02
    2fcc:	84 81       	ldd	r24, Z+4	; 0x04
    2fce:	28 2f       	mov	r18, r24
    2fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd4:	85 81       	ldd	r24, Z+5	; 0x05
    2fd6:	88 2f       	mov	r24, r24
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	88 0f       	add	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	82 2b       	or	r24, r18
    2fe8:	8c 93       	st	X, r24
}
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <Timer1_deInit>:
/*
 * Description :
 * a function to deactivate timer1
 */
void Timer1_deInit(void)
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2ffc:	ef e4       	ldi	r30, 0x4F	; 79
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	10 82       	st	Z, r1
	TCCR1B=0;
    3002:	ee e4       	ldi	r30, 0x4E	; 78
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	10 82       	st	Z, r1
}
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <Timer1_setCallBack>:
/*
 * Description :
 * a function to set the call back function pointer
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	00 d0       	rcall	.+0      	; 0x3014 <Timer1_setCallBack+0x6>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	9a 83       	std	Y+2, r25	; 0x02
    301a:	89 83       	std	Y+1, r24	; 0x01
	g_callBack=a_ptr;
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	90 93 f7 00 	sts	0x00F7, r25
    3024:	80 93 f6 00 	sts	0x00F6, r24
}
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <UART_init>:
/*
 * Description :
 * initialize the UART with the required baud rate and frame
 */
void UART_init(const UART_ConfigType* config)
{
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	00 d0       	rcall	.+0      	; 0x3038 <UART_init+0x6>
    3038:	00 d0       	rcall	.+0      	; 0x303a <UART_init+0x8>
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	9c 83       	std	Y+4, r25	; 0x04
    3040:	8b 83       	std	Y+3, r24	; 0x03
	uint16 baud_value;
	/* double transmission speed */
	UCSRA=(1<<U2X);
    3042:	eb e2       	ldi	r30, 0x2B	; 43
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	80 83       	st	Z, r24
	/* enable data transmission and receiving and disabling interrupts */
	UCSRB=(1<<TXEN)|(1<<RXEN);
    304a:	ea e2       	ldi	r30, 0x2A	; 42
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	88 e1       	ldi	r24, 0x18	; 24
    3050:	80 83       	st	Z, r24
	/* URSEL must be 1 to write in register
	 * selecting frame characteristics
	 */
	UCSRC=(1<<URSEL)|(config->parity<<4)|(config->stop_bits<<3)|(config->character_size<<1);
    3052:	a0 e4       	ldi	r26, 0x40	; 64
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	eb 81       	ldd	r30, Y+3	; 0x03
    3058:	fc 81       	ldd	r31, Y+4	; 0x04
    305a:	85 81       	ldd	r24, Z+5	; 0x05
    305c:	88 2f       	mov	r24, r24
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	82 95       	swap	r24
    3062:	92 95       	swap	r25
    3064:	90 7f       	andi	r25, 0xF0	; 240
    3066:	98 27       	eor	r25, r24
    3068:	80 7f       	andi	r24, 0xF0	; 240
    306a:	98 27       	eor	r25, r24
    306c:	28 2f       	mov	r18, r24
    306e:	20 68       	ori	r18, 0x80	; 128
    3070:	eb 81       	ldd	r30, Y+3	; 0x03
    3072:	fc 81       	ldd	r31, Y+4	; 0x04
    3074:	86 81       	ldd	r24, Z+6	; 0x06
    3076:	88 2f       	mov	r24, r24
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	88 0f       	add	r24, r24
    307c:	99 1f       	adc	r25, r25
    307e:	88 0f       	add	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	28 2b       	or	r18, r24
    3088:	eb 81       	ldd	r30, Y+3	; 0x03
    308a:	fc 81       	ldd	r31, Y+4	; 0x04
    308c:	84 81       	ldd	r24, Z+4	; 0x04
    308e:	88 2f       	mov	r24, r24
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	82 2b       	or	r24, r18
    3098:	8c 93       	st	X, r24
	/* calculating the value to achieve the required baud rate */
	baud_value=(uint16)((F_CPU / (config->baudRate * 8)) - 1);
    309a:	eb 81       	ldd	r30, Y+3	; 0x03
    309c:	fc 81       	ldd	r31, Y+4	; 0x04
    309e:	80 81       	ld	r24, Z
    30a0:	91 81       	ldd	r25, Z+1	; 0x01
    30a2:	a2 81       	ldd	r26, Z+2	; 0x02
    30a4:	b3 81       	ldd	r27, Z+3	; 0x03
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	aa 1f       	adc	r26, r26
    30ac:	bb 1f       	adc	r27, r27
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
    30b2:	aa 1f       	adc	r26, r26
    30b4:	bb 1f       	adc	r27, r27
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	aa 1f       	adc	r26, r26
    30bc:	bb 1f       	adc	r27, r27
    30be:	9c 01       	movw	r18, r24
    30c0:	ad 01       	movw	r20, r26
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	92 e1       	ldi	r25, 0x12	; 18
    30c6:	aa e7       	ldi	r26, 0x7A	; 122
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	bc 01       	movw	r22, r24
    30cc:	cd 01       	movw	r24, r26
    30ce:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__udivmodsi4>
    30d2:	da 01       	movw	r26, r20
    30d4:	c9 01       	movw	r24, r18
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	9a 83       	std	Y+2, r25	; 0x02
    30da:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=baud_value;
    30dc:	e9 e2       	ldi	r30, 0x29	; 41
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	80 83       	st	Z, r24
	UBRRH=(baud_value>>8);
    30e4:	e0 e4       	ldi	r30, 0x40	; 64
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	89 81       	ldd	r24, Y+1	; 0x01
    30ea:	9a 81       	ldd	r25, Y+2	; 0x02
    30ec:	89 2f       	mov	r24, r25
    30ee:	99 27       	eor	r25, r25
    30f0:	80 83       	st	Z, r24
}
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	cf 91       	pop	r28
    30fc:	df 91       	pop	r29
    30fe:	08 95       	ret

00003100 <UART_sendByte>:
/*
 * Description :
 * Function to send a byte
 */
void UART_sendByte(uint8 data)
{
    3100:	df 93       	push	r29
    3102:	cf 93       	push	r28
    3104:	0f 92       	push	r0
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	89 83       	std	Y+1, r24	; 0x01
	/* wait until transmission register is empty */
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    310c:	eb e2       	ldi	r30, 0x2B	; 43
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	88 2f       	mov	r24, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	80 72       	andi	r24, 0x20	; 32
    3118:	90 70       	andi	r25, 0x00	; 0
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	b9 f3       	breq	.-18     	; 0x310c <UART_sendByte+0xc>
	/* send the data */
	UDR=data;
    311e:	ec e2       	ldi	r30, 0x2C	; 44
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	80 83       	st	Z, r24
}
    3126:	0f 90       	pop	r0
    3128:	cf 91       	pop	r28
    312a:	df 91       	pop	r29
    312c:	08 95       	ret

0000312e <UART_receiveByte>:
/*
 * Description :
 * Function to read a received byte
 */
uint8 UART_receiveByte(void)
{
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
	/* wait until the entire bit is received */
	while(BIT_IS_CLEAR(UCSRA, RXC));
    3136:	eb e2       	ldi	r30, 0x2B	; 43
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	88 23       	and	r24, r24
    313e:	dc f7       	brge	.-10     	; 0x3136 <UART_receiveByte+0x8>
	/* read the data */
	return UDR;
    3140:	ec e2       	ldi	r30, 0x2C	; 44
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
}
    3146:	cf 91       	pop	r28
    3148:	df 91       	pop	r29
    314a:	08 95       	ret

0000314c <UART_sendString>:
/*
 * Description :
 * Function to send a String
 */
void UART_sendString(uint8* str)
{
    314c:	df 93       	push	r29
    314e:	cf 93       	push	r28
    3150:	00 d0       	rcall	.+0      	; 0x3152 <UART_sendString+0x6>
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
    3156:	9a 83       	std	Y+2, r25	; 0x02
    3158:	89 83       	std	Y+1, r24	; 0x01
    315a:	0a c0       	rjmp	.+20     	; 0x3170 <UART_sendString+0x24>
	for(; *str!='\0'; str++)
	{
		UART_sendByte(*str);
    315c:	e9 81       	ldd	r30, Y+1	; 0x01
    315e:	fa 81       	ldd	r31, Y+2	; 0x02
    3160:	80 81       	ld	r24, Z
    3162:	0e 94 80 18 	call	0x3100	; 0x3100 <UART_sendByte>
 * Description :
 * Function to send a String
 */
void UART_sendString(uint8* str)
{
	for(; *str!='\0'; str++)
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	9a 81       	ldd	r25, Y+2	; 0x02
    316a:	01 96       	adiw	r24, 0x01	; 1
    316c:	9a 83       	std	Y+2, r25	; 0x02
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	e9 81       	ldd	r30, Y+1	; 0x01
    3172:	fa 81       	ldd	r31, Y+2	; 0x02
    3174:	80 81       	ld	r24, Z
    3176:	88 23       	and	r24, r24
    3178:	89 f7       	brne	.-30     	; 0x315c <UART_sendString+0x10>
	{
		UART_sendByte(*str);
	}
}
    317a:	0f 90       	pop	r0
    317c:	0f 90       	pop	r0
    317e:	cf 91       	pop	r28
    3180:	df 91       	pop	r29
    3182:	08 95       	ret

00003184 <UART_receiveString>:
/*
 * Description :
 * Function to read a received String
 */
void UART_receiveString(uint8* str)
{
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	00 d0       	rcall	.+0      	; 0x318a <UART_receiveString+0x6>
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	9a 83       	std	Y+2, r25	; 0x02
    3190:	89 83       	std	Y+1, r24	; 0x01

	/* receive data until the stop byte agreed upon*/
	do
	{
		*str=UART_receiveByte();
    3192:	0e 94 97 18 	call	0x312e	; 0x312e <UART_receiveByte>
    3196:	e9 81       	ldd	r30, Y+1	; 0x01
    3198:	fa 81       	ldd	r31, Y+2	; 0x02
    319a:	80 83       	st	Z, r24
		str++;
    319c:	89 81       	ldd	r24, Y+1	; 0x01
    319e:	9a 81       	ldd	r25, Y+2	; 0x02
    31a0:	01 96       	adiw	r24, 0x01	; 1
    31a2:	9a 83       	std	Y+2, r25	; 0x02
    31a4:	89 83       	std	Y+1, r24	; 0x01
	}while(*(str-1)!='#');
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	fc 01       	movw	r30, r24
    31ac:	31 97       	sbiw	r30, 0x01	; 1
    31ae:	80 81       	ld	r24, Z
    31b0:	83 32       	cpi	r24, 0x23	; 35
    31b2:	79 f7       	brne	.-34     	; 0x3192 <UART_receiveString+0xe>
	/* replace the stop byte with null */
	*(str-1)='\0';
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	fc 01       	movw	r30, r24
    31ba:	31 97       	sbiw	r30, 0x01	; 1
    31bc:	10 82       	st	Z, r1
}
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <__udivmodsi4>:
    31c8:	a1 e2       	ldi	r26, 0x21	; 33
    31ca:	1a 2e       	mov	r1, r26
    31cc:	aa 1b       	sub	r26, r26
    31ce:	bb 1b       	sub	r27, r27
    31d0:	fd 01       	movw	r30, r26
    31d2:	0d c0       	rjmp	.+26     	; 0x31ee <__udivmodsi4_ep>

000031d4 <__udivmodsi4_loop>:
    31d4:	aa 1f       	adc	r26, r26
    31d6:	bb 1f       	adc	r27, r27
    31d8:	ee 1f       	adc	r30, r30
    31da:	ff 1f       	adc	r31, r31
    31dc:	a2 17       	cp	r26, r18
    31de:	b3 07       	cpc	r27, r19
    31e0:	e4 07       	cpc	r30, r20
    31e2:	f5 07       	cpc	r31, r21
    31e4:	20 f0       	brcs	.+8      	; 0x31ee <__udivmodsi4_ep>
    31e6:	a2 1b       	sub	r26, r18
    31e8:	b3 0b       	sbc	r27, r19
    31ea:	e4 0b       	sbc	r30, r20
    31ec:	f5 0b       	sbc	r31, r21

000031ee <__udivmodsi4_ep>:
    31ee:	66 1f       	adc	r22, r22
    31f0:	77 1f       	adc	r23, r23
    31f2:	88 1f       	adc	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	1a 94       	dec	r1
    31f8:	69 f7       	brne	.-38     	; 0x31d4 <__udivmodsi4_loop>
    31fa:	60 95       	com	r22
    31fc:	70 95       	com	r23
    31fe:	80 95       	com	r24
    3200:	90 95       	com	r25
    3202:	9b 01       	movw	r18, r22
    3204:	ac 01       	movw	r20, r24
    3206:	bd 01       	movw	r22, r26
    3208:	cf 01       	movw	r24, r30
    320a:	08 95       	ret

0000320c <__prologue_saves__>:
    320c:	2f 92       	push	r2
    320e:	3f 92       	push	r3
    3210:	4f 92       	push	r4
    3212:	5f 92       	push	r5
    3214:	6f 92       	push	r6
    3216:	7f 92       	push	r7
    3218:	8f 92       	push	r8
    321a:	9f 92       	push	r9
    321c:	af 92       	push	r10
    321e:	bf 92       	push	r11
    3220:	cf 92       	push	r12
    3222:	df 92       	push	r13
    3224:	ef 92       	push	r14
    3226:	ff 92       	push	r15
    3228:	0f 93       	push	r16
    322a:	1f 93       	push	r17
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	cd b7       	in	r28, 0x3d	; 61
    3232:	de b7       	in	r29, 0x3e	; 62
    3234:	ca 1b       	sub	r28, r26
    3236:	db 0b       	sbc	r29, r27
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	09 94       	ijmp

00003244 <__epilogue_restores__>:
    3244:	2a 88       	ldd	r2, Y+18	; 0x12
    3246:	39 88       	ldd	r3, Y+17	; 0x11
    3248:	48 88       	ldd	r4, Y+16	; 0x10
    324a:	5f 84       	ldd	r5, Y+15	; 0x0f
    324c:	6e 84       	ldd	r6, Y+14	; 0x0e
    324e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3250:	8c 84       	ldd	r8, Y+12	; 0x0c
    3252:	9b 84       	ldd	r9, Y+11	; 0x0b
    3254:	aa 84       	ldd	r10, Y+10	; 0x0a
    3256:	b9 84       	ldd	r11, Y+9	; 0x09
    3258:	c8 84       	ldd	r12, Y+8	; 0x08
    325a:	df 80       	ldd	r13, Y+7	; 0x07
    325c:	ee 80       	ldd	r14, Y+6	; 0x06
    325e:	fd 80       	ldd	r15, Y+5	; 0x05
    3260:	0c 81       	ldd	r16, Y+4	; 0x04
    3262:	1b 81       	ldd	r17, Y+3	; 0x03
    3264:	aa 81       	ldd	r26, Y+2	; 0x02
    3266:	b9 81       	ldd	r27, Y+1	; 0x01
    3268:	ce 0f       	add	r28, r30
    326a:	d1 1d       	adc	r29, r1
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	f8 94       	cli
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	cd bf       	out	0x3d, r28	; 61
    3276:	ed 01       	movw	r28, r26
    3278:	08 95       	ret

0000327a <itoa>:
    327a:	fb 01       	movw	r30, r22
    327c:	9f 01       	movw	r18, r30
    327e:	e8 94       	clt
    3280:	42 30       	cpi	r20, 0x02	; 2
    3282:	c4 f0       	brlt	.+48     	; 0x32b4 <itoa+0x3a>
    3284:	45 32       	cpi	r20, 0x25	; 37
    3286:	b4 f4       	brge	.+44     	; 0x32b4 <itoa+0x3a>
    3288:	4a 30       	cpi	r20, 0x0A	; 10
    328a:	29 f4       	brne	.+10     	; 0x3296 <itoa+0x1c>
    328c:	97 fb       	bst	r25, 7
    328e:	1e f4       	brtc	.+6      	; 0x3296 <itoa+0x1c>
    3290:	90 95       	com	r25
    3292:	81 95       	neg	r24
    3294:	9f 4f       	sbci	r25, 0xFF	; 255
    3296:	64 2f       	mov	r22, r20
    3298:	77 27       	eor	r23, r23
    329a:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__udivmodhi4>
    329e:	80 5d       	subi	r24, 0xD0	; 208
    32a0:	8a 33       	cpi	r24, 0x3A	; 58
    32a2:	0c f0       	brlt	.+2      	; 0x32a6 <itoa+0x2c>
    32a4:	89 5d       	subi	r24, 0xD9	; 217
    32a6:	81 93       	st	Z+, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	a1 f7       	brne	.-24     	; 0x3296 <itoa+0x1c>
    32ae:	16 f4       	brtc	.+4      	; 0x32b4 <itoa+0x3a>
    32b0:	5d e2       	ldi	r21, 0x2D	; 45
    32b2:	51 93       	st	Z+, r21
    32b4:	10 82       	st	Z, r1
    32b6:	c9 01       	movw	r24, r18
    32b8:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <strrev>

000032bc <strrev>:
    32bc:	dc 01       	movw	r26, r24
    32be:	fc 01       	movw	r30, r24
    32c0:	67 2f       	mov	r22, r23
    32c2:	71 91       	ld	r23, Z+
    32c4:	77 23       	and	r23, r23
    32c6:	e1 f7       	brne	.-8      	; 0x32c0 <strrev+0x4>
    32c8:	32 97       	sbiw	r30, 0x02	; 2
    32ca:	04 c0       	rjmp	.+8      	; 0x32d4 <strrev+0x18>
    32cc:	7c 91       	ld	r23, X
    32ce:	6d 93       	st	X+, r22
    32d0:	70 83       	st	Z, r23
    32d2:	62 91       	ld	r22, -Z
    32d4:	ae 17       	cp	r26, r30
    32d6:	bf 07       	cpc	r27, r31
    32d8:	c8 f3       	brcs	.-14     	; 0x32cc <strrev+0x10>
    32da:	08 95       	ret

000032dc <__udivmodhi4>:
    32dc:	aa 1b       	sub	r26, r26
    32de:	bb 1b       	sub	r27, r27
    32e0:	51 e1       	ldi	r21, 0x11	; 17
    32e2:	07 c0       	rjmp	.+14     	; 0x32f2 <__udivmodhi4_ep>

000032e4 <__udivmodhi4_loop>:
    32e4:	aa 1f       	adc	r26, r26
    32e6:	bb 1f       	adc	r27, r27
    32e8:	a6 17       	cp	r26, r22
    32ea:	b7 07       	cpc	r27, r23
    32ec:	10 f0       	brcs	.+4      	; 0x32f2 <__udivmodhi4_ep>
    32ee:	a6 1b       	sub	r26, r22
    32f0:	b7 0b       	sbc	r27, r23

000032f2 <__udivmodhi4_ep>:
    32f2:	88 1f       	adc	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	5a 95       	dec	r21
    32f8:	a9 f7       	brne	.-22     	; 0x32e4 <__udivmodhi4_loop>
    32fa:	80 95       	com	r24
    32fc:	90 95       	com	r25
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	08 95       	ret

00003304 <_exit>:
    3304:	f8 94       	cli

00003306 <__stop_program>:
    3306:	ff cf       	rjmp	.-2      	; 0x3306 <__stop_program>
