
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000032ec  00003380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000f6  008000f6  00003416  2**0
                  ALLOC
  3 .stab         00002b08  00000000  00000000  00003418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001201  00000000  00000000  00005f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007121  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007261  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000073d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000901a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000acb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b86f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 73 17 	jmp	0x2ee6	; 0x2ee6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 74 19 	jmp	0x32e8	; 0x32e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ee       	ldi	r26, 0xED	; 237
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ee       	ldi	r24, 0xED	; 237
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

volatile uint8 g_time;


int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uartConfig;
	/* a variable to store Timer1 configuration */
	Timer1_ConfigType timerConfig;

	/* UART configuration and initialization */
	uartConfig.baudRate = 9600;
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	95 e2       	ldi	r25, 0x25	; 37
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	8a 83       	std	Y+2, r24	; 0x02
     b64:	9b 83       	std	Y+3, r25	; 0x03
     b66:	ac 83       	std	Y+4, r26	; 0x04
     b68:	bd 83       	std	Y+5, r27	; 0x05
	uartConfig.character_size = EIGHT_BITS;
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	8e 83       	std	Y+6, r24	; 0x06
	uartConfig.parity = DISABLED;
     b6e:	1f 82       	std	Y+7, r1	; 0x07
	uartConfig.stop_bits = ONE_BIT;
     b70:	18 86       	std	Y+8, r1	; 0x08
	UART_init(&uartConfig);
     b72:	ce 01       	movw	r24, r28
     b74:	02 96       	adiw	r24, 0x02	; 2
     b76:	0e 94 0b 18 	call	0x3016	; 0x3016 <UART_init>

	/* Timer1 configuration without initialization
	 * configured to give interrupt every 7.5 seconds */
	timerConfig.initial_value = 0;
     b7a:	1a 86       	std	Y+10, r1	; 0x0a
     b7c:	19 86       	std	Y+9, r1	; 0x09
	timerConfig.mode = COMPARE;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	8e 87       	std	Y+14, r24	; 0x0e
	timerConfig.compare_value = 58593;
     b82:	81 ee       	ldi	r24, 0xE1	; 225
     b84:	94 ee       	ldi	r25, 0xE4	; 228
     b86:	9c 87       	std	Y+12, r25	; 0x0c
     b88:	8b 87       	std	Y+11, r24	; 0x0b
	timerConfig.prescaler = CLK_1024;
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	8d 87       	std	Y+13, r24	; 0x0d
	Timer1_setCallBack(timerTick);
     b8e:	8c e5       	ldi	r24, 0x5C	; 92
     b90:	96 e0       	ldi	r25, 0x06	; 6
     b92:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <Timer1_setCallBack>

	/* initialize LCD */
	LCD_init();
     b96:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <LCD_init>
	/* enable global interrupt */
	SREG|=(1<<7);
     b9a:	af e5       	ldi	r26, 0x5F	; 95
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ef e5       	ldi	r30, 0x5F	; 95
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	8c 93       	st	X, r24

	/* set password for first time
	 * continue asking for password if the confirmation doesn't match the password */
	while(setPassword() == UNMATCHED_PASSWORDS);
     ba8:	0e 94 81 07 	call	0xf02	; 0xf02 <setPassword>
     bac:	83 32       	cpi	r24, 0x23	; 35
     bae:	e1 f3       	breq	.-8      	; 0xba8 <main+0x62>

	for(;;)
	{
		LCD_clearScreen();
     bb0:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
     bb4:	80 e6       	ldi	r24, 0x60	; 96
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     bbc:	2e e6       	ldi	r18, 0x6E	; 110
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	a9 01       	movw	r20, r18
     bc6:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_displayStringRowColumn>
		do
		{
			key = KEYPAD_getPressedKey();
     bca:	0e 94 0e 0c 	call	0x181c	; 0x181c <KEYPAD_getPressedKey>
     bce:	89 83       	std	Y+1, r24	; 0x01
		}while(key != '+' && key != '-');
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	8b 32       	cpi	r24, 0x2B	; 43
     bd4:	19 f0       	breq	.+6      	; 0xbdc <main+0x96>
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	8d 32       	cpi	r24, 0x2D	; 45
     bda:	b9 f7       	brne	.-18     	; 0xbca <main+0x84>

		/* ask the user for the password and check if it's correct
		 * we need to check password to do either operation  */
		if(checkPassword() == MATCHED_PASSWORDS)
     bdc:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <checkPassword>
     be0:	88 32       	cpi	r24, 0x28	; 40
     be2:	09 f0       	breq	.+2      	; 0xbe6 <main+0xa0>
     be4:	48 c0       	rjmp	.+144    	; 0xc76 <main+0x130>
		{
			switch(key)
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	38 8b       	std	Y+16, r19	; 0x10
     bee:	2f 87       	std	Y+15, r18	; 0x0f
     bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf2:	98 89       	ldd	r25, Y+16	; 0x10
     bf4:	8b 32       	cpi	r24, 0x2B	; 43
     bf6:	91 05       	cpc	r25, r1
     bf8:	31 f0       	breq	.+12     	; 0xc06 <main+0xc0>
     bfa:	2f 85       	ldd	r18, Y+15	; 0x0f
     bfc:	38 89       	ldd	r19, Y+16	; 0x10
     bfe:	2d 32       	cpi	r18, 0x2D	; 45
     c00:	31 05       	cpc	r19, r1
     c02:	a1 f1       	breq	.+104    	; 0xc6c <main+0x126>
     c04:	d5 cf       	rjmp	.-86     	; 0xbb0 <main+0x6a>
			{
			case '+':
				/* send command open door to MCU2 */
				UART_sendByte(OPEN_DOOR);
     c06:	85 e0       	ldi	r24, 0x05	; 5
     c08:	0e 94 72 18 	call	0x30e4	; 0x30e4 <UART_sendByte>
				/* display the state of the lock
				 * MCU2 sends a dummy byte every time the state changes */
				UART_receiveByte();
     c0c:	0e 94 89 18 	call	0x3112	; 0x3112 <UART_receiveByte>
				LCD_clearScreen();
     c10:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_clearScreen>
				LCD_displayString("    Door is");
     c14:	8e e7       	ldi	r24, 0x7E	; 126
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
				LCD_displayStringRowColumn(1, 3, "Unlocking");
     c1c:	2a e8       	ldi	r18, 0x8A	; 138
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	63 e0       	ldi	r22, 0x03	; 3
     c24:	a9 01       	movw	r20, r18
     c26:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_displayStringRowColumn>

				UART_receiveByte();
     c2a:	0e 94 89 18 	call	0x3112	; 0x3112 <UART_receiveByte>
				LCD_clearScreen();
     c2e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_clearScreen>
				LCD_displayString("    Door is");
     c32:	8e e7       	ldi	r24, 0x7E	; 126
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
				LCD_displayStringRowColumn(1, 6, "Open");
     c3a:	24 e9       	ldi	r18, 0x94	; 148
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	66 e0       	ldi	r22, 0x06	; 6
     c42:	a9 01       	movw	r20, r18
     c44:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_displayStringRowColumn>


				UART_receiveByte();
     c48:	0e 94 89 18 	call	0x3112	; 0x3112 <UART_receiveByte>
				LCD_clearScreen();
     c4c:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_clearScreen>
				LCD_displayString("    Door is");
     c50:	8e e7       	ldi	r24, 0x7E	; 126
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
				LCD_displayStringRowColumn(1, 4, "Locking");
     c58:	29 e9       	ldi	r18, 0x99	; 153
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	64 e0       	ldi	r22, 0x04	; 4
     c60:	a9 01       	movw	r20, r18
     c62:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_displayStringRowColumn>

				UART_receiveByte();
     c66:	0e 94 89 18 	call	0x3112	; 0x3112 <UART_receiveByte>
     c6a:	a2 cf       	rjmp	.-188    	; 0xbb0 <main+0x6a>
				break;
			case '-':
				/* change password
				 * continue asking for password if the confirmation doesn't
				 *  match the password */
				while(setPassword() == UNMATCHED_PASSWORDS);
     c6c:	0e 94 81 07 	call	0xf02	; 0xf02 <setPassword>
     c70:	83 32       	cpi	r24, 0x23	; 35
     c72:	e1 f3       	breq	.-8      	; 0xc6c <main+0x126>
     c74:	9d cf       	rjmp	.-198    	; 0xbb0 <main+0x6a>
		else
		{
			/* if user enter password wrong 3 times release the alarm and stop
			 * the system for a minute */
			/* turn MCU2 buzzer on */
			UART_sendByte(BUZZER_ON);
     c76:	89 e1       	ldi	r24, 0x19	; 25
     c78:	0e 94 72 18 	call	0x30e4	; 0x30e4 <UART_sendByte>
			/* display error message */
			LCD_clearScreen();
     c7c:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_clearScreen>
			LCD_displayString("WRONG PASSWORD!");
     c80:	81 ea       	ldi	r24, 0xA1	; 161
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
			LCD_displayStringRowColumn(1, 1, "System Locked");
     c88:	21 eb       	ldi	r18, 0xB1	; 177
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	a9 01       	movw	r20, r18
     c92:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_displayStringRowColumn>
			/* set time t0 60 seconds (8 * 7.5 = 60) */
			g_time = 8;
     c96:	88 e0       	ldi	r24, 0x08	; 8
     c98:	80 93 f8 00 	sts	0x00F8, r24
			/* initialize timer1 */
			Timer1_init(&timerConfig);
     c9c:	ce 01       	movw	r24, r28
     c9e:	09 96       	adiw	r24, 0x09	; 9
     ca0:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <Timer1_init>
			/* wait until the minute is over */
			while(g_time > 0);
     ca4:	80 91 f8 00 	lds	r24, 0x00F8
     ca8:	88 23       	and	r24, r24
     caa:	e1 f7       	brne	.-8      	; 0xca4 <main+0x15e>
			/* de_initialize timer1 */
			Timer1_deInit();
     cac:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Timer1_deInit>
			/* turn MCU2 buzzer off */
			UART_sendByte(BUZZER_OFF);
     cb0:	8e e1       	ldi	r24, 0x1E	; 30
     cb2:	0e 94 72 18 	call	0x30e4	; 0x30e4 <UART_sendByte>
     cb6:	7c cf       	rjmp	.-264    	; 0xbb0 <main+0x6a>

00000cb8 <timerTick>:
 * Description :
 * a function that acts as the ISR of timer1
 * increase the time every interrupt
 */
void timerTick()
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	g_time--;
     cc0:	80 91 f8 00 	lds	r24, 0x00F8
     cc4:	81 50       	subi	r24, 0x01	; 1
     cc6:	80 93 f8 00 	sts	0x00F8, r24
}
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <getPassword>:
/*
 * Description :
 * a function to take 5 digits input from keypad (password)
 */
void getPassword(uint8* ptr)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	a0 97       	sbiw	r28, 0x20	; 32
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	98 a3       	std	Y+32, r25	; 0x20
     ce6:	8f 8f       	std	Y+31, r24	; 0x1f
	/* a variable to store pressed key */
	uint8 key;
	/* loop variable */
	uint8 i;
	/* get 5 digits password through keypad */
	for(i=0; i<5; i++)
     ce8:	1d 8e       	std	Y+29, r1	; 0x1d
     cea:	88 c0       	rjmp	.+272    	; 0xdfc <getPassword+0x12c>
	{
		do
		{
			key = KEYPAD_getPressedKey();
     cec:	0e 94 0e 0c 	call	0x181c	; 0x181c <KEYPAD_getPressedKey>
     cf0:	8e 8f       	std	Y+30, r24	; 0x1e
		}while(key < 0 || key >9);/* only take numbers as input */
     cf2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cf4:	8a 30       	cpi	r24, 0x0A	; 10
     cf6:	d0 f7       	brcc	.-12     	; 0xcec <getPassword+0x1c>

		ptr[i] = key;
     cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d00:	98 a1       	ldd	r25, Y+32	; 0x20
     d02:	fc 01       	movw	r30, r24
     d04:	e2 0f       	add	r30, r18
     d06:	f3 1f       	adc	r31, r19
     d08:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d0a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     d0c:	8a e2       	ldi	r24, 0x2A	; 42
     d0e:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayCharacter>
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a8 ec       	ldi	r26, 0xC8	; 200
     d18:	b3 e4       	ldi	r27, 0x43	; 67
     d1a:	89 8f       	std	Y+25, r24	; 0x19
     d1c:	9a 8f       	std	Y+26, r25	; 0x1a
     d1e:	ab 8f       	std	Y+27, r26	; 0x1b
     d20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a ef       	ldi	r20, 0xFA	; 250
     d30:	54 e4       	ldi	r21, 0x44	; 68
     d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	8d 8b       	std	Y+21, r24	; 0x15
     d3c:	9e 8b       	std	Y+22, r25	; 0x16
     d3e:	af 8b       	std	Y+23, r26	; 0x17
     d40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d42:	6d 89       	ldd	r22, Y+21	; 0x15
     d44:	7e 89       	ldd	r23, Y+22	; 0x16
     d46:	8f 89       	ldd	r24, Y+23	; 0x17
     d48:	98 8d       	ldd	r25, Y+24	; 0x18
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d56:	88 23       	and	r24, r24
     d58:	2c f4       	brge	.+10     	; 0xd64 <getPassword+0x94>
		__ticks = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9c 8b       	std	Y+20, r25	; 0x14
     d60:	8b 8b       	std	Y+19, r24	; 0x13
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <getPassword+0x112>
	else if (__tmp > 65535)
     d64:	6d 89       	ldd	r22, Y+21	; 0x15
     d66:	7e 89       	ldd	r23, Y+22	; 0x16
     d68:	8f 89       	ldd	r24, Y+23	; 0x17
     d6a:	98 8d       	ldd	r25, Y+24	; 0x18
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	4c f5       	brge	.+82     	; 0xdce <getPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7c:	69 8d       	ldd	r22, Y+25	; 0x19
     d7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9c 8b       	std	Y+20, r25	; 0x14
     da2:	8b 8b       	std	Y+19, r24	; 0x13
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <getPassword+0xf4>
     da6:	88 ec       	ldi	r24, 0xC8	; 200
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9a 8b       	std	Y+18, r25	; 0x12
     dac:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dae:	89 89       	ldd	r24, Y+17	; 0x11
     db0:	9a 89       	ldd	r25, Y+18	; 0x12
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <getPassword+0xe2>
     db6:	9a 8b       	std	Y+18, r25	; 0x12
     db8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dba:	8b 89       	ldd	r24, Y+19	; 0x13
     dbc:	9c 89       	ldd	r25, Y+20	; 0x14
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	9c 8b       	std	Y+20, r25	; 0x14
     dc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc4:	8b 89       	ldd	r24, Y+19	; 0x13
     dc6:	9c 89       	ldd	r25, Y+20	; 0x14
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f7       	brne	.-38     	; 0xda6 <getPassword+0xd6>
     dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <getPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dce:	6d 89       	ldd	r22, Y+21	; 0x15
     dd0:	7e 89       	ldd	r23, Y+22	; 0x16
     dd2:	8f 89       	ldd	r24, Y+23	; 0x17
     dd4:	98 8d       	ldd	r25, Y+24	; 0x18
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9c 8b       	std	Y+20, r25	; 0x14
     de0:	8b 8b       	std	Y+19, r24	; 0x13
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	98 8b       	std	Y+16, r25	; 0x10
     de8:	8f 87       	std	Y+15, r24	; 0x0f
     dea:	8f 85       	ldd	r24, Y+15	; 0x0f
     dec:	98 89       	ldd	r25, Y+16	; 0x10
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <getPassword+0x11e>
     df2:	98 8b       	std	Y+16, r25	; 0x10
     df4:	8f 87       	std	Y+15, r24	; 0x0f
	/* a variable to store pressed key */
	uint8 key;
	/* loop variable */
	uint8 i;
	/* get 5 digits password through keypad */
	for(i=0; i<5; i++)
     df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df8:	8f 5f       	subi	r24, 0xFF	; 255
     dfa:	8d 8f       	std	Y+29, r24	; 0x1d
     dfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dfe:	85 30       	cpi	r24, 0x05	; 5
     e00:	08 f4       	brcc	.+2      	; 0xe04 <getPassword+0x134>
     e02:	74 cf       	rjmp	.-280    	; 0xcec <getPassword+0x1c>
		ptr[i] = key;
		LCD_displayCharacter('*');
		_delay_ms(400);
	}
	/* wait for user to press enter */
	while(KEYPAD_getPressedKey() != ENTER);
     e04:	0e 94 0e 0c 	call	0x181c	; 0x181c <KEYPAD_getPressedKey>
     e08:	8d 33       	cpi	r24, 0x3D	; 61
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <getPassword+0x134>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	a8 ec       	ldi	r26, 0xC8	; 200
     e12:	b3 e4       	ldi	r27, 0x43	; 67
     e14:	8b 87       	std	Y+11, r24	; 0x0b
     e16:	9c 87       	std	Y+12, r25	; 0x0c
     e18:	ad 87       	std	Y+13, r26	; 0x0d
     e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	9e 85       	ldd	r25, Y+14	; 0x0e
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	4a ef       	ldi	r20, 0xFA	; 250
     e2a:	54 e4       	ldi	r21, 0x44	; 68
     e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	8f 83       	std	Y+7, r24	; 0x07
     e36:	98 87       	std	Y+8, r25	; 0x08
     e38:	a9 87       	std	Y+9, r26	; 0x09
     e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e3c:	6f 81       	ldd	r22, Y+7	; 0x07
     e3e:	78 85       	ldd	r23, Y+8	; 0x08
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e8       	ldi	r20, 0x80	; 128
     e4a:	5f e3       	ldi	r21, 0x3F	; 63
     e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e50:	88 23       	and	r24, r24
     e52:	2c f4       	brge	.+10     	; 0xe5e <getPassword+0x18e>
		__ticks = 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	3f c0       	rjmp	.+126    	; 0xedc <getPassword+0x20c>
	else if (__tmp > 65535)
     e5e:	6f 81       	ldd	r22, Y+7	; 0x07
     e60:	78 85       	ldd	r23, Y+8	; 0x08
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	3f ef       	ldi	r19, 0xFF	; 255
     e6a:	4f e7       	ldi	r20, 0x7F	; 127
     e6c:	57 e4       	ldi	r21, 0x47	; 71
     e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e72:	18 16       	cp	r1, r24
     e74:	4c f5       	brge	.+82     	; 0xec8 <getPassword+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e76:	6b 85       	ldd	r22, Y+11	; 0x0b
     e78:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e2       	ldi	r20, 0x20	; 32
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	bc 01       	movw	r22, r24
     e90:	cd 01       	movw	r24, r26
     e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	0f c0       	rjmp	.+30     	; 0xebe <getPassword+0x1ee>
     ea0:	88 ec       	ldi	r24, 0xC8	; 200
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <getPassword+0x1dc>
     eb0:	9c 83       	std	Y+4, r25	; 0x04
     eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	69 f7       	brne	.-38     	; 0xea0 <getPassword+0x1d0>
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <getPassword+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec8:	6f 81       	ldd	r22, Y+7	; 0x07
     eca:	78 85       	ldd	r23, Y+8	; 0x08
     ecc:	89 85       	ldd	r24, Y+9	; 0x09
     ece:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <getPassword+0x218>
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400);
}
     ef0:	a0 96       	adiw	r28, 0x20	; 32
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <setPassword>:
/*
 * Description :
 * a function to set the password of lock
 */
uint8 setPassword()
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	2b 97       	sbiw	r28, 0x0b	; 11
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
	/* a variable to store the password */
	uint8 pass[5];
	/* a variable to store the re_entered password */
	uint8 passConfirm[5];
	/* ask the user for password */
	LCD_clearScreen();
     f16:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_clearScreen>
	LCD_displayString("plz enter pass: ");
     f1a:	8f eb       	ldi	r24, 0xBF	; 191
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
	LCD_moveCursor(1, 0);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_moveCursor>
	/* get 5 digits password through keypad */
	getPassword(pass);
     f2a:	ce 01       	movw	r24, r28
     f2c:	02 96       	adiw	r24, 0x02	; 2
     f2e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <getPassword>
	/* clear screen and ask the user to re_enter password */
	LCD_clearScreen();
     f32:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_clearScreen>
	LCD_displayString("plz re_enter the");
     f36:	80 ed       	ldi	r24, 0xD0	; 208
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "same pass: ");
     f3e:	21 ee       	ldi	r18, 0xE1	; 225
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	a9 01       	movw	r20, r18
     f48:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_displayStringRowColumn>
	/* get 5 digits password through keypad */
	getPassword(passConfirm);
     f4c:	ce 01       	movw	r24, r28
     f4e:	07 96       	adiw	r24, 0x07	; 7
     f50:	0e 94 68 06 	call	0xcd0	; 0xcd0 <getPassword>

	/* send a predefined character that indicates to the second MCU
	 * the operation is setting a new password */
	UART_sendByte(SET_PASSWORD);
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	0e 94 72 18 	call	0x30e4	; 0x30e4 <UART_sendByte>
	/* receive ready confirmation from MCU2 */
	UART_receiveByte();
     f5a:	0e 94 89 18 	call	0x3112	; 0x3112 <UART_receiveByte>
	/* send the two passwords */
	for(i=0; i<5; i++)
     f5e:	19 82       	std	Y+1, r1	; 0x01
     f60:	0e c0       	rjmp	.+28     	; 0xf7e <setPassword+0x7c>
	{
		UART_sendByte(pass[i]);
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	ce 01       	movw	r24, r28
     f6a:	02 96       	adiw	r24, 0x02	; 2
     f6c:	fc 01       	movw	r30, r24
     f6e:	e2 0f       	add	r30, r18
     f70:	f3 1f       	adc	r31, r19
     f72:	80 81       	ld	r24, Z
     f74:	0e 94 72 18 	call	0x30e4	; 0x30e4 <UART_sendByte>
	 * the operation is setting a new password */
	UART_sendByte(SET_PASSWORD);
	/* receive ready confirmation from MCU2 */
	UART_receiveByte();
	/* send the two passwords */
	for(i=0; i<5; i++)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	85 30       	cpi	r24, 0x05	; 5
     f82:	78 f3       	brcs	.-34     	; 0xf62 <setPassword+0x60>
	{
		UART_sendByte(pass[i]);
	}
	for(i=0; i<5; i++)
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	0e c0       	rjmp	.+28     	; 0xfa4 <setPassword+0xa2>
	{
		UART_sendByte(passConfirm[i]);\
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	ce 01       	movw	r24, r28
     f90:	07 96       	adiw	r24, 0x07	; 7
     f92:	fc 01       	movw	r30, r24
     f94:	e2 0f       	add	r30, r18
     f96:	f3 1f       	adc	r31, r19
     f98:	80 81       	ld	r24, Z
     f9a:	0e 94 72 18 	call	0x30e4	; 0x30e4 <UART_sendByte>
	/* send the two passwords */
	for(i=0; i<5; i++)
	{
		UART_sendByte(pass[i]);
	}
	for(i=0; i<5; i++)
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	85 30       	cpi	r24, 0x05	; 5
     fa8:	78 f3       	brcs	.-34     	; 0xf88 <setPassword+0x86>
	{
		UART_sendByte(passConfirm[i]);\
	}

	/* return MCU2 response whether the two passwords match or not */
	return UART_receiveByte();
     faa:	0e 94 89 18 	call	0x3112	; 0x3112 <UART_receiveByte>
}
     fae:	2b 96       	adiw	r28, 0x0b	; 11
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <checkPassword>:
 * Description :
 * a function to take the password and check if it is the same as the
 * password stored in the EEPROM connected to MCU2
 */
uint8 checkPassword()
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	29 97       	sbiw	r28, 0x09	; 9
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
	/* loop variable */
	uint8 i, j;
	/* a variable to store the password */
	uint8 pass[6];
	/* ask the user for password */
	for(i=0; i<3; i++)
     fd4:	1a 82       	std	Y+2, r1	; 0x02
     fd6:	30 c0       	rjmp	.+96     	; 0x1038 <checkPassword+0x78>
	{
		LCD_clearScreen();
     fd8:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_clearScreen>
		LCD_displayString("plz enter pass: ");
     fdc:	8f eb       	ldi	r24, 0xBF	; 191
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
		LCD_moveCursor(1, 0);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_moveCursor>

		UART_sendByte(COMPARE_PASSWORD);
     fec:	8f e0       	ldi	r24, 0x0F	; 15
     fee:	0e 94 72 18 	call	0x30e4	; 0x30e4 <UART_sendByte>
		/* get 5 digits password through keypad */
		getPassword(pass);
     ff2:	ce 01       	movw	r24, r28
     ff4:	03 96       	adiw	r24, 0x03	; 3
     ff6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <getPassword>
		/* receive ready confirmation from MCU2 */
		UART_receiveByte();
     ffa:	0e 94 89 18 	call	0x3112	; 0x3112 <UART_receiveByte>
		/* send password to MCU2 */
		for(j=0; j<5; j++)
     ffe:	19 82       	std	Y+1, r1	; 0x01
    1000:	0e c0       	rjmp	.+28     	; 0x101e <checkPassword+0x5e>
		{
			UART_sendByte(pass[j]);
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	ce 01       	movw	r24, r28
    100a:	03 96       	adiw	r24, 0x03	; 3
    100c:	fc 01       	movw	r30, r24
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	80 81       	ld	r24, Z
    1014:	0e 94 72 18 	call	0x30e4	; 0x30e4 <UART_sendByte>
		/* get 5 digits password through keypad */
		getPassword(pass);
		/* receive ready confirmation from MCU2 */
		UART_receiveByte();
		/* send password to MCU2 */
		for(j=0; j<5; j++)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	8f 5f       	subi	r24, 0xFF	; 255
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	85 30       	cpi	r24, 0x05	; 5
    1022:	78 f3       	brcs	.-34     	; 0x1002 <checkPassword+0x42>
		{
			UART_sendByte(pass[j]);
		}
		/* return MCU2 response  whether the two passwords match or not */
		if(UART_receiveByte() == MATCHED_PASSWORDS)
    1024:	0e 94 89 18 	call	0x3112	; 0x3112 <UART_receiveByte>
    1028:	88 32       	cpi	r24, 0x28	; 40
    102a:	19 f4       	brne	.+6      	; 0x1032 <checkPassword+0x72>
		{
			return MATCHED_PASSWORDS;
    102c:	88 e2       	ldi	r24, 0x28	; 40
    102e:	89 87       	std	Y+9, r24	; 0x09
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <checkPassword+0x82>
	/* loop variable */
	uint8 i, j;
	/* a variable to store the password */
	uint8 pass[6];
	/* ask the user for password */
	for(i=0; i<3; i++)
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	8f 5f       	subi	r24, 0xFF	; 255
    1036:	8a 83       	std	Y+2, r24	; 0x02
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	68 f2       	brcs	.-102    	; 0xfd8 <checkPassword+0x18>
		{
			return MATCHED_PASSWORDS;
		}
	}

	return UNMATCHED_PASSWORDS;
    103e:	83 e2       	ldi	r24, 0x23	; 35
    1040:	89 87       	std	Y+9, r24	; 0x09
    1042:	89 85       	ldd	r24, Y+9	; 0x09
}
    1044:	29 96       	adiw	r28, 0x09	; 9
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <GPIO_setupPinDirection+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <GPIO_setupPinDirection+0x8>
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
    1068:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	08 f0       	brcs	.+2      	; 0x1072 <GPIO_setupPinDirection+0x1c>
    1070:	d5 c0       	rjmp	.+426    	; 0x121c <GPIO_setupPinDirection+0x1c6>
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	08 f0       	brcs	.+2      	; 0x107a <GPIO_setupPinDirection+0x24>
    1078:	d1 c0       	rjmp	.+418    	; 0x121c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	91 05       	cpc	r25, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <GPIO_setupPinDirection+0x3a>
    108e:	43 c0       	rjmp	.+134    	; 0x1116 <GPIO_setupPinDirection+0xc0>
    1090:	2c 81       	ldd	r18, Y+4	; 0x04
    1092:	3d 81       	ldd	r19, Y+5	; 0x05
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <GPIO_setupPinDirection+0x4e>
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	9d 81       	ldd	r25, Y+5	; 0x05
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	71 f0       	breq	.+28     	; 0x10be <GPIO_setupPinDirection+0x68>
    10a2:	bc c0       	rjmp	.+376    	; 0x121c <GPIO_setupPinDirection+0x1c6>
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <GPIO_setupPinDirection+0x5a>
    10ae:	5f c0       	rjmp	.+190    	; 0x116e <GPIO_setupPinDirection+0x118>
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <GPIO_setupPinDirection+0x66>
    10ba:	85 c0       	rjmp	.+266    	; 0x11c6 <GPIO_setupPinDirection+0x170>
    10bc:	af c0       	rjmp	.+350    	; 0x121c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	a1 f4       	brne	.+40     	; 0x10ec <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    10c4:	aa e3       	ldi	r26, 0x3A	; 58
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ea e3       	ldi	r30, 0x3A	; 58
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <GPIO_setupPinDirection+0x8c>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <GPIO_setupPinDirection+0x88>
    10e6:	84 2b       	or	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	98 c0       	rjmp	.+304    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10ec:	aa e3       	ldi	r26, 0x3A	; 58
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ea e3       	ldi	r30, 0x3A	; 58
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <GPIO_setupPinDirection+0xb4>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <GPIO_setupPinDirection+0xb0>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	83 c0       	rjmp	.+262    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	a1 f4       	brne	.+40     	; 0x1144 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    111c:	a7 e3       	ldi	r26, 0x37	; 55
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e7 e3       	ldi	r30, 0x37	; 55
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <GPIO_setupPinDirection+0xe4>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <GPIO_setupPinDirection+0xe0>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	6c c0       	rjmp	.+216    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1144:	a7 e3       	ldi	r26, 0x37	; 55
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e7 e3       	ldi	r30, 0x37	; 55
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_setupPinDirection+0x10c>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_setupPinDirection+0x108>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	57 c0       	rjmp	.+174    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a1 f4       	brne	.+40     	; 0x119c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1174:	a4 e3       	ldi	r26, 0x34	; 52
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e4 e3       	ldi	r30, 0x34	; 52
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <GPIO_setupPinDirection+0x13c>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <GPIO_setupPinDirection+0x138>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	40 c0       	rjmp	.+128    	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    119c:	a4 e3       	ldi	r26, 0x34	; 52
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e4 e3       	ldi	r30, 0x34	; 52
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_setupPinDirection+0x164>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_setupPinDirection+0x160>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	2b c0       	rjmp	.+86     	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	a1 f4       	brne	.+40     	; 0x11f4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    11cc:	a1 e3       	ldi	r26, 0x31	; 49
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e1 e3       	ldi	r30, 0x31	; 49
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_setupPinDirection+0x194>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_setupPinDirection+0x190>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11f4:	a1 e3       	ldi	r26, 0x31	; 49
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e1 e3       	ldi	r30, 0x31	; 49
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_setupPinDirection+0x1bc>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_setupPinDirection+0x1b8>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <GPIO_writePin+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <GPIO_writePin+0x8>
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
    123e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	88 30       	cpi	r24, 0x08	; 8
    1244:	08 f0       	brcs	.+2      	; 0x1248 <GPIO_writePin+0x1c>
    1246:	d5 c0       	rjmp	.+426    	; 0x13f2 <GPIO_writePin+0x1c6>
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	08 f0       	brcs	.+2      	; 0x1250 <GPIO_writePin+0x24>
    124e:	d1 c0       	rjmp	.+418    	; 0x13f2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3d 83       	std	Y+5, r19	; 0x05
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <GPIO_writePin+0x3a>
    1264:	43 c0       	rjmp	.+134    	; 0x12ec <GPIO_writePin+0xc0>
    1266:	2c 81       	ldd	r18, Y+4	; 0x04
    1268:	3d 81       	ldd	r19, Y+5	; 0x05
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	2c f4       	brge	.+10     	; 0x127a <GPIO_writePin+0x4e>
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	71 f0       	breq	.+28     	; 0x1294 <GPIO_writePin+0x68>
    1278:	bc c0       	rjmp	.+376    	; 0x13f2 <GPIO_writePin+0x1c6>
    127a:	2c 81       	ldd	r18, Y+4	; 0x04
    127c:	3d 81       	ldd	r19, Y+5	; 0x05
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <GPIO_writePin+0x5a>
    1284:	5f c0       	rjmp	.+190    	; 0x1344 <GPIO_writePin+0x118>
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	09 f4       	brne	.+2      	; 0x1292 <GPIO_writePin+0x66>
    1290:	85 c0       	rjmp	.+266    	; 0x139c <GPIO_writePin+0x170>
    1292:	af c0       	rjmp	.+350    	; 0x13f2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	a1 f4       	brne	.+40     	; 0x12c2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    129a:	ab e3       	ldi	r26, 0x3B	; 59
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_writePin+0x8c>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <GPIO_writePin+0x88>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	98 c0       	rjmp	.+304    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    12c2:	ab e3       	ldi	r26, 0x3B	; 59
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e3       	ldi	r30, 0x3B	; 59
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <GPIO_writePin+0xb4>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <GPIO_writePin+0xb0>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	83 c0       	rjmp	.+262    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	a1 f4       	brne	.+40     	; 0x131a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12f2:	a8 e3       	ldi	r26, 0x38	; 56
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <GPIO_writePin+0xe4>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <GPIO_writePin+0xe0>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	6c c0       	rjmp	.+216    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    131a:	a8 e3       	ldi	r26, 0x38	; 56
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <GPIO_writePin+0x10c>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <GPIO_writePin+0x108>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	57 c0       	rjmp	.+174    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	a1 f4       	brne	.+40     	; 0x1372 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    134a:	a5 e3       	ldi	r26, 0x35	; 53
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <GPIO_writePin+0x13c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <GPIO_writePin+0x138>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	40 c0       	rjmp	.+128    	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1372:	a5 e3       	ldi	r26, 0x35	; 53
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e5 e3       	ldi	r30, 0x35	; 53
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_writePin+0x164>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_writePin+0x160>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	2b c0       	rjmp	.+86     	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    13a2:	a2 e3       	ldi	r26, 0x32	; 50
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e2 e3       	ldi	r30, 0x32	; 50
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_writePin+0x194>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_writePin+0x190>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    13ca:	a2 e3       	ldi	r26, 0x32	; 50
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e2 e3       	ldi	r30, 0x32	; 50
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_writePin+0x1bc>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_writePin+0x1b8>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <GPIO_readPin+0x6>
    1408:	00 d0       	rcall	.+0      	; 0x140a <GPIO_readPin+0x8>
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	8a 83       	std	Y+2, r24	; 0x02
    1412:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1414:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	08 f0       	brcs	.+2      	; 0x141e <GPIO_readPin+0x1c>
    141c:	84 c0       	rjmp	.+264    	; 0x1526 <GPIO_readPin+0x124>
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	84 30       	cpi	r24, 0x04	; 4
    1422:	08 f0       	brcs	.+2      	; 0x1426 <GPIO_readPin+0x24>
    1424:	80 c0       	rjmp	.+256    	; 0x1526 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3d 83       	std	Y+5, r19	; 0x05
    142e:	2c 83       	std	Y+4, r18	; 0x04
    1430:	4c 81       	ldd	r20, Y+4	; 0x04
    1432:	5d 81       	ldd	r21, Y+5	; 0x05
    1434:	41 30       	cpi	r20, 0x01	; 1
    1436:	51 05       	cpc	r21, r1
    1438:	79 f1       	breq	.+94     	; 0x1498 <GPIO_readPin+0x96>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	91 05       	cpc	r25, r1
    1442:	34 f4       	brge	.+12     	; 0x1450 <GPIO_readPin+0x4e>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	21 15       	cp	r18, r1
    144a:	31 05       	cpc	r19, r1
    144c:	69 f0       	breq	.+26     	; 0x1468 <GPIO_readPin+0x66>
    144e:	6b c0       	rjmp	.+214    	; 0x1526 <GPIO_readPin+0x124>
    1450:	4c 81       	ldd	r20, Y+4	; 0x04
    1452:	5d 81       	ldd	r21, Y+5	; 0x05
    1454:	42 30       	cpi	r20, 0x02	; 2
    1456:	51 05       	cpc	r21, r1
    1458:	b9 f1       	breq	.+110    	; 0x14c8 <GPIO_readPin+0xc6>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <GPIO_readPin+0x64>
    1464:	49 c0       	rjmp	.+146    	; 0x14f8 <GPIO_readPin+0xf6>
    1466:	5f c0       	rjmp	.+190    	; 0x1526 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1468:	e9 e3       	ldi	r30, 0x39	; 57
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <GPIO_readPin+0x7e>
    147c:	55 95       	asr	r21
    147e:	47 95       	ror	r20
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <GPIO_readPin+0x7a>
    1484:	ca 01       	movw	r24, r20
    1486:	81 70       	andi	r24, 0x01	; 1
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	88 23       	and	r24, r24
    148c:	19 f0       	breq	.+6      	; 0x1494 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	49 c0       	rjmp	.+146    	; 0x1526 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1494:	19 82       	std	Y+1, r1	; 0x01
    1496:	47 c0       	rjmp	.+142    	; 0x1526 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1498:	e6 e3       	ldi	r30, 0x36	; 54
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <GPIO_readPin+0xae>
    14ac:	55 95       	asr	r21
    14ae:	47 95       	ror	r20
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <GPIO_readPin+0xaa>
    14b4:	ca 01       	movw	r24, r20
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	90 70       	andi	r25, 0x00	; 0
    14ba:	88 23       	and	r24, r24
    14bc:	19 f0       	breq	.+6      	; 0x14c4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	31 c0       	rjmp	.+98     	; 0x1526 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14c4:	19 82       	std	Y+1, r1	; 0x01
    14c6:	2f c0       	rjmp	.+94     	; 0x1526 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    14c8:	e3 e3       	ldi	r30, 0x33	; 51
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <GPIO_readPin+0xde>
    14dc:	55 95       	asr	r21
    14de:	47 95       	ror	r20
    14e0:	8a 95       	dec	r24
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <GPIO_readPin+0xda>
    14e4:	ca 01       	movw	r24, r20
    14e6:	81 70       	andi	r24, 0x01	; 1
    14e8:	90 70       	andi	r25, 0x00	; 0
    14ea:	88 23       	and	r24, r24
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	19 c0       	rjmp	.+50     	; 0x1526 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14f4:	19 82       	std	Y+1, r1	; 0x01
    14f6:	17 c0       	rjmp	.+46     	; 0x1526 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14f8:	e0 e3       	ldi	r30, 0x30	; 48
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <GPIO_readPin+0x10e>
    150c:	55 95       	asr	r21
    150e:	47 95       	ror	r20
    1510:	8a 95       	dec	r24
    1512:	e2 f7       	brpl	.-8      	; 0x150c <GPIO_readPin+0x10a>
    1514:	ca 01       	movw	r24, r20
    1516:	81 70       	andi	r24, 0x01	; 1
    1518:	90 70       	andi	r25, 0x00	; 0
    151a:	88 23       	and	r24, r24
    151c:	19 f0       	breq	.+6      	; 0x1524 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1524:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <GPIO_setupPortDirection+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <GPIO_setupPortDirection+0x8>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	90 f5       	brcc	.+100    	; 0x15b2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3c 83       	std	Y+4, r19	; 0x04
    1556:	2b 83       	std	Y+3, r18	; 0x03
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	d1 f0       	breq	.+52     	; 0x1596 <GPIO_setupPortDirection+0x5e>
    1562:	2b 81       	ldd	r18, Y+3	; 0x03
    1564:	3c 81       	ldd	r19, Y+4	; 0x04
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	2c f4       	brge	.+10     	; 0x1576 <GPIO_setupPortDirection+0x3e>
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	61 f0       	breq	.+24     	; 0x158c <GPIO_setupPortDirection+0x54>
    1574:	1e c0       	rjmp	.+60     	; 0x15b2 <GPIO_setupPortDirection+0x7a>
    1576:	2b 81       	ldd	r18, Y+3	; 0x03
    1578:	3c 81       	ldd	r19, Y+4	; 0x04
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	81 f0       	breq	.+32     	; 0x15a0 <GPIO_setupPortDirection+0x68>
    1580:	8b 81       	ldd	r24, Y+3	; 0x03
    1582:	9c 81       	ldd	r25, Y+4	; 0x04
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	81 f0       	breq	.+32     	; 0x15aa <GPIO_setupPortDirection+0x72>
    158a:	13 c0       	rjmp	.+38     	; 0x15b2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    158c:	ea e3       	ldi	r30, 0x3A	; 58
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	80 83       	st	Z, r24
    1594:	0e c0       	rjmp	.+28     	; 0x15b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1596:	e7 e3       	ldi	r30, 0x37	; 55
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	80 83       	st	Z, r24
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15a0:	e4 e3       	ldi	r30, 0x34	; 52
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	80 83       	st	Z, r24
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15aa:	e1 e3       	ldi	r30, 0x31	; 49
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <GPIO_writePort+0x6>
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <GPIO_writePort+0x8>
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	84 30       	cpi	r24, 0x04	; 4
    15d4:	90 f5       	brcc	.+100    	; 0x163a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3c 83       	std	Y+4, r19	; 0x04
    15de:	2b 83       	std	Y+3, r18	; 0x03
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	d1 f0       	breq	.+52     	; 0x161e <GPIO_writePort+0x5e>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	2c f4       	brge	.+10     	; 0x15fe <GPIO_writePort+0x3e>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	61 f0       	breq	.+24     	; 0x1614 <GPIO_writePort+0x54>
    15fc:	1e c0       	rjmp	.+60     	; 0x163a <GPIO_writePort+0x7a>
    15fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1600:	3c 81       	ldd	r19, Y+4	; 0x04
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	81 f0       	breq	.+32     	; 0x1628 <GPIO_writePort+0x68>
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	81 f0       	breq	.+32     	; 0x1632 <GPIO_writePort+0x72>
    1612:	13 c0       	rjmp	.+38     	; 0x163a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1614:	eb e3       	ldi	r30, 0x3B	; 59
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	80 83       	st	Z, r24
    161c:	0e c0       	rjmp	.+28     	; 0x163a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    161e:	e8 e3       	ldi	r30, 0x38	; 56
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	80 83       	st	Z, r24
    1626:	09 c0       	rjmp	.+18     	; 0x163a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	80 83       	st	Z, r24
    1630:	04 c0       	rjmp	.+8      	; 0x163a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1632:	e2 e3       	ldi	r30, 0x32	; 50
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	80 83       	st	Z, r24
			break;
		}
	}
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <GPIO_readPort+0x6>
    164e:	00 d0       	rcall	.+0      	; 0x1650 <GPIO_readPort+0x8>
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1656:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	84 30       	cpi	r24, 0x04	; 4
    165c:	90 f5       	brcc	.+100    	; 0x16c2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3c 83       	std	Y+4, r19	; 0x04
    1666:	2b 83       	std	Y+3, r18	; 0x03
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	91 05       	cpc	r25, r1
    1670:	d1 f0       	breq	.+52     	; 0x16a6 <GPIO_readPort+0x5e>
    1672:	2b 81       	ldd	r18, Y+3	; 0x03
    1674:	3c 81       	ldd	r19, Y+4	; 0x04
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <GPIO_readPort+0x3e>
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	61 f0       	breq	.+24     	; 0x169c <GPIO_readPort+0x54>
    1684:	1e c0       	rjmp	.+60     	; 0x16c2 <GPIO_readPort+0x7a>
    1686:	2b 81       	ldd	r18, Y+3	; 0x03
    1688:	3c 81       	ldd	r19, Y+4	; 0x04
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	81 f0       	breq	.+32     	; 0x16b0 <GPIO_readPort+0x68>
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	91 05       	cpc	r25, r1
    1698:	81 f0       	breq	.+32     	; 0x16ba <GPIO_readPort+0x72>
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    169c:	e9 e3       	ldi	r30, 0x39	; 57
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	0e c0       	rjmp	.+28     	; 0x16c2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    16a6:	e6 e3       	ldi	r30, 0x36	; 54
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	09 c0       	rjmp	.+18     	; 0x16c2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    16b0:	e3 e3       	ldi	r30, 0x33	; 51
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    16ba:	e0 e3       	ldi	r30, 0x30	; 48
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <decipherKey>:
/*
 * Description :
 * takes the number of the key pressed and returns the intended input
 */
static uint8 decipherKey(uint8 key_num)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <decipherKey+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <decipherKey+0x8>
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			return key_num;
		}
	#else
		switch (key_num)
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	3c 83       	std	Y+4, r19	; 0x04
    16e8:	2b 83       	std	Y+3, r18	; 0x03
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	88 30       	cpi	r24, 0x08	; 8
    16f0:	91 05       	cpc	r25, r1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <decipherKey+0x24>
    16f4:	70 c0       	rjmp	.+224    	; 0x17d6 <decipherKey+0x104>
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	29 30       	cpi	r18, 0x09	; 9
    16fc:	31 05       	cpc	r19, r1
    16fe:	5c f5       	brge	.+86     	; 0x1756 <decipherKey+0x84>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	91 05       	cpc	r25, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <decipherKey+0x3a>
    170a:	59 c0       	rjmp	.+178    	; 0x17be <decipherKey+0xec>
    170c:	2b 81       	ldd	r18, Y+3	; 0x03
    170e:	3c 81       	ldd	r19, Y+4	; 0x04
    1710:	25 30       	cpi	r18, 0x05	; 5
    1712:	31 05       	cpc	r19, r1
    1714:	9c f4       	brge	.+38     	; 0x173c <decipherKey+0x6a>
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	91 05       	cpc	r25, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <decipherKey+0x50>
    1720:	48 c0       	rjmp	.+144    	; 0x17b2 <decipherKey+0xe0>
    1722:	2b 81       	ldd	r18, Y+3	; 0x03
    1724:	3c 81       	ldd	r19, Y+4	; 0x04
    1726:	23 30       	cpi	r18, 0x03	; 3
    1728:	31 05       	cpc	r19, r1
    172a:	0c f0       	brlt	.+2      	; 0x172e <decipherKey+0x5c>
    172c:	45 c0       	rjmp	.+138    	; 0x17b8 <decipherKey+0xe6>
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	09 f4       	brne	.+2      	; 0x173a <decipherKey+0x68>
    1738:	39 c0       	rjmp	.+114    	; 0x17ac <decipherKey+0xda>
    173a:	67 c0       	rjmp	.+206    	; 0x180a <decipherKey+0x138>
    173c:	2b 81       	ldd	r18, Y+3	; 0x03
    173e:	3c 81       	ldd	r19, Y+4	; 0x04
    1740:	26 30       	cpi	r18, 0x06	; 6
    1742:	31 05       	cpc	r19, r1
    1744:	09 f4       	brne	.+2      	; 0x1748 <decipherKey+0x76>
    1746:	41 c0       	rjmp	.+130    	; 0x17ca <decipherKey+0xf8>
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	87 30       	cpi	r24, 0x07	; 7
    174e:	91 05       	cpc	r25, r1
    1750:	0c f0       	brlt	.+2      	; 0x1754 <decipherKey+0x82>
    1752:	3e c0       	rjmp	.+124    	; 0x17d0 <decipherKey+0xfe>
    1754:	37 c0       	rjmp	.+110    	; 0x17c4 <decipherKey+0xf2>
    1756:	2b 81       	ldd	r18, Y+3	; 0x03
    1758:	3c 81       	ldd	r19, Y+4	; 0x04
    175a:	2c 30       	cpi	r18, 0x0C	; 12
    175c:	31 05       	cpc	r19, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <decipherKey+0x90>
    1760:	46 c0       	rjmp	.+140    	; 0x17ee <decipherKey+0x11c>
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	8d 30       	cpi	r24, 0x0D	; 13
    1768:	91 05       	cpc	r25, r1
    176a:	5c f4       	brge	.+22     	; 0x1782 <decipherKey+0xb0>
    176c:	2b 81       	ldd	r18, Y+3	; 0x03
    176e:	3c 81       	ldd	r19, Y+4	; 0x04
    1770:	2a 30       	cpi	r18, 0x0A	; 10
    1772:	31 05       	cpc	r19, r1
    1774:	b1 f1       	breq	.+108    	; 0x17e2 <decipherKey+0x110>
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	8b 30       	cpi	r24, 0x0B	; 11
    177c:	91 05       	cpc	r25, r1
    177e:	a4 f5       	brge	.+104    	; 0x17e8 <decipherKey+0x116>
    1780:	2d c0       	rjmp	.+90     	; 0x17dc <decipherKey+0x10a>
    1782:	2b 81       	ldd	r18, Y+3	; 0x03
    1784:	3c 81       	ldd	r19, Y+4	; 0x04
    1786:	2e 30       	cpi	r18, 0x0E	; 14
    1788:	31 05       	cpc	r19, r1
    178a:	b9 f1       	breq	.+110    	; 0x17fa <decipherKey+0x128>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	8e 30       	cpi	r24, 0x0E	; 14
    1792:	91 05       	cpc	r25, r1
    1794:	7c f1       	brlt	.+94     	; 0x17f4 <decipherKey+0x122>
    1796:	2b 81       	ldd	r18, Y+3	; 0x03
    1798:	3c 81       	ldd	r19, Y+4	; 0x04
    179a:	2f 30       	cpi	r18, 0x0F	; 15
    179c:	31 05       	cpc	r19, r1
    179e:	79 f1       	breq	.+94     	; 0x17fe <decipherKey+0x12c>
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	80 31       	cpi	r24, 0x10	; 16
    17a6:	91 05       	cpc	r25, r1
    17a8:	69 f1       	breq	.+90     	; 0x1804 <decipherKey+0x132>
    17aa:	2f c0       	rjmp	.+94     	; 0x180a <decipherKey+0x138>
		{
		case 1:
			return 7;
    17ac:	97 e0       	ldi	r25, 0x07	; 7
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	2d c0       	rjmp	.+90     	; 0x180c <decipherKey+0x13a>
			break;
		case 2:
			return 8;
    17b2:	28 e0       	ldi	r18, 0x08	; 8
    17b4:	2a 83       	std	Y+2, r18	; 0x02
    17b6:	2a c0       	rjmp	.+84     	; 0x180c <decipherKey+0x13a>
			break;
		case 3:
			return 9;
    17b8:	39 e0       	ldi	r19, 0x09	; 9
    17ba:	3a 83       	std	Y+2, r19	; 0x02
    17bc:	27 c0       	rjmp	.+78     	; 0x180c <decipherKey+0x13a>
			break;
		case 4:
			return '%';
    17be:	85 e2       	ldi	r24, 0x25	; 37
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	24 c0       	rjmp	.+72     	; 0x180c <decipherKey+0x13a>
			break;
		case 5:
			return 4;
    17c4:	94 e0       	ldi	r25, 0x04	; 4
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	21 c0       	rjmp	.+66     	; 0x180c <decipherKey+0x13a>
			break;
		case 6:
			return 5;
    17ca:	25 e0       	ldi	r18, 0x05	; 5
    17cc:	2a 83       	std	Y+2, r18	; 0x02
    17ce:	1e c0       	rjmp	.+60     	; 0x180c <decipherKey+0x13a>
			break;
		case 7:
			return 6;
    17d0:	36 e0       	ldi	r19, 0x06	; 6
    17d2:	3a 83       	std	Y+2, r19	; 0x02
    17d4:	1b c0       	rjmp	.+54     	; 0x180c <decipherKey+0x13a>
			break;
		case 8:
			return '*';
    17d6:	8a e2       	ldi	r24, 0x2A	; 42
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	18 c0       	rjmp	.+48     	; 0x180c <decipherKey+0x13a>
			break;
		case 9:
			return 1;
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	15 c0       	rjmp	.+42     	; 0x180c <decipherKey+0x13a>
			break;
		case 10:
			return 2;
    17e2:	22 e0       	ldi	r18, 0x02	; 2
    17e4:	2a 83       	std	Y+2, r18	; 0x02
    17e6:	12 c0       	rjmp	.+36     	; 0x180c <decipherKey+0x13a>
			break;
		case 11:
			return 3;
    17e8:	33 e0       	ldi	r19, 0x03	; 3
    17ea:	3a 83       	std	Y+2, r19	; 0x02
    17ec:	0f c0       	rjmp	.+30     	; 0x180c <decipherKey+0x13a>
			break;
		case 12:
			return  '-';
    17ee:	8d e2       	ldi	r24, 0x2D	; 45
    17f0:	8a 83       	std	Y+2, r24	; 0x02
    17f2:	0c c0       	rjmp	.+24     	; 0x180c <decipherKey+0x13a>
			break;
		case 13:
			return '!';
    17f4:	91 e2       	ldi	r25, 0x21	; 33
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <decipherKey+0x13a>
			break;
		case 14:
			return 0;
    17fa:	1a 82       	std	Y+2, r1	; 0x02
    17fc:	07 c0       	rjmp	.+14     	; 0x180c <decipherKey+0x13a>
			break;
		case 15:
			return '=';
    17fe:	2d e3       	ldi	r18, 0x3D	; 61
    1800:	2a 83       	std	Y+2, r18	; 0x02
    1802:	04 c0       	rjmp	.+8      	; 0x180c <decipherKey+0x13a>
			break;
		case 16:
			return '+';
    1804:	3b e2       	ldi	r19, 0x2B	; 43
    1806:	3a 83       	std	Y+2, r19	; 0x02
    1808:	01 c0       	rjmp	.+2      	; 0x180c <decipherKey+0x13a>
			break;
		default:
			return 0;
    180a:	1a 82       	std	Y+2, r1	; 0x02
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
		}

	#endif
#endif
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <KEYPAD_getPressedKey>:
/*
 * Description :
 * get the pressed key number and return its value
 */
uint8 KEYPAD_getPressedKey(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	60 97       	sbiw	r28, 0x10	; 16
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
	uint8 row,col;/* counters for the loops */
	/* setup all the pins as input */
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID, PIN_INPUT);
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	64 e0       	ldi	r22, 0x04	; 4
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID+1, PIN_INPUT);
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	65 e0       	ldi	r22, 0x05	; 5
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID+2, PIN_INPUT);
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	66 e0       	ldi	r22, 0x06	; 6
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID+3, PIN_INPUT);
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	67 e0       	ldi	r22, 0x07	; 7
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID, PIN_INPUT);
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID+1, PIN_INPUT);
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID+2, PIN_INPUT);
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_OF_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID+3, PIN_INPUT);
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	63 e0       	ldi	r22, 0x03	; 3
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
#endif

	/* loop through all the keys until we find a pressed key */
	for(;;)
	{
		for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    1880:	18 8a       	std	Y+16, r1	; 0x10
    1882:	b1 c0       	rjmp	.+354    	; 0x19e6 <KEYPAD_getPressedKey+0x1ca>
		{
			/* set one row as output and enable it */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_OUTPUT);
    1884:	88 89       	ldd	r24, Y+16	; 0x10
    1886:	98 2f       	mov	r25, r24
    1888:	9c 5f       	subi	r25, 0xFC	; 252
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	69 2f       	mov	r22, r25
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, KEYPAD_KEY_PRESSED);
    1894:	88 89       	ldd	r24, Y+16	; 0x10
    1896:	98 2f       	mov	r25, r24
    1898:	9c 5f       	subi	r25, 0xFC	; 252
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	69 2f       	mov	r22, r25
    189e:	40 e0       	ldi	r20, 0x00	; 0
    18a0:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
			/* loop through all the key in the enabled row */
			for(col=0; col<KEYPAD_NUM_OF_COLS; col++)
    18a4:	1f 86       	std	Y+15, r1	; 0x0f
    18a6:	1f c0       	rjmp	.+62     	; 0x18e6 <KEYPAD_getPressedKey+0xca>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_COL_PIN_ID + col) == KEYPAD_KEY_PRESSED)
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    18ac:	0e 94 01 0a 	call	0x1402	; 0x1402 <GPIO_readPin>
    18b0:	88 23       	and	r24, r24
    18b2:	b1 f4       	brne	.+44     	; 0x18e0 <KEYPAD_getPressedKey+0xc4>
				{
					/* after finding a pressed key return the input intended by it */
					#if (KEYPAD_BASIC)
						return (row * KEYPAD_NUM_OF_COLS + col + 1);
					#else
						return decipherKey(row * KEYPAD_NUM_OF_COLS + col + 1);
    18b4:	88 89       	ldd	r24, Y+16	; 0x10
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	98 2f       	mov	r25, r24
    18c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c6:	89 0f       	add	r24, r25
    18c8:	8f 5f       	subi	r24, 0xFF	; 255
    18ca:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <decipherKey>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(10);
		}
	}
	return 0;
}
    18ce:	60 96       	adiw	r28, 0x10	; 16
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret
		{
			/* set one row as output and enable it */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, KEYPAD_KEY_PRESSED);
			/* loop through all the key in the enabled row */
			for(col=0; col<KEYPAD_NUM_OF_COLS; col++)
    18e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	84 30       	cpi	r24, 0x04	; 4
    18ea:	f0 f2       	brcs	.-68     	; 0x18a8 <KEYPAD_getPressedKey+0x8c>
						return decipherKey(row * KEYPAD_NUM_OF_COLS + col + 1);
					#endif
				}
			}
			/* set the same row as input to disable it */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_PIN_ID + row, PIN_INPUT);
    18ec:	88 89       	ldd	r24, Y+16	; 0x10
    18ee:	98 2f       	mov	r25, r24
    18f0:	9c 5f       	subi	r25, 0xFC	; 252
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	69 2f       	mov	r22, r25
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e2       	ldi	r26, 0x20	; 32
    1902:	b1 e4       	ldi	r27, 0x41	; 65
    1904:	8b 87       	std	Y+11, r24	; 0x0b
    1906:	9c 87       	std	Y+12, r25	; 0x0c
    1908:	ad 87       	std	Y+13, r26	; 0x0d
    190a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	6b 85       	ldd	r22, Y+11	; 0x0b
    190e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1910:	8d 85       	ldd	r24, Y+13	; 0x0d
    1912:	9e 85       	ldd	r25, Y+14	; 0x0e
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a ef       	ldi	r20, 0xFA	; 250
    191a:	54 e4       	ldi	r21, 0x44	; 68
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	8f 83       	std	Y+7, r24	; 0x07
    1926:	98 87       	std	Y+8, r25	; 0x08
    1928:	a9 87       	std	Y+9, r26	; 0x09
    192a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    192c:	6f 81       	ldd	r22, Y+7	; 0x07
    192e:	78 85       	ldd	r23, Y+8	; 0x08
    1930:	89 85       	ldd	r24, Y+9	; 0x09
    1932:	9a 85       	ldd	r25, Y+10	; 0x0a
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    194e:	6f 81       	ldd	r22, Y+7	; 0x07
    1950:	78 85       	ldd	r23, Y+8	; 0x08
    1952:	89 85       	ldd	r24, Y+9	; 0x09
    1954:	9a 85       	ldd	r25, Y+10	; 0x0a
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	4c f5       	brge	.+82     	; 0x19b8 <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	6b 85       	ldd	r22, Y+11	; 0x0b
    1968:	7c 85       	ldd	r23, Y+12	; 0x0c
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9e 83       	std	Y+6, r25	; 0x06
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <KEYPAD_getPressedKey+0x192>
    1990:	88 ec       	ldi	r24, 0xC8	; 200
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <KEYPAD_getPressedKey+0x180>
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	8d 81       	ldd	r24, Y+5	; 0x05
    19a6:	9e 81       	ldd	r25, Y+6	; 0x06
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f7       	brne	.-38     	; 0x1990 <KEYPAD_getPressedKey+0x174>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <KEYPAD_getPressedKey+0x1bc>
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
#endif

	/* loop through all the keys until we find a pressed key */
	for(;;)
	{
		for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    19e0:	88 89       	ldd	r24, Y+16	; 0x10
    19e2:	8f 5f       	subi	r24, 0xFF	; 255
    19e4:	88 8b       	std	Y+16, r24	; 0x10
    19e6:	88 89       	ldd	r24, Y+16	; 0x10
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	08 f4       	brcc	.+2      	; 0x19ee <KEYPAD_getPressedKey+0x1d2>
    19ec:	4b cf       	rjmp	.-362    	; 0x1884 <KEYPAD_getPressedKey+0x68>
    19ee:	48 cf       	rjmp	.-368    	; 0x1880 <KEYPAD_getPressedKey+0x64>

000019f0 <LCD_init>:
 * initialize the LCD ports
 * configure 2 lines 8 bit mode
 * clear the screen and disable cursor
 */
void LCD_init(void)
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	2e 97       	sbiw	r28, 0x0e	; 14
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
	/* configure RS pin output */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	/* configure enable pin output */
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
	/* choose 2 lines 8 bits mode */
	LCD_sendCommand(LCD_2LINES_8BITS_MODE);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	/* configure data pins output for 8 bit operations */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, PIN_OUTPUT);
    1a18:	82 e0       	ldi	r24, 0x02	; 2
    1a1a:	64 e0       	ldi	r22, 0x04	; 4
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, PIN_OUTPUT);
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	65 e0       	ldi	r22, 0x05	; 5
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, PIN_OUTPUT);
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	66 e0       	ldi	r22, 0x06	; 6
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, PIN_OUTPUT);
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	67 e0       	ldi	r22, 0x07	; 7
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_setupPinDirection>

	/* send 4 bits initialization */
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT1);
    1a40:	83 e3       	ldi	r24, 0x33	; 51
    1a42:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
	LCD_sendCommand(LCD_2LINES_4BITS_MODE_INIT2);
    1a46:	82 e3       	ldi	r24, 0x32	; 50
    1a48:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
	/* choose 2 lines 4 bits mode */
	LCD_sendCommand(LCD_2LINES_4BITS_MODE);
    1a4c:	88 e2       	ldi	r24, 0x28	; 40
    1a4e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a0 ea       	ldi	r26, 0xA0	; 160
    1a58:	b1 e4       	ldi	r27, 0x41	; 65
    1a5a:	8b 87       	std	Y+11, r24	; 0x0b
    1a5c:	9c 87       	std	Y+12, r25	; 0x0c
    1a5e:	ad 87       	std	Y+13, r26	; 0x0d
    1a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a ef       	ldi	r20, 0xFA	; 250
    1a70:	54 e4       	ldi	r21, 0x44	; 68
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8f 83       	std	Y+7, r24	; 0x07
    1a7c:	98 87       	std	Y+8, r25	; 0x08
    1a7e:	a9 87       	std	Y+9, r26	; 0x09
    1a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a82:	6f 81       	ldd	r22, Y+7	; 0x07
    1a84:	78 85       	ldd	r23, Y+8	; 0x08
    1a86:	89 85       	ldd	r24, Y+9	; 0x09
    1a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <LCD_init+0xb4>
		__ticks = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <LCD_init+0x132>
	else if (__tmp > 65535)
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	4c f5       	brge	.+82     	; 0x1b0e <LCD_init+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <LCD_init+0x114>
    1ae6:	88 ec       	ldi	r24, 0xC8	; 200
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_init+0x102>
    1af6:	9c 83       	std	Y+4, r25	; 0x04
    1af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	8d 81       	ldd	r24, Y+5	; 0x05
    1b06:	9e 81       	ldd	r25, Y+6	; 0x06
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <LCD_init+0xf6>
    1b0c:	14 c0       	rjmp	.+40     	; 0x1b36 <LCD_init+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_init+0x13e>
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(20);
	LCD_sendCommand(LCD_DISABLE_CURSOR);
    1b36:	8c e0       	ldi	r24, 0x0C	; 12
    1b38:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
}
    1b42:	2e 96       	adiw	r28, 0x0e	; 14
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <LCD_sendCommand>:
/*
 * Description :
 * send a command to the LCD
 */
void LCD_sendCommand(uint8 command)
{
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	c3 56       	subi	r28, 0x63	; 99
    1b62:	d0 40       	sbci	r29, 0x00	; 0
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	fe 01       	movw	r30, r28
    1b70:	ed 59       	subi	r30, 0x9D	; 157
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	80 83       	st	Z, r24
	/* set RS to low to send a command */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    1b80:	fe 01       	movw	r30, r28
    1b82:	e1 5a       	subi	r30, 0xA1	; 161
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 e8       	ldi	r26, 0x80	; 128
    1b8c:	bf e3       	ldi	r27, 0x3F	; 63
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	a2 83       	std	Z+2, r26	; 0x02
    1b94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	8e 01       	movw	r16, r28
    1b98:	05 5a       	subi	r16, 0xA5	; 165
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e1 5a       	subi	r30, 0xA1	; 161
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	4a ef       	ldi	r20, 0xFA	; 250
    1bb0:	54 e4       	ldi	r21, 0x44	; 68
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	f8 01       	movw	r30, r16
    1bbc:	80 83       	st	Z, r24
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	a2 83       	std	Z+2, r26	; 0x02
    1bc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e5 5a       	subi	r30, 0xA5	; 165
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e8       	ldi	r20, 0x80	; 128
    1bd8:	5f e3       	ldi	r21, 0x3F	; 63
    1bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bde:	88 23       	and	r24, r24
    1be0:	44 f4       	brge	.+16     	; 0x1bf2 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1be2:	fe 01       	movw	r30, r28
    1be4:	e7 5a       	subi	r30, 0xA7	; 167
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
    1bf0:	64 c0       	rjmp	.+200    	; 0x1cba <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e5 5a       	subi	r30, 0xA5	; 165
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	0c f0       	brlt	.+2      	; 0x1c12 <LCD_sendCommand+0xbe>
    1c10:	43 c0       	rjmp	.+134    	; 0x1c98 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	fe 01       	movw	r30, r28
    1c14:	e1 5a       	subi	r30, 0xA1	; 161
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8e 01       	movw	r16, r28
    1c32:	07 5a       	subi	r16, 0xA7	; 167
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
    1c48:	1f c0       	rjmp	.+62     	; 0x1c88 <LCD_sendCommand+0x134>
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e9 5a       	subi	r30, 0xA9	; 169
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	80 83       	st	Z, r24
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e9 5a       	subi	r30, 0xA9	; 169
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_sendCommand+0x10e>
    1c66:	fe 01       	movw	r30, r28
    1c68:	e9 5a       	subi	r30, 0xA9	; 169
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	de 01       	movw	r26, r28
    1c72:	a7 5a       	subi	r26, 0xA7	; 167
    1c74:	bf 4f       	sbci	r27, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	e7 5a       	subi	r30, 0xA7	; 167
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	11 96       	adiw	r26, 0x01	; 1
    1c84:	9c 93       	st	X, r25
    1c86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e7 5a       	subi	r30, 0xA7	; 167
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	d1 f6       	brne	.-76     	; 0x1c4a <LCD_sendCommand+0xf6>
    1c96:	27 c0       	rjmp	.+78     	; 0x1ce6 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	8e 01       	movw	r16, r28
    1c9a:	07 5a       	subi	r16, 0xA7	; 167
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e5 5a       	subi	r30, 0xA5	; 165
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	80 83       	st	Z, r24
    1cba:	de 01       	movw	r26, r28
    1cbc:	ab 5a       	subi	r26, 0xAB	; 171
    1cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e7 5a       	subi	r30, 0xA7	; 167
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	8d 93       	st	X+, r24
    1ccc:	9c 93       	st	X, r25
    1cce:	fe 01       	movw	r30, r28
    1cd0:	eb 5a       	subi	r30, 0xAB	; 171
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_sendCommand+0x184>
    1cdc:	fe 01       	movw	r30, r28
    1cde:	eb 5a       	subi	r30, 0xAB	; 171
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
	_delay_ms(1);
	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	61 e0       	ldi	r22, 0x01	; 1
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	ef 5a       	subi	r30, 0xAF	; 175
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a0 e8       	ldi	r26, 0x80	; 128
    1cfc:	bf e3       	ldi	r27, 0x3F	; 63
    1cfe:	80 83       	st	Z, r24
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	a2 83       	std	Z+2, r26	; 0x02
    1d04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d06:	8e 01       	movw	r16, r28
    1d08:	03 5b       	subi	r16, 0xB3	; 179
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ef 5a       	subi	r30, 0xAF	; 175
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4a ef       	ldi	r20, 0xFA	; 250
    1d20:	54 e4       	ldi	r21, 0x44	; 68
    1d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	f8 01       	movw	r30, r16
    1d2c:	80 83       	st	Z, r24
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	a2 83       	std	Z+2, r26	; 0x02
    1d32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d34:	fe 01       	movw	r30, r28
    1d36:	e3 5b       	subi	r30, 0xB3	; 179
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e8       	ldi	r20, 0x80	; 128
    1d48:	5f e3       	ldi	r21, 0x3F	; 63
    1d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d4e:	88 23       	and	r24, r24
    1d50:	44 f4       	brge	.+16     	; 0x1d62 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d52:	fe 01       	movw	r30, r28
    1d54:	e5 5b       	subi	r30, 0xB5	; 181
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	91 83       	std	Z+1, r25	; 0x01
    1d5e:	80 83       	st	Z, r24
    1d60:	64 c0       	rjmp	.+200    	; 0x1e2a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d62:	fe 01       	movw	r30, r28
    1d64:	e3 5b       	subi	r30, 0xB3	; 179
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	60 81       	ld	r22, Z
    1d6a:	71 81       	ldd	r23, Z+1	; 0x01
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	3f ef       	ldi	r19, 0xFF	; 255
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	57 e4       	ldi	r21, 0x47	; 71
    1d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	0c f0       	brlt	.+2      	; 0x1d82 <LCD_sendCommand+0x22e>
    1d80:	43 c0       	rjmp	.+134    	; 0x1e08 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d82:	fe 01       	movw	r30, r28
    1d84:	ef 5a       	subi	r30, 0xAF	; 175
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e2       	ldi	r20, 0x20	; 32
    1d96:	51 e4       	ldi	r21, 0x41	; 65
    1d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	8e 01       	movw	r16, r28
    1da2:	05 5b       	subi	r16, 0xB5	; 181
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	f8 01       	movw	r30, r16
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	80 83       	st	Z, r24
    1db8:	1f c0       	rjmp	.+62     	; 0x1df8 <LCD_sendCommand+0x2a4>
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e7 5b       	subi	r30, 0xB7	; 183
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	88 ec       	ldi	r24, 0xC8	; 200
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	80 83       	st	Z, r24
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e7 5b       	subi	r30, 0xB7	; 183
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <LCD_sendCommand+0x27e>
    1dd6:	fe 01       	movw	r30, r28
    1dd8:	e7 5b       	subi	r30, 0xB7	; 183
    1dda:	ff 4f       	sbci	r31, 0xFF	; 255
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de0:	de 01       	movw	r26, r28
    1de2:	a5 5b       	subi	r26, 0xB5	; 181
    1de4:	bf 4f       	sbci	r27, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	e5 5b       	subi	r30, 0xB5	; 181
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	11 96       	adiw	r26, 0x01	; 1
    1df4:	9c 93       	st	X, r25
    1df6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e5 5b       	subi	r30, 0xB5	; 181
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	d1 f6       	brne	.-76     	; 0x1dba <LCD_sendCommand+0x266>
    1e06:	27 c0       	rjmp	.+78     	; 0x1e56 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e08:	8e 01       	movw	r16, r28
    1e0a:	05 5b       	subi	r16, 0xB5	; 181
    1e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e3 5b       	subi	r30, 0xB3	; 179
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	60 81       	ld	r22, Z
    1e16:	71 81       	ldd	r23, Z+1	; 0x01
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	f8 01       	movw	r30, r16
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
    1e2a:	de 01       	movw	r26, r28
    1e2c:	a9 5b       	subi	r26, 0xB9	; 185
    1e2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e30:	fe 01       	movw	r30, r28
    1e32:	e5 5b       	subi	r30, 0xB5	; 181
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	8d 93       	st	X+, r24
    1e3c:	9c 93       	st	X, r25
    1e3e:	fe 01       	movw	r30, r28
    1e40:	e9 5b       	subi	r30, 0xB9	; 185
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	91 81       	ldd	r25, Z+1	; 0x01
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_sendCommand+0x2f4>
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e9 5b       	subi	r30, 0xB9	; 185
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(command, 4));
    1e56:	fe 01       	movw	r30, r28
    1e58:	ed 59       	subi	r30, 0x9D	; 157
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	80 71       	andi	r24, 0x10	; 16
    1e64:	90 70       	andi	r25, 0x00	; 0
    1e66:	95 95       	asr	r25
    1e68:	87 95       	ror	r24
    1e6a:	95 95       	asr	r25
    1e6c:	87 95       	ror	r24
    1e6e:	95 95       	asr	r25
    1e70:	87 95       	ror	r24
    1e72:	95 95       	asr	r25
    1e74:	87 95       	ror	r24
    1e76:	98 2f       	mov	r25, r24
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	64 e0       	ldi	r22, 0x04	; 4
    1e7c:	49 2f       	mov	r20, r25
    1e7e:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(command, 5));
    1e82:	fe 01       	movw	r30, r28
    1e84:	ed 59       	subi	r30, 0x9D	; 157
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	80 72       	andi	r24, 0x20	; 32
    1e90:	90 70       	andi	r25, 0x00	; 0
    1e92:	95 95       	asr	r25
    1e94:	87 95       	ror	r24
    1e96:	95 95       	asr	r25
    1e98:	87 95       	ror	r24
    1e9a:	95 95       	asr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	95 95       	asr	r25
    1ea0:	87 95       	ror	r24
    1ea2:	95 95       	asr	r25
    1ea4:	87 95       	ror	r24
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	82 e0       	ldi	r24, 0x02	; 2
    1eaa:	65 e0       	ldi	r22, 0x05	; 5
    1eac:	49 2f       	mov	r20, r25
    1eae:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(command, 6));
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ed 59       	subi	r30, 0x9D	; 157
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 81       	ld	r24, Z
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	80 74       	andi	r24, 0x40	; 64
    1ec0:	90 70       	andi	r25, 0x00	; 0
    1ec2:	08 2e       	mov	r0, r24
    1ec4:	89 2f       	mov	r24, r25
    1ec6:	00 0c       	add	r0, r0
    1ec8:	88 1f       	adc	r24, r24
    1eca:	99 0b       	sbc	r25, r25
    1ecc:	00 0c       	add	r0, r0
    1ece:	88 1f       	adc	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	98 2f       	mov	r25, r24
    1ed4:	82 e0       	ldi	r24, 0x02	; 2
    1ed6:	66 e0       	ldi	r22, 0x06	; 6
    1ed8:	49 2f       	mov	r20, r25
    1eda:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(command, 7));
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ed 59       	subi	r30, 0x9D	; 157
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	98 2f       	mov	r25, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	99 27       	eor	r25, r25
    1eec:	99 1f       	adc	r25, r25
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	67 e0       	ldi	r22, 0x07	; 7
    1ef2:	49 2f       	mov	r20, r25
    1ef4:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ed 5b       	subi	r30, 0xBD	; 189
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a0 e8       	ldi	r26, 0x80	; 128
    1f04:	bf e3       	ldi	r27, 0x3F	; 63
    1f06:	80 83       	st	Z, r24
    1f08:	91 83       	std	Z+1, r25	; 0x01
    1f0a:	a2 83       	std	Z+2, r26	; 0x02
    1f0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	8e 01       	movw	r16, r28
    1f10:	01 5c       	subi	r16, 0xC1	; 193
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	fe 01       	movw	r30, r28
    1f16:	ed 5b       	subi	r30, 0xBD	; 189
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4a ef       	ldi	r20, 0xFA	; 250
    1f28:	54 e4       	ldi	r21, 0x44	; 68
    1f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	f8 01       	movw	r30, r16
    1f34:	80 83       	st	Z, r24
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	a2 83       	std	Z+2, r26	; 0x02
    1f3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ff 96       	adiw	r30, 0x3f	; 63
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9e af       	std	Y+62, r25	; 0x3e
    1f5e:	8d af       	std	Y+61, r24	; 0x3d
    1f60:	46 c0       	rjmp	.+140    	; 0x1fee <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f62:	fe 01       	movw	r30, r28
    1f64:	ff 96       	adiw	r30, 0x3f	; 63
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	64 f5       	brge	.+88     	; 0x1fd6 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ed 5b       	subi	r30, 0xBD	; 189
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e af       	std	Y+62, r25	; 0x3e
    1faa:	8d af       	std	Y+61, r24	; 0x3d
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <LCD_sendCommand+0x478>
    1fae:	88 ec       	ldi	r24, 0xC8	; 200
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c af       	std	Y+60, r25	; 0x3c
    1fb4:	8b af       	std	Y+59, r24	; 0x3b
    1fb6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fb8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_sendCommand+0x466>
    1fbe:	9c af       	std	Y+60, r25	; 0x3c
    1fc0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9e af       	std	Y+62, r25	; 0x3e
    1fca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fce:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <LCD_sendCommand+0x45a>
    1fd4:	16 c0       	rjmp	.+44     	; 0x2002 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	ff 96       	adiw	r30, 0x3f	; 63
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e af       	std	Y+62, r25	; 0x3e
    1fec:	8d af       	std	Y+61, r24	; 0x3d
    1fee:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ff0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ff2:	9a af       	std	Y+58, r25	; 0x3a
    1ff4:	89 af       	std	Y+57, r24	; 0x39
    1ff6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ff8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_sendCommand+0x4a6>
    1ffe:	9a af       	std	Y+58, r25	; 0x3a
    2000:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* set enable bit to low*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a0 e8       	ldi	r26, 0x80	; 128
    2012:	bf e3       	ldi	r27, 0x3F	; 63
    2014:	8d ab       	std	Y+53, r24	; 0x35
    2016:	9e ab       	std	Y+54, r25	; 0x36
    2018:	af ab       	std	Y+55, r26	; 0x37
    201a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201c:	6d a9       	ldd	r22, Y+53	; 0x35
    201e:	7e a9       	ldd	r23, Y+54	; 0x36
    2020:	8f a9       	ldd	r24, Y+55	; 0x37
    2022:	98 ad       	ldd	r25, Y+56	; 0x38
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	89 ab       	std	Y+49, r24	; 0x31
    2036:	9a ab       	std	Y+50, r25	; 0x32
    2038:	ab ab       	std	Y+51, r26	; 0x33
    203a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    203c:	69 a9       	ldd	r22, Y+49	; 0x31
    203e:	7a a9       	ldd	r23, Y+50	; 0x32
    2040:	8b a9       	ldd	r24, Y+51	; 0x33
    2042:	9c a9       	ldd	r25, Y+52	; 0x34
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <LCD_sendCommand+0x50a>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	98 ab       	std	Y+48, r25	; 0x30
    205a:	8f a7       	std	Y+47, r24	; 0x2f
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    205e:	69 a9       	ldd	r22, Y+49	; 0x31
    2060:	7a a9       	ldd	r23, Y+50	; 0x32
    2062:	8b a9       	ldd	r24, Y+51	; 0x33
    2064:	9c a9       	ldd	r25, Y+52	; 0x34
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	4c f5       	brge	.+82     	; 0x20c8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	6d a9       	ldd	r22, Y+53	; 0x35
    2078:	7e a9       	ldd	r23, Y+54	; 0x36
    207a:	8f a9       	ldd	r24, Y+55	; 0x37
    207c:	98 ad       	ldd	r25, Y+56	; 0x38
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	98 ab       	std	Y+48, r25	; 0x30
    209c:	8f a7       	std	Y+47, r24	; 0x2f
    209e:	0f c0       	rjmp	.+30     	; 0x20be <LCD_sendCommand+0x56a>
    20a0:	88 ec       	ldi	r24, 0xC8	; 200
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e a7       	std	Y+46, r25	; 0x2e
    20a6:	8d a7       	std	Y+45, r24	; 0x2d
    20a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_sendCommand+0x558>
    20b0:	9e a7       	std	Y+46, r25	; 0x2e
    20b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b6:	98 a9       	ldd	r25, Y+48	; 0x30
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	98 ab       	std	Y+48, r25	; 0x30
    20bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c0:	98 a9       	ldd	r25, Y+48	; 0x30
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f7       	brne	.-38     	; 0x20a0 <LCD_sendCommand+0x54c>
    20c6:	14 c0       	rjmp	.+40     	; 0x20f0 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c8:	69 a9       	ldd	r22, Y+49	; 0x31
    20ca:	7a a9       	ldd	r23, Y+50	; 0x32
    20cc:	8b a9       	ldd	r24, Y+51	; 0x33
    20ce:	9c a9       	ldd	r25, Y+52	; 0x34
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	98 ab       	std	Y+48, r25	; 0x30
    20da:	8f a7       	std	Y+47, r24	; 0x2f
    20dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20de:	98 a9       	ldd	r25, Y+48	; 0x30
    20e0:	9c a7       	std	Y+44, r25	; 0x2c
    20e2:	8b a7       	std	Y+43, r24	; 0x2b
    20e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_sendCommand+0x594>
    20ec:	9c a7       	std	Y+44, r25	; 0x2c
    20ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a0 e8       	ldi	r26, 0x80	; 128
    2100:	bf e3       	ldi	r27, 0x3F	; 63
    2102:	8f a3       	std	Y+39, r24	; 0x27
    2104:	98 a7       	std	Y+40, r25	; 0x28
    2106:	a9 a7       	std	Y+41, r26	; 0x29
    2108:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210a:	6f a1       	ldd	r22, Y+39	; 0x27
    210c:	78 a5       	ldd	r23, Y+40	; 0x28
    210e:	89 a5       	ldd	r24, Y+41	; 0x29
    2110:	9a a5       	ldd	r25, Y+42	; 0x2a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	4a ef       	ldi	r20, 0xFA	; 250
    2118:	54 e4       	ldi	r21, 0x44	; 68
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	8b a3       	std	Y+35, r24	; 0x23
    2124:	9c a3       	std	Y+36, r25	; 0x24
    2126:	ad a3       	std	Y+37, r26	; 0x25
    2128:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    212a:	6b a1       	ldd	r22, Y+35	; 0x23
    212c:	7c a1       	ldd	r23, Y+36	; 0x24
    212e:	8d a1       	ldd	r24, Y+37	; 0x25
    2130:	9e a1       	ldd	r25, Y+38	; 0x26
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e8       	ldi	r20, 0x80	; 128
    2138:	5f e3       	ldi	r21, 0x3F	; 63
    213a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213e:	88 23       	and	r24, r24
    2140:	2c f4       	brge	.+10     	; 0x214c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	9a a3       	std	Y+34, r25	; 0x22
    2148:	89 a3       	std	Y+33, r24	; 0x21
    214a:	3f c0       	rjmp	.+126    	; 0x21ca <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    214c:	6b a1       	ldd	r22, Y+35	; 0x23
    214e:	7c a1       	ldd	r23, Y+36	; 0x24
    2150:	8d a1       	ldd	r24, Y+37	; 0x25
    2152:	9e a1       	ldd	r25, Y+38	; 0x26
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	3f ef       	ldi	r19, 0xFF	; 255
    2158:	4f e7       	ldi	r20, 0x7F	; 127
    215a:	57 e4       	ldi	r21, 0x47	; 71
    215c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2160:	18 16       	cp	r1, r24
    2162:	4c f5       	brge	.+82     	; 0x21b6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2164:	6f a1       	ldd	r22, Y+39	; 0x27
    2166:	78 a5       	ldd	r23, Y+40	; 0x28
    2168:	89 a5       	ldd	r24, Y+41	; 0x29
    216a:	9a a5       	ldd	r25, Y+42	; 0x2a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e2       	ldi	r20, 0x20	; 32
    2172:	51 e4       	ldi	r21, 0x41	; 65
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9a a3       	std	Y+34, r25	; 0x22
    218a:	89 a3       	std	Y+33, r24	; 0x21
    218c:	0f c0       	rjmp	.+30     	; 0x21ac <LCD_sendCommand+0x658>
    218e:	88 ec       	ldi	r24, 0xC8	; 200
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	98 a3       	std	Y+32, r25	; 0x20
    2194:	8f 8f       	std	Y+31, r24	; 0x1f
    2196:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2198:	98 a1       	ldd	r25, Y+32	; 0x20
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_sendCommand+0x646>
    219e:	98 a3       	std	Y+32, r25	; 0x20
    21a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	89 a1       	ldd	r24, Y+33	; 0x21
    21a4:	9a a1       	ldd	r25, Y+34	; 0x22
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	9a a3       	std	Y+34, r25	; 0x22
    21aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ac:	89 a1       	ldd	r24, Y+33	; 0x21
    21ae:	9a a1       	ldd	r25, Y+34	; 0x22
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	69 f7       	brne	.-38     	; 0x218e <LCD_sendCommand+0x63a>
    21b4:	14 c0       	rjmp	.+40     	; 0x21de <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b6:	6b a1       	ldd	r22, Y+35	; 0x23
    21b8:	7c a1       	ldd	r23, Y+36	; 0x24
    21ba:	8d a1       	ldd	r24, Y+37	; 0x25
    21bc:	9e a1       	ldd	r25, Y+38	; 0x26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	9a a3       	std	Y+34, r25	; 0x22
    21c8:	89 a3       	std	Y+33, r24	; 0x21
    21ca:	89 a1       	ldd	r24, Y+33	; 0x21
    21cc:	9a a1       	ldd	r25, Y+34	; 0x22
    21ce:	9e 8f       	std	Y+30, r25	; 0x1e
    21d0:	8d 8f       	std	Y+29, r24	; 0x1d
    21d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_sendCommand+0x682>
    21da:	9e 8f       	std	Y+30, r25	; 0x1e
    21dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(command, 0));
    21de:	fe 01       	movw	r30, r28
    21e0:	ed 59       	subi	r30, 0x9D	; 157
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	80 81       	ld	r24, Z
    21e6:	98 2f       	mov	r25, r24
    21e8:	91 70       	andi	r25, 0x01	; 1
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	64 e0       	ldi	r22, 0x04	; 4
    21ee:	49 2f       	mov	r20, r25
    21f0:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(command, 1));
    21f4:	fe 01       	movw	r30, r28
    21f6:	ed 59       	subi	r30, 0x9D	; 157
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	88 2f       	mov	r24, r24
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	82 70       	andi	r24, 0x02	; 2
    2202:	90 70       	andi	r25, 0x00	; 0
    2204:	95 95       	asr	r25
    2206:	87 95       	ror	r24
    2208:	98 2f       	mov	r25, r24
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	65 e0       	ldi	r22, 0x05	; 5
    220e:	49 2f       	mov	r20, r25
    2210:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(command, 2));
    2214:	fe 01       	movw	r30, r28
    2216:	ed 59       	subi	r30, 0x9D	; 157
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	84 70       	andi	r24, 0x04	; 4
    2222:	90 70       	andi	r25, 0x00	; 0
    2224:	95 95       	asr	r25
    2226:	87 95       	ror	r24
    2228:	95 95       	asr	r25
    222a:	87 95       	ror	r24
    222c:	98 2f       	mov	r25, r24
    222e:	82 e0       	ldi	r24, 0x02	; 2
    2230:	66 e0       	ldi	r22, 0x06	; 6
    2232:	49 2f       	mov	r20, r25
    2234:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(command, 3));
    2238:	fe 01       	movw	r30, r28
    223a:	ed 59       	subi	r30, 0x9D	; 157
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	88 70       	andi	r24, 0x08	; 8
    2246:	90 70       	andi	r25, 0x00	; 0
    2248:	95 95       	asr	r25
    224a:	87 95       	ror	r24
    224c:	95 95       	asr	r25
    224e:	87 95       	ror	r24
    2250:	95 95       	asr	r25
    2252:	87 95       	ror	r24
    2254:	98 2f       	mov	r25, r24
    2256:	82 e0       	ldi	r24, 0x02	; 2
    2258:	67 e0       	ldi	r22, 0x07	; 7
    225a:	49 2f       	mov	r20, r25
    225c:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e8       	ldi	r26, 0x80	; 128
    2266:	bf e3       	ldi	r27, 0x3F	; 63
    2268:	89 8f       	std	Y+25, r24	; 0x19
    226a:	9a 8f       	std	Y+26, r25	; 0x1a
    226c:	ab 8f       	std	Y+27, r26	; 0x1b
    226e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2270:	69 8d       	ldd	r22, Y+25	; 0x19
    2272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	4a ef       	ldi	r20, 0xFA	; 250
    227e:	54 e4       	ldi	r21, 0x44	; 68
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8d 8b       	std	Y+21, r24	; 0x15
    228a:	9e 8b       	std	Y+22, r25	; 0x16
    228c:	af 8b       	std	Y+23, r26	; 0x17
    228e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2290:	6d 89       	ldd	r22, Y+21	; 0x15
    2292:	7e 89       	ldd	r23, Y+22	; 0x16
    2294:	8f 89       	ldd	r24, Y+23	; 0x17
    2296:	98 8d       	ldd	r25, Y+24	; 0x18
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e8       	ldi	r20, 0x80	; 128
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
    22b0:	3f c0       	rjmp	.+126    	; 0x2330 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    22b2:	6d 89       	ldd	r22, Y+21	; 0x15
    22b4:	7e 89       	ldd	r23, Y+22	; 0x16
    22b6:	8f 89       	ldd	r24, Y+23	; 0x17
    22b8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	4f e7       	ldi	r20, 0x7F	; 127
    22c0:	57 e4       	ldi	r21, 0x47	; 71
    22c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	4c f5       	brge	.+82     	; 0x231c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ca:	69 8d       	ldd	r22, Y+25	; 0x19
    22cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e2       	ldi	r20, 0x20	; 32
    22d8:	51 e4       	ldi	r21, 0x41	; 65
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9c 8b       	std	Y+20, r25	; 0x14
    22f0:	8b 8b       	std	Y+19, r24	; 0x13
    22f2:	0f c0       	rjmp	.+30     	; 0x2312 <LCD_sendCommand+0x7be>
    22f4:	88 ec       	ldi	r24, 0xC8	; 200
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9a 8b       	std	Y+18, r25	; 0x12
    22fa:	89 8b       	std	Y+17, r24	; 0x11
    22fc:	89 89       	ldd	r24, Y+17	; 0x11
    22fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <LCD_sendCommand+0x7ac>
    2304:	9a 8b       	std	Y+18, r25	; 0x12
    2306:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	8b 89       	ldd	r24, Y+19	; 0x13
    230a:	9c 89       	ldd	r25, Y+20	; 0x14
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	8b 89       	ldd	r24, Y+19	; 0x13
    2314:	9c 89       	ldd	r25, Y+20	; 0x14
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	69 f7       	brne	.-38     	; 0x22f4 <LCD_sendCommand+0x7a0>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231c:	6d 89       	ldd	r22, Y+21	; 0x15
    231e:	7e 89       	ldd	r23, Y+22	; 0x16
    2320:	8f 89       	ldd	r24, Y+23	; 0x17
    2322:	98 8d       	ldd	r25, Y+24	; 0x18
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9c 8b       	std	Y+20, r25	; 0x14
    232e:	8b 8b       	std	Y+19, r24	; 0x13
    2330:	8b 89       	ldd	r24, Y+19	; 0x13
    2332:	9c 89       	ldd	r25, Y+20	; 0x14
    2334:	98 8b       	std	Y+16, r25	; 0x10
    2336:	8f 87       	std	Y+15, r24	; 0x0f
    2338:	8f 85       	ldd	r24, Y+15	; 0x0f
    233a:	98 89       	ldd	r25, Y+16	; 0x10
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <LCD_sendCommand+0x7e8>
    2340:	98 8b       	std	Y+16, r25	; 0x10
    2342:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	61 e0       	ldi	r22, 0x01	; 1
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	a0 e8       	ldi	r26, 0x80	; 128
    2354:	bf e3       	ldi	r27, 0x3F	; 63
    2356:	8b 87       	std	Y+11, r24	; 0x0b
    2358:	9c 87       	std	Y+12, r25	; 0x0c
    235a:	ad 87       	std	Y+13, r26	; 0x0d
    235c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2360:	7c 85       	ldd	r23, Y+12	; 0x0c
    2362:	8d 85       	ldd	r24, Y+13	; 0x0d
    2364:	9e 85       	ldd	r25, Y+14	; 0x0e
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4a ef       	ldi	r20, 0xFA	; 250
    236c:	54 e4       	ldi	r21, 0x44	; 68
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8f 83       	std	Y+7, r24	; 0x07
    2378:	98 87       	std	Y+8, r25	; 0x08
    237a:	a9 87       	std	Y+9, r26	; 0x09
    237c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    237e:	6f 81       	ldd	r22, Y+7	; 0x07
    2380:	78 85       	ldd	r23, Y+8	; 0x08
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	2c f4       	brge	.+10     	; 0x23a0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	3f c0       	rjmp	.+126    	; 0x241e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    23a0:	6f 81       	ldd	r22, Y+7	; 0x07
    23a2:	78 85       	ldd	r23, Y+8	; 0x08
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	3f ef       	ldi	r19, 0xFF	; 255
    23ac:	4f e7       	ldi	r20, 0x7F	; 127
    23ae:	57 e4       	ldi	r21, 0x47	; 71
    23b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b4:	18 16       	cp	r1, r24
    23b6:	4c f5       	brge	.+82     	; 0x240a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e2       	ldi	r20, 0x20	; 32
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	bc 01       	movw	r22, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	0f c0       	rjmp	.+30     	; 0x2400 <LCD_sendCommand+0x8ac>
    23e2:	88 ec       	ldi	r24, 0xC8	; 200
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 83       	std	Y+4, r25	; 0x04
    23e8:	8b 83       	std	Y+3, r24	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_sendCommand+0x89a>
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	9e 81       	ldd	r25, Y+6	; 0x06
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	69 f7       	brne	.-38     	; 0x23e2 <LCD_sendCommand+0x88e>
    2408:	14 c0       	rjmp	.+40     	; 0x2432 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240a:	6f 81       	ldd	r22, Y+7	; 0x07
    240c:	78 85       	ldd	r23, Y+8	; 0x08
    240e:	89 85       	ldd	r24, Y+9	; 0x09
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	9a 81       	ldd	r25, Y+2	; 0x02
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <LCD_sendCommand+0x8d6>
    242e:	9a 83       	std	Y+2, r25	; 0x02
    2430:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2432:	cd 59       	subi	r28, 0x9D	; 157
    2434:	df 4f       	sbci	r29, 0xFF	; 255
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	08 95       	ret

0000244a <LCD_displayCharacter>:
/*
 * Description :
 * display a character on the LCD
 */
void LCD_displayCharacter(uint8 character)
{
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	c3 56       	subi	r28, 0x63	; 99
    2458:	d0 40       	sbci	r29, 0x00	; 0
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	fe 01       	movw	r30, r28
    2466:	ed 59       	subi	r30, 0x9D	; 157
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 83       	st	Z, r24
	/* set RS to high to send a character */
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    246c:	82 e0       	ldi	r24, 0x02	; 2
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    2476:	fe 01       	movw	r30, r28
    2478:	e1 5a       	subi	r30, 0xA1	; 161
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	a0 e8       	ldi	r26, 0x80	; 128
    2482:	bf e3       	ldi	r27, 0x3F	; 63
    2484:	80 83       	st	Z, r24
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	a2 83       	std	Z+2, r26	; 0x02
    248a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	8e 01       	movw	r16, r28
    248e:	05 5a       	subi	r16, 0xA5	; 165
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	fe 01       	movw	r30, r28
    2494:	e1 5a       	subi	r30, 0xA1	; 161
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4a ef       	ldi	r20, 0xFA	; 250
    24a6:	54 e4       	ldi	r21, 0x44	; 68
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	f8 01       	movw	r30, r16
    24b2:	80 83       	st	Z, r24
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	a2 83       	std	Z+2, r26	; 0x02
    24b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ba:	fe 01       	movw	r30, r28
    24bc:	e5 5a       	subi	r30, 0xA5	; 165
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	44 f4       	brge	.+16     	; 0x24e8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    24d8:	fe 01       	movw	r30, r28
    24da:	e7 5a       	subi	r30, 0xA7	; 167
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	64 c0       	rjmp	.+200    	; 0x25b0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    24e8:	fe 01       	movw	r30, r28
    24ea:	e5 5a       	subi	r30, 0xA5	; 165
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	3f ef       	ldi	r19, 0xFF	; 255
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	57 e4       	ldi	r21, 0x47	; 71
    24fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	0c f0       	brlt	.+2      	; 0x2508 <LCD_displayCharacter+0xbe>
    2506:	43 c0       	rjmp	.+134    	; 0x258e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	fe 01       	movw	r30, r28
    250a:	e1 5a       	subi	r30, 0xA1	; 161
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	8e 01       	movw	r16, r28
    2528:	07 5a       	subi	r16, 0xA7	; 167
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	f8 01       	movw	r30, r16
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
    253e:	1f c0       	rjmp	.+62     	; 0x257e <LCD_displayCharacter+0x134>
    2540:	fe 01       	movw	r30, r28
    2542:	e9 5a       	subi	r30, 0xA9	; 169
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	88 ec       	ldi	r24, 0xC8	; 200
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    254e:	fe 01       	movw	r30, r28
    2550:	e9 5a       	subi	r30, 0xA9	; 169
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_displayCharacter+0x10e>
    255c:	fe 01       	movw	r30, r28
    255e:	e9 5a       	subi	r30, 0xA9	; 169
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	de 01       	movw	r26, r28
    2568:	a7 5a       	subi	r26, 0xA7	; 167
    256a:	bf 4f       	sbci	r27, 0xFF	; 255
    256c:	fe 01       	movw	r30, r28
    256e:	e7 5a       	subi	r30, 0xA7	; 167
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	11 96       	adiw	r26, 0x01	; 1
    257a:	9c 93       	st	X, r25
    257c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257e:	fe 01       	movw	r30, r28
    2580:	e7 5a       	subi	r30, 0xA7	; 167
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	d1 f6       	brne	.-76     	; 0x2540 <LCD_displayCharacter+0xf6>
    258c:	27 c0       	rjmp	.+78     	; 0x25dc <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258e:	8e 01       	movw	r16, r28
    2590:	07 5a       	subi	r16, 0xA7	; 167
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	e5 5a       	subi	r30, 0xA5	; 165
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	f8 01       	movw	r30, r16
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	80 83       	st	Z, r24
    25b0:	de 01       	movw	r26, r28
    25b2:	ab 5a       	subi	r26, 0xAB	; 171
    25b4:	bf 4f       	sbci	r27, 0xFF	; 255
    25b6:	fe 01       	movw	r30, r28
    25b8:	e7 5a       	subi	r30, 0xA7	; 167
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	8d 93       	st	X+, r24
    25c2:	9c 93       	st	X, r25
    25c4:	fe 01       	movw	r30, r28
    25c6:	eb 5a       	subi	r30, 0xAB	; 171
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	80 81       	ld	r24, Z
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <LCD_displayCharacter+0x184>
    25d2:	fe 01       	movw	r30, r28
    25d4:	eb 5a       	subi	r30, 0xAB	; 171
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
	_delay_ms(1);
	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    25dc:	82 e0       	ldi	r24, 0x02	; 2
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	41 e0       	ldi	r20, 0x01	; 1
    25e2:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    25e6:	fe 01       	movw	r30, r28
    25e8:	ef 5a       	subi	r30, 0xAF	; 175
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	a0 e8       	ldi	r26, 0x80	; 128
    25f2:	bf e3       	ldi	r27, 0x3F	; 63
    25f4:	80 83       	st	Z, r24
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	a2 83       	std	Z+2, r26	; 0x02
    25fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fc:	8e 01       	movw	r16, r28
    25fe:	03 5b       	subi	r16, 0xB3	; 179
    2600:	1f 4f       	sbci	r17, 0xFF	; 255
    2602:	fe 01       	movw	r30, r28
    2604:	ef 5a       	subi	r30, 0xAF	; 175
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a ef       	ldi	r20, 0xFA	; 250
    2616:	54 e4       	ldi	r21, 0x44	; 68
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	f8 01       	movw	r30, r16
    2622:	80 83       	st	Z, r24
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	a2 83       	std	Z+2, r26	; 0x02
    2628:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    262a:	fe 01       	movw	r30, r28
    262c:	e3 5b       	subi	r30, 0xB3	; 179
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	44 f4       	brge	.+16     	; 0x2658 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2648:	fe 01       	movw	r30, r28
    264a:	e5 5b       	subi	r30, 0xB5	; 181
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
    2656:	64 c0       	rjmp	.+200    	; 0x2720 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2658:	fe 01       	movw	r30, r28
    265a:	e3 5b       	subi	r30, 0xB3	; 179
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	60 81       	ld	r22, Z
    2660:	71 81       	ldd	r23, Z+1	; 0x01
    2662:	82 81       	ldd	r24, Z+2	; 0x02
    2664:	93 81       	ldd	r25, Z+3	; 0x03
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	3f ef       	ldi	r19, 0xFF	; 255
    266a:	4f e7       	ldi	r20, 0x7F	; 127
    266c:	57 e4       	ldi	r21, 0x47	; 71
    266e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2672:	18 16       	cp	r1, r24
    2674:	0c f0       	brlt	.+2      	; 0x2678 <LCD_displayCharacter+0x22e>
    2676:	43 c0       	rjmp	.+134    	; 0x26fe <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2678:	fe 01       	movw	r30, r28
    267a:	ef 5a       	subi	r30, 0xAF	; 175
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e2       	ldi	r20, 0x20	; 32
    268c:	51 e4       	ldi	r21, 0x41	; 65
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8e 01       	movw	r16, r28
    2698:	05 5b       	subi	r16, 0xB5	; 181
    269a:	1f 4f       	sbci	r17, 0xFF	; 255
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	f8 01       	movw	r30, r16
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
    26ae:	1f c0       	rjmp	.+62     	; 0x26ee <LCD_displayCharacter+0x2a4>
    26b0:	fe 01       	movw	r30, r28
    26b2:	e7 5b       	subi	r30, 0xB7	; 183
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	88 ec       	ldi	r24, 0xC8	; 200
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
    26be:	fe 01       	movw	r30, r28
    26c0:	e7 5b       	subi	r30, 0xB7	; 183
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <LCD_displayCharacter+0x27e>
    26cc:	fe 01       	movw	r30, r28
    26ce:	e7 5b       	subi	r30, 0xB7	; 183
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d6:	de 01       	movw	r26, r28
    26d8:	a5 5b       	subi	r26, 0xB5	; 181
    26da:	bf 4f       	sbci	r27, 0xFF	; 255
    26dc:	fe 01       	movw	r30, r28
    26de:	e5 5b       	subi	r30, 0xB5	; 181
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 81       	ld	r24, Z
    26e4:	91 81       	ldd	r25, Z+1	; 0x01
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	11 96       	adiw	r26, 0x01	; 1
    26ea:	9c 93       	st	X, r25
    26ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	fe 01       	movw	r30, r28
    26f0:	e5 5b       	subi	r30, 0xB5	; 181
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	d1 f6       	brne	.-76     	; 0x26b0 <LCD_displayCharacter+0x266>
    26fc:	27 c0       	rjmp	.+78     	; 0x274c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fe:	8e 01       	movw	r16, r28
    2700:	05 5b       	subi	r16, 0xB5	; 181
    2702:	1f 4f       	sbci	r17, 0xFF	; 255
    2704:	fe 01       	movw	r30, r28
    2706:	e3 5b       	subi	r30, 0xB3	; 179
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	f8 01       	movw	r30, r16
    271c:	91 83       	std	Z+1, r25	; 0x01
    271e:	80 83       	st	Z, r24
    2720:	de 01       	movw	r26, r28
    2722:	a9 5b       	subi	r26, 0xB9	; 185
    2724:	bf 4f       	sbci	r27, 0xFF	; 255
    2726:	fe 01       	movw	r30, r28
    2728:	e5 5b       	subi	r30, 0xB5	; 181
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 81       	ld	r24, Z
    272e:	91 81       	ldd	r25, Z+1	; 0x01
    2730:	8d 93       	st	X+, r24
    2732:	9c 93       	st	X, r25
    2734:	fe 01       	movw	r30, r28
    2736:	e9 5b       	subi	r30, 0xB9	; 185
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	91 81       	ldd	r25, Z+1	; 0x01
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <LCD_displayCharacter+0x2f4>
    2742:	fe 01       	movw	r30, r28
    2744:	e9 5b       	subi	r30, 0xB9	; 185
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	80 83       	st	Z, r24

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
	_delay_ms(1);
#elif (LCD_NUM_OF_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(character, 4));
    274c:	fe 01       	movw	r30, r28
    274e:	ed 59       	subi	r30, 0x9D	; 157
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 81       	ld	r24, Z
    2754:	88 2f       	mov	r24, r24
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	80 71       	andi	r24, 0x10	; 16
    275a:	90 70       	andi	r25, 0x00	; 0
    275c:	95 95       	asr	r25
    275e:	87 95       	ror	r24
    2760:	95 95       	asr	r25
    2762:	87 95       	ror	r24
    2764:	95 95       	asr	r25
    2766:	87 95       	ror	r24
    2768:	95 95       	asr	r25
    276a:	87 95       	ror	r24
    276c:	98 2f       	mov	r25, r24
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	64 e0       	ldi	r22, 0x04	; 4
    2772:	49 2f       	mov	r20, r25
    2774:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(character, 5));
    2778:	fe 01       	movw	r30, r28
    277a:	ed 59       	subi	r30, 0x9D	; 157
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	80 72       	andi	r24, 0x20	; 32
    2786:	90 70       	andi	r25, 0x00	; 0
    2788:	95 95       	asr	r25
    278a:	87 95       	ror	r24
    278c:	95 95       	asr	r25
    278e:	87 95       	ror	r24
    2790:	95 95       	asr	r25
    2792:	87 95       	ror	r24
    2794:	95 95       	asr	r25
    2796:	87 95       	ror	r24
    2798:	95 95       	asr	r25
    279a:	87 95       	ror	r24
    279c:	98 2f       	mov	r25, r24
    279e:	82 e0       	ldi	r24, 0x02	; 2
    27a0:	65 e0       	ldi	r22, 0x05	; 5
    27a2:	49 2f       	mov	r20, r25
    27a4:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(character, 6));
    27a8:	fe 01       	movw	r30, r28
    27aa:	ed 59       	subi	r30, 0x9D	; 157
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 81       	ld	r24, Z
    27b0:	88 2f       	mov	r24, r24
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	80 74       	andi	r24, 0x40	; 64
    27b6:	90 70       	andi	r25, 0x00	; 0
    27b8:	08 2e       	mov	r0, r24
    27ba:	89 2f       	mov	r24, r25
    27bc:	00 0c       	add	r0, r0
    27be:	88 1f       	adc	r24, r24
    27c0:	99 0b       	sbc	r25, r25
    27c2:	00 0c       	add	r0, r0
    27c4:	88 1f       	adc	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	98 2f       	mov	r25, r24
    27ca:	82 e0       	ldi	r24, 0x02	; 2
    27cc:	66 e0       	ldi	r22, 0x06	; 6
    27ce:	49 2f       	mov	r20, r25
    27d0:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(character, 7));
    27d4:	fe 01       	movw	r30, r28
    27d6:	ed 59       	subi	r30, 0x9D	; 157
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	98 2f       	mov	r25, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	99 27       	eor	r25, r25
    27e2:	99 1f       	adc	r25, r25
    27e4:	82 e0       	ldi	r24, 0x02	; 2
    27e6:	67 e0       	ldi	r22, 0x07	; 7
    27e8:	49 2f       	mov	r20, r25
    27ea:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    27ee:	fe 01       	movw	r30, r28
    27f0:	ed 5b       	subi	r30, 0xBD	; 189
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	a0 e8       	ldi	r26, 0x80	; 128
    27fa:	bf e3       	ldi	r27, 0x3F	; 63
    27fc:	80 83       	st	Z, r24
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	a2 83       	std	Z+2, r26	; 0x02
    2802:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2804:	8e 01       	movw	r16, r28
    2806:	01 5c       	subi	r16, 0xC1	; 193
    2808:	1f 4f       	sbci	r17, 0xFF	; 255
    280a:	fe 01       	movw	r30, r28
    280c:	ed 5b       	subi	r30, 0xBD	; 189
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	4a ef       	ldi	r20, 0xFA	; 250
    281e:	54 e4       	ldi	r21, 0x44	; 68
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	f8 01       	movw	r30, r16
    282a:	80 83       	st	Z, r24
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	a2 83       	std	Z+2, r26	; 0x02
    2830:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2832:	fe 01       	movw	r30, r28
    2834:	ff 96       	adiw	r30, 0x3f	; 63
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e8       	ldi	r20, 0x80	; 128
    2844:	5f e3       	ldi	r21, 0x3F	; 63
    2846:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284a:	88 23       	and	r24, r24
    284c:	2c f4       	brge	.+10     	; 0x2858 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9e af       	std	Y+62, r25	; 0x3e
    2854:	8d af       	std	Y+61, r24	; 0x3d
    2856:	46 c0       	rjmp	.+140    	; 0x28e4 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2858:	fe 01       	movw	r30, r28
    285a:	ff 96       	adiw	r30, 0x3f	; 63
    285c:	60 81       	ld	r22, Z
    285e:	71 81       	ldd	r23, Z+1	; 0x01
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	3f ef       	ldi	r19, 0xFF	; 255
    2868:	4f e7       	ldi	r20, 0x7F	; 127
    286a:	57 e4       	ldi	r21, 0x47	; 71
    286c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2870:	18 16       	cp	r1, r24
    2872:	64 f5       	brge	.+88     	; 0x28cc <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2874:	fe 01       	movw	r30, r28
    2876:	ed 5b       	subi	r30, 0xBD	; 189
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	60 81       	ld	r22, Z
    287c:	71 81       	ldd	r23, Z+1	; 0x01
    287e:	82 81       	ldd	r24, Z+2	; 0x02
    2880:	93 81       	ldd	r25, Z+3	; 0x03
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e af       	std	Y+62, r25	; 0x3e
    28a0:	8d af       	std	Y+61, r24	; 0x3d
    28a2:	0f c0       	rjmp	.+30     	; 0x28c2 <LCD_displayCharacter+0x478>
    28a4:	88 ec       	ldi	r24, 0xC8	; 200
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	9c af       	std	Y+60, r25	; 0x3c
    28aa:	8b af       	std	Y+59, r24	; 0x3b
    28ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <LCD_displayCharacter+0x466>
    28b4:	9c af       	std	Y+60, r25	; 0x3c
    28b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	9e af       	std	Y+62, r25	; 0x3e
    28c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	69 f7       	brne	.-38     	; 0x28a4 <LCD_displayCharacter+0x45a>
    28ca:	16 c0       	rjmp	.+44     	; 0x28f8 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28cc:	fe 01       	movw	r30, r28
    28ce:	ff 96       	adiw	r30, 0x3f	; 63
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	82 81       	ldd	r24, Z+2	; 0x02
    28d6:	93 81       	ldd	r25, Z+3	; 0x03
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9e af       	std	Y+62, r25	; 0x3e
    28e2:	8d af       	std	Y+61, r24	; 0x3d
    28e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e8:	9a af       	std	Y+58, r25	; 0x3a
    28ea:	89 af       	std	Y+57, r24	; 0x39
    28ec:	89 ad       	ldd	r24, Y+57	; 0x39
    28ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <LCD_displayCharacter+0x4a6>
    28f4:	9a af       	std	Y+58, r25	; 0x3a
    28f6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	/* set enable bit to low*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a0 e8       	ldi	r26, 0x80	; 128
    2908:	bf e3       	ldi	r27, 0x3F	; 63
    290a:	8d ab       	std	Y+53, r24	; 0x35
    290c:	9e ab       	std	Y+54, r25	; 0x36
    290e:	af ab       	std	Y+55, r26	; 0x37
    2910:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	6d a9       	ldd	r22, Y+53	; 0x35
    2914:	7e a9       	ldd	r23, Y+54	; 0x36
    2916:	8f a9       	ldd	r24, Y+55	; 0x37
    2918:	98 ad       	ldd	r25, Y+56	; 0x38
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4a ef       	ldi	r20, 0xFA	; 250
    2920:	54 e4       	ldi	r21, 0x44	; 68
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	89 ab       	std	Y+49, r24	; 0x31
    292c:	9a ab       	std	Y+50, r25	; 0x32
    292e:	ab ab       	std	Y+51, r26	; 0x33
    2930:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2932:	69 a9       	ldd	r22, Y+49	; 0x31
    2934:	7a a9       	ldd	r23, Y+50	; 0x32
    2936:	8b a9       	ldd	r24, Y+51	; 0x33
    2938:	9c a9       	ldd	r25, Y+52	; 0x34
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	98 ab       	std	Y+48, r25	; 0x30
    2950:	8f a7       	std	Y+47, r24	; 0x2f
    2952:	3f c0       	rjmp	.+126    	; 0x29d2 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2954:	69 a9       	ldd	r22, Y+49	; 0x31
    2956:	7a a9       	ldd	r23, Y+50	; 0x32
    2958:	8b a9       	ldd	r24, Y+51	; 0x33
    295a:	9c a9       	ldd	r25, Y+52	; 0x34
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	57 e4       	ldi	r21, 0x47	; 71
    2964:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	4c f5       	brge	.+82     	; 0x29be <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	6d a9       	ldd	r22, Y+53	; 0x35
    296e:	7e a9       	ldd	r23, Y+54	; 0x36
    2970:	8f a9       	ldd	r24, Y+55	; 0x37
    2972:	98 ad       	ldd	r25, Y+56	; 0x38
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e2       	ldi	r20, 0x20	; 32
    297a:	51 e4       	ldi	r21, 0x41	; 65
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	98 ab       	std	Y+48, r25	; 0x30
    2992:	8f a7       	std	Y+47, r24	; 0x2f
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <LCD_displayCharacter+0x56a>
    2996:	88 ec       	ldi	r24, 0xC8	; 200
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9e a7       	std	Y+46, r25	; 0x2e
    299c:	8d a7       	std	Y+45, r24	; 0x2d
    299e:	8d a5       	ldd	r24, Y+45	; 0x2d
    29a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <LCD_displayCharacter+0x558>
    29a6:	9e a7       	std	Y+46, r25	; 0x2e
    29a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ac:	98 a9       	ldd	r25, Y+48	; 0x30
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	98 ab       	std	Y+48, r25	; 0x30
    29b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b6:	98 a9       	ldd	r25, Y+48	; 0x30
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	69 f7       	brne	.-38     	; 0x2996 <LCD_displayCharacter+0x54c>
    29bc:	14 c0       	rjmp	.+40     	; 0x29e6 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29be:	69 a9       	ldd	r22, Y+49	; 0x31
    29c0:	7a a9       	ldd	r23, Y+50	; 0x32
    29c2:	8b a9       	ldd	r24, Y+51	; 0x33
    29c4:	9c a9       	ldd	r25, Y+52	; 0x34
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	98 ab       	std	Y+48, r25	; 0x30
    29d0:	8f a7       	std	Y+47, r24	; 0x2f
    29d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d4:	98 a9       	ldd	r25, Y+48	; 0x30
    29d6:	9c a7       	std	Y+44, r25	; 0x2c
    29d8:	8b a7       	std	Y+43, r24	; 0x2b
    29da:	8b a5       	ldd	r24, Y+43	; 0x2b
    29dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <LCD_displayCharacter+0x594>
    29e2:	9c a7       	std	Y+44, r25	; 0x2c
    29e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* set enable bit to high */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	61 e0       	ldi	r22, 0x01	; 1
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	a0 e8       	ldi	r26, 0x80	; 128
    29f6:	bf e3       	ldi	r27, 0x3F	; 63
    29f8:	8f a3       	std	Y+39, r24	; 0x27
    29fa:	98 a7       	std	Y+40, r25	; 0x28
    29fc:	a9 a7       	std	Y+41, r26	; 0x29
    29fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a00:	6f a1       	ldd	r22, Y+39	; 0x27
    2a02:	78 a5       	ldd	r23, Y+40	; 0x28
    2a04:	89 a5       	ldd	r24, Y+41	; 0x29
    2a06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a ef       	ldi	r20, 0xFA	; 250
    2a0e:	54 e4       	ldi	r21, 0x44	; 68
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	8b a3       	std	Y+35, r24	; 0x23
    2a1a:	9c a3       	std	Y+36, r25	; 0x24
    2a1c:	ad a3       	std	Y+37, r26	; 0x25
    2a1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a20:	6b a1       	ldd	r22, Y+35	; 0x23
    2a22:	7c a1       	ldd	r23, Y+36	; 0x24
    2a24:	8d a1       	ldd	r24, Y+37	; 0x25
    2a26:	9e a1       	ldd	r25, Y+38	; 0x26
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9a a3       	std	Y+34, r25	; 0x22
    2a3e:	89 a3       	std	Y+33, r24	; 0x21
    2a40:	3f c0       	rjmp	.+126    	; 0x2ac0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2a42:	6b a1       	ldd	r22, Y+35	; 0x23
    2a44:	7c a1       	ldd	r23, Y+36	; 0x24
    2a46:	8d a1       	ldd	r24, Y+37	; 0x25
    2a48:	9e a1       	ldd	r25, Y+38	; 0x26
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	3f ef       	ldi	r19, 0xFF	; 255
    2a4e:	4f e7       	ldi	r20, 0x7F	; 127
    2a50:	57 e4       	ldi	r21, 0x47	; 71
    2a52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a56:	18 16       	cp	r1, r24
    2a58:	4c f5       	brge	.+82     	; 0x2aac <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e2       	ldi	r20, 0x20	; 32
    2a68:	51 e4       	ldi	r21, 0x41	; 65
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9a a3       	std	Y+34, r25	; 0x22
    2a80:	89 a3       	std	Y+33, r24	; 0x21
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <LCD_displayCharacter+0x658>
    2a84:	88 ec       	ldi	r24, 0xC8	; 200
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	98 a3       	std	Y+32, r25	; 0x20
    2a8a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a8e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <LCD_displayCharacter+0x646>
    2a94:	98 a3       	std	Y+32, r25	; 0x20
    2a96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9a a3       	std	Y+34, r25	; 0x22
    2aa0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	69 f7       	brne	.-38     	; 0x2a84 <LCD_displayCharacter+0x63a>
    2aaa:	14 c0       	rjmp	.+40     	; 0x2ad4 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aac:	6b a1       	ldd	r22, Y+35	; 0x23
    2aae:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9a a3       	std	Y+34, r25	; 0x22
    2abe:	89 a3       	std	Y+33, r24	; 0x21
    2ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ac8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_displayCharacter+0x682>
    2ad0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID, GET_BIT(character, 0));
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ed 59       	subi	r30, 0x9D	; 157
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	98 2f       	mov	r25, r24
    2ade:	91 70       	andi	r25, 0x01	; 1
    2ae0:	82 e0       	ldi	r24, 0x02	; 2
    2ae2:	64 e0       	ldi	r22, 0x04	; 4
    2ae4:	49 2f       	mov	r20, r25
    2ae6:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+1, GET_BIT(character, 1));
    2aea:	fe 01       	movw	r30, r28
    2aec:	ed 59       	subi	r30, 0x9D	; 157
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	82 70       	andi	r24, 0x02	; 2
    2af8:	90 70       	andi	r25, 0x00	; 0
    2afa:	95 95       	asr	r25
    2afc:	87 95       	ror	r24
    2afe:	98 2f       	mov	r25, r24
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	65 e0       	ldi	r22, 0x05	; 5
    2b04:	49 2f       	mov	r20, r25
    2b06:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+2, GET_BIT(character, 2));
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	ed 59       	subi	r30, 0x9D	; 157
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	80 81       	ld	r24, Z
    2b12:	88 2f       	mov	r24, r24
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	84 70       	andi	r24, 0x04	; 4
    2b18:	90 70       	andi	r25, 0x00	; 0
    2b1a:	95 95       	asr	r25
    2b1c:	87 95       	ror	r24
    2b1e:	95 95       	asr	r25
    2b20:	87 95       	ror	r24
    2b22:	98 2f       	mov	r25, r24
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	66 e0       	ldi	r22, 0x06	; 6
    2b28:	49 2f       	mov	r20, r25
    2b2a:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN_ID+3, GET_BIT(character, 3));
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ed 59       	subi	r30, 0x9D	; 157
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	80 81       	ld	r24, Z
    2b36:	88 2f       	mov	r24, r24
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	88 70       	andi	r24, 0x08	; 8
    2b3c:	90 70       	andi	r25, 0x00	; 0
    2b3e:	95 95       	asr	r25
    2b40:	87 95       	ror	r24
    2b42:	95 95       	asr	r25
    2b44:	87 95       	ror	r24
    2b46:	95 95       	asr	r25
    2b48:	87 95       	ror	r24
    2b4a:	98 2f       	mov	r25, r24
    2b4c:	82 e0       	ldi	r24, 0x02	; 2
    2b4e:	67 e0       	ldi	r22, 0x07	; 7
    2b50:	49 2f       	mov	r20, r25
    2b52:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	a0 e8       	ldi	r26, 0x80	; 128
    2b5c:	bf e3       	ldi	r27, 0x3F	; 63
    2b5e:	89 8f       	std	Y+25, r24	; 0x19
    2b60:	9a 8f       	std	Y+26, r25	; 0x1a
    2b62:	ab 8f       	std	Y+27, r26	; 0x1b
    2b64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b66:	69 8d       	ldd	r22, Y+25	; 0x19
    2b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	4a ef       	ldi	r20, 0xFA	; 250
    2b74:	54 e4       	ldi	r21, 0x44	; 68
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	8d 8b       	std	Y+21, r24	; 0x15
    2b80:	9e 8b       	std	Y+22, r25	; 0x16
    2b82:	af 8b       	std	Y+23, r26	; 0x17
    2b84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b86:	6d 89       	ldd	r22, Y+21	; 0x15
    2b88:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e8       	ldi	r20, 0x80	; 128
    2b94:	5f e3       	ldi	r21, 0x3F	; 63
    2b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b9a:	88 23       	and	r24, r24
    2b9c:	2c f4       	brge	.+10     	; 0x2ba8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	9c 8b       	std	Y+20, r25	; 0x14
    2ba4:	8b 8b       	std	Y+19, r24	; 0x13
    2ba6:	3f c0       	rjmp	.+126    	; 0x2c26 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    2baa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bac:	8f 89       	ldd	r24, Y+23	; 0x17
    2bae:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	3f ef       	ldi	r19, 0xFF	; 255
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	57 e4       	ldi	r21, 0x47	; 71
    2bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	4c f5       	brge	.+82     	; 0x2c12 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc0:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e2       	ldi	r20, 0x20	; 32
    2bce:	51 e4       	ldi	r21, 0x41	; 65
    2bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9c 8b       	std	Y+20, r25	; 0x14
    2be6:	8b 8b       	std	Y+19, r24	; 0x13
    2be8:	0f c0       	rjmp	.+30     	; 0x2c08 <LCD_displayCharacter+0x7be>
    2bea:	88 ec       	ldi	r24, 0xC8	; 200
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	9a 8b       	std	Y+18, r25	; 0x12
    2bf0:	89 8b       	std	Y+17, r24	; 0x11
    2bf2:	89 89       	ldd	r24, Y+17	; 0x11
    2bf4:	9a 89       	ldd	r25, Y+18	; 0x12
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <LCD_displayCharacter+0x7ac>
    2bfa:	9a 8b       	std	Y+18, r25	; 0x12
    2bfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2c00:	9c 89       	ldd	r25, Y+20	; 0x14
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	9c 8b       	std	Y+20, r25	; 0x14
    2c06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c08:	8b 89       	ldd	r24, Y+19	; 0x13
    2c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	69 f7       	brne	.-38     	; 0x2bea <LCD_displayCharacter+0x7a0>
    2c10:	14 c0       	rjmp	.+40     	; 0x2c3a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c12:	6d 89       	ldd	r22, Y+21	; 0x15
    2c14:	7e 89       	ldd	r23, Y+22	; 0x16
    2c16:	8f 89       	ldd	r24, Y+23	; 0x17
    2c18:	98 8d       	ldd	r25, Y+24	; 0x18
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9c 8b       	std	Y+20, r25	; 0x14
    2c24:	8b 8b       	std	Y+19, r24	; 0x13
    2c26:	8b 89       	ldd	r24, Y+19	; 0x13
    2c28:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2a:	98 8b       	std	Y+16, r25	; 0x10
    2c2c:	8f 87       	std	Y+15, r24	; 0x0f
    2c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c30:	98 89       	ldd	r25, Y+16	; 0x10
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <LCD_displayCharacter+0x7e8>
    2c36:	98 8b       	std	Y+16, r25	; 0x10
    2c38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* set enable bit to low */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2c3a:	82 e0       	ldi	r24, 0x02	; 2
    2c3c:	61 e0       	ldi	r22, 0x01	; 1
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_writePin>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a0 e8       	ldi	r26, 0x80	; 128
    2c4a:	bf e3       	ldi	r27, 0x3F	; 63
    2c4c:	8b 87       	std	Y+11, r24	; 0x0b
    2c4e:	9c 87       	std	Y+12, r25	; 0x0c
    2c50:	ad 87       	std	Y+13, r26	; 0x0d
    2c52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	4a ef       	ldi	r20, 0xFA	; 250
    2c62:	54 e4       	ldi	r21, 0x44	; 68
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	8f 83       	std	Y+7, r24	; 0x07
    2c6e:	98 87       	std	Y+8, r25	; 0x08
    2c70:	a9 87       	std	Y+9, r26	; 0x09
    2c72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c74:	6f 81       	ldd	r22, Y+7	; 0x07
    2c76:	78 85       	ldd	r23, Y+8	; 0x08
    2c78:	89 85       	ldd	r24, Y+9	; 0x09
    2c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c88:	88 23       	and	r24, r24
    2c8a:	2c f4       	brge	.+10     	; 0x2c96 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	8d 83       	std	Y+5, r24	; 0x05
    2c94:	3f c0       	rjmp	.+126    	; 0x2d14 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	3f ef       	ldi	r19, 0xFF	; 255
    2ca2:	4f e7       	ldi	r20, 0x7F	; 127
    2ca4:	57 e4       	ldi	r21, 0x47	; 71
    2ca6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2caa:	18 16       	cp	r1, r24
    2cac:	4c f5       	brge	.+82     	; 0x2d00 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e2       	ldi	r20, 0x20	; 32
    2cbc:	51 e4       	ldi	r21, 0x41	; 65
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <LCD_displayCharacter+0x8ac>
    2cd8:	88 ec       	ldi	r24, 0xC8	; 200
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	9c 83       	std	Y+4, r25	; 0x04
    2cde:	8b 83       	std	Y+3, r24	; 0x03
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <LCD_displayCharacter+0x89a>
    2ce8:	9c 83       	std	Y+4, r25	; 0x04
    2cea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cec:	8d 81       	ldd	r24, Y+5	; 0x05
    2cee:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	9e 83       	std	Y+6, r25	; 0x06
    2cf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	69 f7       	brne	.-38     	; 0x2cd8 <LCD_displayCharacter+0x88e>
    2cfe:	14 c0       	rjmp	.+40     	; 0x2d28 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d00:	6f 81       	ldd	r22, Y+7	; 0x07
    2d02:	78 85       	ldd	r23, Y+8	; 0x08
    2d04:	89 85       	ldd	r24, Y+9	; 0x09
    2d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9e 83       	std	Y+6, r25	; 0x06
    2d12:	8d 83       	std	Y+5, r24	; 0x05
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	9a 83       	std	Y+2, r25	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <LCD_displayCharacter+0x8d6>
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif
}
    2d28:	cd 59       	subi	r28, 0x9D	; 157
    2d2a:	df 4f       	sbci	r29, 0xFF	; 255
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	08 95       	ret

00002d40 <LCD_displayString>:
/*
 * Description :
 * display a string on the LCD;
 */
void LCD_displayString(const uint8* string)
{
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <LCD_displayString+0x6>
    2d46:	cd b7       	in	r28, 0x3d	; 61
    2d48:	de b7       	in	r29, 0x3e	; 62
    2d4a:	9a 83       	std	Y+2, r25	; 0x02
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	0a c0       	rjmp	.+20     	; 0x2d64 <LCD_displayString+0x24>
	for(; *string!='\0'; string++)
	{
		LCD_displayCharacter(*string);
    2d50:	e9 81       	ldd	r30, Y+1	; 0x01
    2d52:	fa 81       	ldd	r31, Y+2	; 0x02
    2d54:	80 81       	ld	r24, Z
    2d56:	0e 94 25 12 	call	0x244a	; 0x244a <LCD_displayCharacter>
 * Description :
 * display a string on the LCD;
 */
void LCD_displayString(const uint8* string)
{
	for(; *string!='\0'; string++)
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	9a 83       	std	Y+2, r25	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01
    2d64:	e9 81       	ldd	r30, Y+1	; 0x01
    2d66:	fa 81       	ldd	r31, Y+2	; 0x02
    2d68:	80 81       	ld	r24, Z
    2d6a:	88 23       	and	r24, r24
    2d6c:	89 f7       	brne	.-30     	; 0x2d50 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*string);
	}
}
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	08 95       	ret

00002d78 <LCD_displayStringRowColumn>:
/*
 * Description :
 * display a string in a specific location
 */
void LCD_displayStringRowColumn(uint8 row, uint8 column,const uint8* string)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <LCD_displayStringRowColumn+0x6>
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <LCD_displayStringRowColumn+0x8>
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	89 83       	std	Y+1, r24	; 0x01
    2d86:	6a 83       	std	Y+2, r22	; 0x02
    2d88:	5c 83       	std	Y+4, r21	; 0x04
    2d8a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, column);
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	6a 81       	ldd	r22, Y+2	; 0x02
    2d90:	0e 94 02 17 	call	0x2e04	; 0x2e04 <LCD_moveCursor>
	LCD_displayString(string);
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	9c 81       	ldd	r25, Y+4	; 0x04
    2d98:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	cf 91       	pop	r28
    2da6:	df 91       	pop	r29
    2da8:	08 95       	ret

00002daa <LCD_integerToString>:
/*
 * Description :
 * convert integers to characters then display it
 */
void LCD_integerToString(int num)
{
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	62 97       	sbiw	r28, 0x12	; 18
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	9a 8b       	std	Y+18, r25	; 0x12
    2dc0:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(num, buff, 10);
    2dc2:	89 89       	ldd	r24, Y+17	; 0x11
    2dc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2dc6:	9e 01       	movw	r18, r28
    2dc8:	2f 5f       	subi	r18, 0xFF	; 255
    2dca:	3f 4f       	sbci	r19, 0xFF	; 255
    2dcc:	b9 01       	movw	r22, r18
    2dce:	4a e0       	ldi	r20, 0x0A	; 10
    2dd0:	50 e0       	ldi	r21, 0x00	; 0
    2dd2:	0e 94 2f 19 	call	0x325e	; 0x325e <itoa>
	LCD_displayString((const uint8*)buff);
    2dd6:	ce 01       	movw	r24, r28
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_displayString>
}
    2dde:	62 96       	adiw	r28, 0x12	; 18
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <LCD_clearScreen>:
/*
 * Description :
 * clear the screen of the LCD
 */
void LCD_clearScreen(void)
{
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
}
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <LCD_moveCursor>:
/*
 * Description :
 * move the LCD cursor to the desired location
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <LCD_moveCursor+0x6>
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <LCD_moveCursor+0x8>
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	89 83       	std	Y+1, r24	; 0x01
    2e12:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	28 2f       	mov	r18, r24
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	3c 83       	std	Y+4, r19	; 0x04
    2e1c:	2b 83       	std	Y+3, r18	; 0x03
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	9c 81       	ldd	r25, Y+4	; 0x04
    2e22:	81 30       	cpi	r24, 0x01	; 1
    2e24:	91 05       	cpc	r25, r1
    2e26:	d1 f0       	breq	.+52     	; 0x2e5c <LCD_moveCursor+0x58>
    2e28:	2b 81       	ldd	r18, Y+3	; 0x03
    2e2a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e2c:	22 30       	cpi	r18, 0x02	; 2
    2e2e:	31 05       	cpc	r19, r1
    2e30:	2c f4       	brge	.+10     	; 0x2e3c <LCD_moveCursor+0x38>
    2e32:	8b 81       	ldd	r24, Y+3	; 0x03
    2e34:	9c 81       	ldd	r25, Y+4	; 0x04
    2e36:	00 97       	sbiw	r24, 0x00	; 0
    2e38:	61 f0       	breq	.+24     	; 0x2e52 <LCD_moveCursor+0x4e>
    2e3a:	21 c0       	rjmp	.+66     	; 0x2e7e <LCD_moveCursor+0x7a>
    2e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e40:	22 30       	cpi	r18, 0x02	; 2
    2e42:	31 05       	cpc	r19, r1
    2e44:	89 f0       	breq	.+34     	; 0x2e68 <LCD_moveCursor+0x64>
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	83 30       	cpi	r24, 0x03	; 3
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	91 f0       	breq	.+36     	; 0x2e74 <LCD_moveCursor+0x70>
    2e50:	16 c0       	rjmp	.+44     	; 0x2e7e <LCD_moveCursor+0x7a>
	{
	case 0:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | column);
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	80 68       	ori	r24, 0x80	; 128
    2e56:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
    2e5a:	11 c0       	rjmp	.+34     	; 0x2e7e <LCD_moveCursor+0x7a>
		break;
	case 1:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x40));
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	80 5c       	subi	r24, 0xC0	; 192
    2e60:	80 68       	ori	r24, 0x80	; 128
    2e62:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
    2e66:	0b c0       	rjmp	.+22     	; 0x2e7e <LCD_moveCursor+0x7a>
		break;
	case 2:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x10));
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	80 5f       	subi	r24, 0xF0	; 240
    2e6c:	80 68       	ori	r24, 0x80	; 128
    2e6e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
    2e72:	05 c0       	rjmp	.+10     	; 0x2e7e <LCD_moveCursor+0x7a>
		break;
	case 3:
		LCD_sendCommand(LCD_SET_CURSOR_LOCATION | (column + 0x50));
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	80 5b       	subi	r24, 0xB0	; 176
    2e78:	80 68       	ori	r24, 0x80	; 128
    2e7a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendCommand>
		break;
	}
}
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	cf 91       	pop	r28
    2e88:	df 91       	pop	r29
    2e8a:	08 95       	ret

00002e8c <__vector_7>:
 * 						  Interrupt Service Routines
 *******************************************************************************/
static void  (*g_callBack)(void);
/* ISR for compare match interrupt */
ISR(TIMER1_COMPA_vect)
{
    2e8c:	1f 92       	push	r1
    2e8e:	0f 92       	push	r0
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	0f 92       	push	r0
    2e94:	11 24       	eor	r1, r1
    2e96:	2f 93       	push	r18
    2e98:	3f 93       	push	r19
    2e9a:	4f 93       	push	r20
    2e9c:	5f 93       	push	r21
    2e9e:	6f 93       	push	r22
    2ea0:	7f 93       	push	r23
    2ea2:	8f 93       	push	r24
    2ea4:	9f 93       	push	r25
    2ea6:	af 93       	push	r26
    2ea8:	bf 93       	push	r27
    2eaa:	ef 93       	push	r30
    2eac:	ff 93       	push	r31
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
	(*g_callBack)();
    2eb6:	e0 91 f6 00 	lds	r30, 0x00F6
    2eba:	f0 91 f7 00 	lds	r31, 0x00F7
    2ebe:	09 95       	icall
}
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	ff 91       	pop	r31
    2ec6:	ef 91       	pop	r30
    2ec8:	bf 91       	pop	r27
    2eca:	af 91       	pop	r26
    2ecc:	9f 91       	pop	r25
    2ece:	8f 91       	pop	r24
    2ed0:	7f 91       	pop	r23
    2ed2:	6f 91       	pop	r22
    2ed4:	5f 91       	pop	r21
    2ed6:	4f 91       	pop	r20
    2ed8:	3f 91       	pop	r19
    2eda:	2f 91       	pop	r18
    2edc:	0f 90       	pop	r0
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	0f 90       	pop	r0
    2ee2:	1f 90       	pop	r1
    2ee4:	18 95       	reti

00002ee6 <__vector_9>:
/* ISR for overflow interrupt */
ISR(TIMER1_OVF_vect)
{
    2ee6:	1f 92       	push	r1
    2ee8:	0f 92       	push	r0
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	0f 92       	push	r0
    2eee:	11 24       	eor	r1, r1
    2ef0:	2f 93       	push	r18
    2ef2:	3f 93       	push	r19
    2ef4:	4f 93       	push	r20
    2ef6:	5f 93       	push	r21
    2ef8:	6f 93       	push	r22
    2efa:	7f 93       	push	r23
    2efc:	8f 93       	push	r24
    2efe:	9f 93       	push	r25
    2f00:	af 93       	push	r26
    2f02:	bf 93       	push	r27
    2f04:	ef 93       	push	r30
    2f06:	ff 93       	push	r31
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
	(*g_callBack)();
    2f10:	e0 91 f6 00 	lds	r30, 0x00F6
    2f14:	f0 91 f7 00 	lds	r31, 0x00F7
    2f18:	09 95       	icall
}
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	ff 91       	pop	r31
    2f20:	ef 91       	pop	r30
    2f22:	bf 91       	pop	r27
    2f24:	af 91       	pop	r26
    2f26:	9f 91       	pop	r25
    2f28:	8f 91       	pop	r24
    2f2a:	7f 91       	pop	r23
    2f2c:	6f 91       	pop	r22
    2f2e:	5f 91       	pop	r21
    2f30:	4f 91       	pop	r20
    2f32:	3f 91       	pop	r19
    2f34:	2f 91       	pop	r18
    2f36:	0f 90       	pop	r0
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	0f 90       	pop	r0
    2f3c:	1f 90       	pop	r1
    2f3e:	18 95       	reti

00002f40 <Timer1_init>:
/*
 * Description :
 * a function to initiate timer1 with desired configuration(prescaler, mode, initial register values)
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <Timer1_init+0x6>
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62
    2f4a:	9a 83       	std	Y+2, r25	; 0x02
    2f4c:	89 83       	std	Y+1, r24	; 0x01
	/* initializing timer 1 counter register */
	TCNT1 = Config_Ptr->initial_value;
    2f4e:	ac e4       	ldi	r26, 0x4C	; 76
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e9 81       	ldd	r30, Y+1	; 0x01
    2f54:	fa 81       	ldd	r31, Y+2	; 0x02
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	11 96       	adiw	r26, 0x01	; 1
    2f5c:	9c 93       	st	X, r25
    2f5e:	8e 93       	st	-X, r24
	/* initializing compare register if compare mode specified */
	if(Config_Ptr->mode == COMPARE)
    2f60:	e9 81       	ldd	r30, Y+1	; 0x01
    2f62:	fa 81       	ldd	r31, Y+2	; 0x02
    2f64:	85 81       	ldd	r24, Z+5	; 0x05
    2f66:	81 30       	cpi	r24, 0x01	; 1
    2f68:	89 f4       	brne	.+34     	; 0x2f8c <Timer1_init+0x4c>
	{
		OCR1A = Config_Ptr->compare_value;
    2f6a:	aa e4       	ldi	r26, 0x4A	; 74
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f70:	fa 81       	ldd	r31, Y+2	; 0x02
    2f72:	82 81       	ldd	r24, Z+2	; 0x02
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	11 96       	adiw	r26, 0x01	; 1
    2f78:	9c 93       	st	X, r25
    2f7a:	8e 93       	st	-X, r24
		TIMSK|=(1<<OCIE1A);
    2f7c:	a9 e5       	ldi	r26, 0x59	; 89
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e9 e5       	ldi	r30, 0x59	; 89
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	80 61       	ori	r24, 0x10	; 16
    2f88:	8c 93       	st	X, r24
    2f8a:	07 c0       	rjmp	.+14     	; 0x2f9a <Timer1_init+0x5a>
	}
	else
	{
		TIMSK|=(1<<TOIE1);
    2f8c:	a9 e5       	ldi	r26, 0x59	; 89
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	e9 e5       	ldi	r30, 0x59	; 89
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	84 60       	ori	r24, 0x04	; 4
    2f98:	8c 93       	st	X, r24
	}
	/* set FOC1 to 1 for non_PWM mode */
	TCCR1A|=(1<<FOC1A) | (1<<FOC1B);
    2f9a:	af e4       	ldi	r26, 0x4F	; 79
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	ef e4       	ldi	r30, 0x4F	; 79
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	8c 60       	ori	r24, 0x0C	; 12
    2fa6:	8c 93       	st	X, r24
	/* set prescaler and choose mode of operation */
	/* note : WGM!0 and WGM11 are set to 0 in both normal and compare mode */
	TCCR1B= Config_Ptr->prescaler | (Config_Ptr->mode<<WGM12);
    2fa8:	ae e4       	ldi	r26, 0x4E	; 78
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	e9 81       	ldd	r30, Y+1	; 0x01
    2fae:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb0:	84 81       	ldd	r24, Z+4	; 0x04
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb8:	85 81       	ldd	r24, Z+5	; 0x05
    2fba:	88 2f       	mov	r24, r24
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	88 0f       	add	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	88 0f       	add	r24, r24
    2fc4:	99 1f       	adc	r25, r25
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	82 2b       	or	r24, r18
    2fcc:	8c 93       	st	X, r24
}
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <Timer1_deInit>:
/*
 * Description :
 * a function to deactivate timer1
 */
void Timer1_deInit(void)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    2fe0:	ef e4       	ldi	r30, 0x4F	; 79
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	10 82       	st	Z, r1
	TCCR1B=0;
    2fe6:	ee e4       	ldi	r30, 0x4E	; 78
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	10 82       	st	Z, r1
}
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	08 95       	ret

00002ff2 <Timer1_setCallBack>:
/*
 * Description :
 * a function to set the call back function pointer
 */
void Timer1_setCallBack(void (*a_ptr)(void))
{
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <Timer1_setCallBack+0x6>
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	9a 83       	std	Y+2, r25	; 0x02
    2ffe:	89 83       	std	Y+1, r24	; 0x01
	g_callBack=a_ptr;
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	9a 81       	ldd	r25, Y+2	; 0x02
    3004:	90 93 f7 00 	sts	0x00F7, r25
    3008:	80 93 f6 00 	sts	0x00F6, r24
}
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	cf 91       	pop	r28
    3012:	df 91       	pop	r29
    3014:	08 95       	ret

00003016 <UART_init>:
/*
 * Description :
 * initialize the UART with the required baud rate and frame
 */
void UART_init(const UART_ConfigType* config)
{
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	00 d0       	rcall	.+0      	; 0x301c <UART_init+0x6>
    301c:	00 d0       	rcall	.+0      	; 0x301e <UART_init+0x8>
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	9c 83       	std	Y+4, r25	; 0x04
    3024:	8b 83       	std	Y+3, r24	; 0x03
	uint16 baud_value;
	/* double transmission speed */
	UCSRA=(1<<U2X);
    3026:	eb e2       	ldi	r30, 0x2B	; 43
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	80 83       	st	Z, r24
	/* enable data transmission and receiving and disabling interrupts */
	UCSRB=(1<<TXEN)|(1<<RXEN);
    302e:	ea e2       	ldi	r30, 0x2A	; 42
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	88 e1       	ldi	r24, 0x18	; 24
    3034:	80 83       	st	Z, r24
	/* URSEL must be 1 to write in register
	 * selecting frame characteristics
	 */
	UCSRC=(1<<URSEL)|(config->parity<<4)|(config->stop_bits<<3)|(config->character_size<<1);
    3036:	a0 e4       	ldi	r26, 0x40	; 64
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	eb 81       	ldd	r30, Y+3	; 0x03
    303c:	fc 81       	ldd	r31, Y+4	; 0x04
    303e:	85 81       	ldd	r24, Z+5	; 0x05
    3040:	88 2f       	mov	r24, r24
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	82 95       	swap	r24
    3046:	92 95       	swap	r25
    3048:	90 7f       	andi	r25, 0xF0	; 240
    304a:	98 27       	eor	r25, r24
    304c:	80 7f       	andi	r24, 0xF0	; 240
    304e:	98 27       	eor	r25, r24
    3050:	28 2f       	mov	r18, r24
    3052:	20 68       	ori	r18, 0x80	; 128
    3054:	eb 81       	ldd	r30, Y+3	; 0x03
    3056:	fc 81       	ldd	r31, Y+4	; 0x04
    3058:	86 81       	ldd	r24, Z+6	; 0x06
    305a:	88 2f       	mov	r24, r24
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	28 2b       	or	r18, r24
    306c:	eb 81       	ldd	r30, Y+3	; 0x03
    306e:	fc 81       	ldd	r31, Y+4	; 0x04
    3070:	84 81       	ldd	r24, Z+4	; 0x04
    3072:	88 2f       	mov	r24, r24
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	88 0f       	add	r24, r24
    3078:	99 1f       	adc	r25, r25
    307a:	82 2b       	or	r24, r18
    307c:	8c 93       	st	X, r24
	/* calculating the value to achieve the required baud rate */
	baud_value=(uint16)((F_CPU / (config->baudRate * 8)) - 1);
    307e:	eb 81       	ldd	r30, Y+3	; 0x03
    3080:	fc 81       	ldd	r31, Y+4	; 0x04
    3082:	80 81       	ld	r24, Z
    3084:	91 81       	ldd	r25, Z+1	; 0x01
    3086:	a2 81       	ldd	r26, Z+2	; 0x02
    3088:	b3 81       	ldd	r27, Z+3	; 0x03
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	aa 1f       	adc	r26, r26
    3090:	bb 1f       	adc	r27, r27
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	aa 1f       	adc	r26, r26
    3098:	bb 1f       	adc	r27, r27
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	aa 1f       	adc	r26, r26
    30a0:	bb 1f       	adc	r27, r27
    30a2:	9c 01       	movw	r18, r24
    30a4:	ad 01       	movw	r20, r26
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	92 e1       	ldi	r25, 0x12	; 18
    30aa:	aa e7       	ldi	r26, 0x7A	; 122
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__udivmodsi4>
    30b6:	da 01       	movw	r26, r20
    30b8:	c9 01       	movw	r24, r18
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=baud_value;
    30c0:	e9 e2       	ldi	r30, 0x29	; 41
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	80 83       	st	Z, r24
	UBRRH=(baud_value>>8);
    30c8:	e0 e4       	ldi	r30, 0x40	; 64
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	9a 81       	ldd	r25, Y+2	; 0x02
    30d0:	89 2f       	mov	r24, r25
    30d2:	99 27       	eor	r25, r25
    30d4:	80 83       	st	Z, r24
}
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	0f 90       	pop	r0
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	08 95       	ret

000030e4 <UART_sendByte>:
/*
 * Description :
 * Function to send a byte
 */
void UART_sendByte(uint8 data)
{
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	0f 92       	push	r0
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    30ee:	89 83       	std	Y+1, r24	; 0x01
	/* wait until transmission register is empty */
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    30f0:	eb e2       	ldi	r30, 0x2B	; 43
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	88 2f       	mov	r24, r24
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	80 72       	andi	r24, 0x20	; 32
    30fc:	90 70       	andi	r25, 0x00	; 0
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	b9 f3       	breq	.-18     	; 0x30f0 <UART_sendByte+0xc>
	/* send the data */
	UDR=data;
    3102:	ec e2       	ldi	r30, 0x2C	; 44
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	89 81       	ldd	r24, Y+1	; 0x01
    3108:	80 83       	st	Z, r24
}
    310a:	0f 90       	pop	r0
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <UART_receiveByte>:
/*
 * Description :
 * Function to read a received byte
 */
uint8 UART_receiveByte(void)
{
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
	/* wait until the entire bit is received */
	while(BIT_IS_CLEAR(UCSRA, RXC));
    311a:	eb e2       	ldi	r30, 0x2B	; 43
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	88 23       	and	r24, r24
    3122:	dc f7       	brge	.-10     	; 0x311a <UART_receiveByte+0x8>
	/* read the data */
	return UDR;
    3124:	ec e2       	ldi	r30, 0x2C	; 44
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
}
    312a:	cf 91       	pop	r28
    312c:	df 91       	pop	r29
    312e:	08 95       	ret

00003130 <UART_sendString>:
/*
 * Description :
 * Function to send a String
 */
void UART_sendString(uint8* str)
{
    3130:	df 93       	push	r29
    3132:	cf 93       	push	r28
    3134:	00 d0       	rcall	.+0      	; 0x3136 <UART_sendString+0x6>
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	9a 83       	std	Y+2, r25	; 0x02
    313c:	89 83       	std	Y+1, r24	; 0x01
    313e:	0a c0       	rjmp	.+20     	; 0x3154 <UART_sendString+0x24>
	for(; *str!='\0'; str++)
	{
		UART_sendByte(*str);
    3140:	e9 81       	ldd	r30, Y+1	; 0x01
    3142:	fa 81       	ldd	r31, Y+2	; 0x02
    3144:	80 81       	ld	r24, Z
    3146:	0e 94 72 18 	call	0x30e4	; 0x30e4 <UART_sendByte>
 * Description :
 * Function to send a String
 */
void UART_sendString(uint8* str)
{
	for(; *str!='\0'; str++)
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	9a 81       	ldd	r25, Y+2	; 0x02
    314e:	01 96       	adiw	r24, 0x01	; 1
    3150:	9a 83       	std	Y+2, r25	; 0x02
    3152:	89 83       	std	Y+1, r24	; 0x01
    3154:	e9 81       	ldd	r30, Y+1	; 0x01
    3156:	fa 81       	ldd	r31, Y+2	; 0x02
    3158:	80 81       	ld	r24, Z
    315a:	88 23       	and	r24, r24
    315c:	89 f7       	brne	.-30     	; 0x3140 <UART_sendString+0x10>
	{
		UART_sendByte(*str);
	}
}
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <UART_receiveString>:
/*
 * Description :
 * Function to read a received String
 */
void UART_receiveString(uint8* str)
{
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	00 d0       	rcall	.+0      	; 0x316e <UART_receiveString+0x6>
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	89 83       	std	Y+1, r24	; 0x01

	/* receive data until the stop byte agreed upon*/
	do
	{
		*str=UART_receiveByte();
    3176:	0e 94 89 18 	call	0x3112	; 0x3112 <UART_receiveByte>
    317a:	e9 81       	ldd	r30, Y+1	; 0x01
    317c:	fa 81       	ldd	r31, Y+2	; 0x02
    317e:	80 83       	st	Z, r24
		str++;
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	9a 81       	ldd	r25, Y+2	; 0x02
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	9a 83       	std	Y+2, r25	; 0x02
    3188:	89 83       	std	Y+1, r24	; 0x01
	}while(*(str-1)!='#');
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	9a 81       	ldd	r25, Y+2	; 0x02
    318e:	fc 01       	movw	r30, r24
    3190:	31 97       	sbiw	r30, 0x01	; 1
    3192:	80 81       	ld	r24, Z
    3194:	83 32       	cpi	r24, 0x23	; 35
    3196:	79 f7       	brne	.-34     	; 0x3176 <UART_receiveString+0xe>
	/* replace the stop byte with null */
	*(str-1)='\0';
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	fc 01       	movw	r30, r24
    319e:	31 97       	sbiw	r30, 0x01	; 1
    31a0:	10 82       	st	Z, r1
}
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	08 95       	ret

000031ac <__udivmodsi4>:
    31ac:	a1 e2       	ldi	r26, 0x21	; 33
    31ae:	1a 2e       	mov	r1, r26
    31b0:	aa 1b       	sub	r26, r26
    31b2:	bb 1b       	sub	r27, r27
    31b4:	fd 01       	movw	r30, r26
    31b6:	0d c0       	rjmp	.+26     	; 0x31d2 <__udivmodsi4_ep>

000031b8 <__udivmodsi4_loop>:
    31b8:	aa 1f       	adc	r26, r26
    31ba:	bb 1f       	adc	r27, r27
    31bc:	ee 1f       	adc	r30, r30
    31be:	ff 1f       	adc	r31, r31
    31c0:	a2 17       	cp	r26, r18
    31c2:	b3 07       	cpc	r27, r19
    31c4:	e4 07       	cpc	r30, r20
    31c6:	f5 07       	cpc	r31, r21
    31c8:	20 f0       	brcs	.+8      	; 0x31d2 <__udivmodsi4_ep>
    31ca:	a2 1b       	sub	r26, r18
    31cc:	b3 0b       	sbc	r27, r19
    31ce:	e4 0b       	sbc	r30, r20
    31d0:	f5 0b       	sbc	r31, r21

000031d2 <__udivmodsi4_ep>:
    31d2:	66 1f       	adc	r22, r22
    31d4:	77 1f       	adc	r23, r23
    31d6:	88 1f       	adc	r24, r24
    31d8:	99 1f       	adc	r25, r25
    31da:	1a 94       	dec	r1
    31dc:	69 f7       	brne	.-38     	; 0x31b8 <__udivmodsi4_loop>
    31de:	60 95       	com	r22
    31e0:	70 95       	com	r23
    31e2:	80 95       	com	r24
    31e4:	90 95       	com	r25
    31e6:	9b 01       	movw	r18, r22
    31e8:	ac 01       	movw	r20, r24
    31ea:	bd 01       	movw	r22, r26
    31ec:	cf 01       	movw	r24, r30
    31ee:	08 95       	ret

000031f0 <__prologue_saves__>:
    31f0:	2f 92       	push	r2
    31f2:	3f 92       	push	r3
    31f4:	4f 92       	push	r4
    31f6:	5f 92       	push	r5
    31f8:	6f 92       	push	r6
    31fa:	7f 92       	push	r7
    31fc:	8f 92       	push	r8
    31fe:	9f 92       	push	r9
    3200:	af 92       	push	r10
    3202:	bf 92       	push	r11
    3204:	cf 92       	push	r12
    3206:	df 92       	push	r13
    3208:	ef 92       	push	r14
    320a:	ff 92       	push	r15
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	ca 1b       	sub	r28, r26
    321a:	db 0b       	sbc	r29, r27
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	cd bf       	out	0x3d, r28	; 61
    3226:	09 94       	ijmp

00003228 <__epilogue_restores__>:
    3228:	2a 88       	ldd	r2, Y+18	; 0x12
    322a:	39 88       	ldd	r3, Y+17	; 0x11
    322c:	48 88       	ldd	r4, Y+16	; 0x10
    322e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3230:	6e 84       	ldd	r6, Y+14	; 0x0e
    3232:	7d 84       	ldd	r7, Y+13	; 0x0d
    3234:	8c 84       	ldd	r8, Y+12	; 0x0c
    3236:	9b 84       	ldd	r9, Y+11	; 0x0b
    3238:	aa 84       	ldd	r10, Y+10	; 0x0a
    323a:	b9 84       	ldd	r11, Y+9	; 0x09
    323c:	c8 84       	ldd	r12, Y+8	; 0x08
    323e:	df 80       	ldd	r13, Y+7	; 0x07
    3240:	ee 80       	ldd	r14, Y+6	; 0x06
    3242:	fd 80       	ldd	r15, Y+5	; 0x05
    3244:	0c 81       	ldd	r16, Y+4	; 0x04
    3246:	1b 81       	ldd	r17, Y+3	; 0x03
    3248:	aa 81       	ldd	r26, Y+2	; 0x02
    324a:	b9 81       	ldd	r27, Y+1	; 0x01
    324c:	ce 0f       	add	r28, r30
    324e:	d1 1d       	adc	r29, r1
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	ed 01       	movw	r28, r26
    325c:	08 95       	ret

0000325e <itoa>:
    325e:	fb 01       	movw	r30, r22
    3260:	9f 01       	movw	r18, r30
    3262:	e8 94       	clt
    3264:	42 30       	cpi	r20, 0x02	; 2
    3266:	c4 f0       	brlt	.+48     	; 0x3298 <itoa+0x3a>
    3268:	45 32       	cpi	r20, 0x25	; 37
    326a:	b4 f4       	brge	.+44     	; 0x3298 <itoa+0x3a>
    326c:	4a 30       	cpi	r20, 0x0A	; 10
    326e:	29 f4       	brne	.+10     	; 0x327a <itoa+0x1c>
    3270:	97 fb       	bst	r25, 7
    3272:	1e f4       	brtc	.+6      	; 0x327a <itoa+0x1c>
    3274:	90 95       	com	r25
    3276:	81 95       	neg	r24
    3278:	9f 4f       	sbci	r25, 0xFF	; 255
    327a:	64 2f       	mov	r22, r20
    327c:	77 27       	eor	r23, r23
    327e:	0e 94 60 19 	call	0x32c0	; 0x32c0 <__udivmodhi4>
    3282:	80 5d       	subi	r24, 0xD0	; 208
    3284:	8a 33       	cpi	r24, 0x3A	; 58
    3286:	0c f0       	brlt	.+2      	; 0x328a <itoa+0x2c>
    3288:	89 5d       	subi	r24, 0xD9	; 217
    328a:	81 93       	st	Z+, r24
    328c:	cb 01       	movw	r24, r22
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	a1 f7       	brne	.-24     	; 0x327a <itoa+0x1c>
    3292:	16 f4       	brtc	.+4      	; 0x3298 <itoa+0x3a>
    3294:	5d e2       	ldi	r21, 0x2D	; 45
    3296:	51 93       	st	Z+, r21
    3298:	10 82       	st	Z, r1
    329a:	c9 01       	movw	r24, r18
    329c:	0c 94 50 19 	jmp	0x32a0	; 0x32a0 <strrev>

000032a0 <strrev>:
    32a0:	dc 01       	movw	r26, r24
    32a2:	fc 01       	movw	r30, r24
    32a4:	67 2f       	mov	r22, r23
    32a6:	71 91       	ld	r23, Z+
    32a8:	77 23       	and	r23, r23
    32aa:	e1 f7       	brne	.-8      	; 0x32a4 <strrev+0x4>
    32ac:	32 97       	sbiw	r30, 0x02	; 2
    32ae:	04 c0       	rjmp	.+8      	; 0x32b8 <strrev+0x18>
    32b0:	7c 91       	ld	r23, X
    32b2:	6d 93       	st	X+, r22
    32b4:	70 83       	st	Z, r23
    32b6:	62 91       	ld	r22, -Z
    32b8:	ae 17       	cp	r26, r30
    32ba:	bf 07       	cpc	r27, r31
    32bc:	c8 f3       	brcs	.-14     	; 0x32b0 <strrev+0x10>
    32be:	08 95       	ret

000032c0 <__udivmodhi4>:
    32c0:	aa 1b       	sub	r26, r26
    32c2:	bb 1b       	sub	r27, r27
    32c4:	51 e1       	ldi	r21, 0x11	; 17
    32c6:	07 c0       	rjmp	.+14     	; 0x32d6 <__udivmodhi4_ep>

000032c8 <__udivmodhi4_loop>:
    32c8:	aa 1f       	adc	r26, r26
    32ca:	bb 1f       	adc	r27, r27
    32cc:	a6 17       	cp	r26, r22
    32ce:	b7 07       	cpc	r27, r23
    32d0:	10 f0       	brcs	.+4      	; 0x32d6 <__udivmodhi4_ep>
    32d2:	a6 1b       	sub	r26, r22
    32d4:	b7 0b       	sbc	r27, r23

000032d6 <__udivmodhi4_ep>:
    32d6:	88 1f       	adc	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	5a 95       	dec	r21
    32dc:	a9 f7       	brne	.-22     	; 0x32c8 <__udivmodhi4_loop>
    32de:	80 95       	com	r24
    32e0:	90 95       	com	r25
    32e2:	bc 01       	movw	r22, r24
    32e4:	cd 01       	movw	r24, r26
    32e6:	08 95       	ret

000032e8 <_exit>:
    32e8:	f8 94       	cli

000032ea <__stop_program>:
    32ea:	ff cf       	rjmp	.-2      	; 0x32ea <__stop_program>
